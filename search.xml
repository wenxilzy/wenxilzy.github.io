<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据挖掘与大数据分析复习</title>
      <link href="/2022/05/27/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/05/27/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B8%8E%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h2><h2 id="第一章-数据挖掘与大数据简介"><a href="#第一章-数据挖掘与大数据简介" class="headerlink" title="第一章 数据挖掘与大数据简介"></a>第一章 数据挖掘与大数据简介</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h3 id="数据挖掘主要任务"><a href="#数据挖掘主要任务" class="headerlink" title="数据挖掘主要任务"></a>数据挖掘主要任务</h3><h3 id="（重点）KDD过程（知识发现过程）"><a href="#（重点）KDD过程（知识发现过程）" class="headerlink" title="（重点）KDD过程（知识发现过程）"></a>（重点）KDD过程（知识发现过程）</h3><h3 id="数据挖掘挑战"><a href="#数据挖掘挑战" class="headerlink" title="数据挖掘挑战"></a>数据挖掘挑战</h3><h2 id="第二章-认识数据和数据预处理"><a href="#第二章-认识数据和数据预处理" class="headerlink" title="第二章 认识数据和数据预处理"></a>第二章 认识数据和数据预处理</h2><h3 id="复习提纲"><a href="#复习提纲" class="headerlink" title="复习提纲"></a>复习提纲</h3><h3 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h3><h3 id="（重点）【选填题】数据的描述性统计"><a href="#（重点）【选填题】数据的描述性统计" class="headerlink" title="（重点）【选填题】数据的描述性统计"></a>（重点）【选填题】数据的描述性统计</h3><h4 id="中心趋势度量"><a href="#中心趋势度量" class="headerlink" title="中心趋势度量"></a>中心趋势度量</h4><h4 id="数据的散布"><a href="#数据的散布" class="headerlink" title="数据的散布"></a>数据的散布</h4><h3 id="（重点）【上机实习】-数据的相似度度量"><a href="#（重点）【上机实习】-数据的相似度度量" class="headerlink" title="（重点）【上机实习】 数据的相似度度量"></a>（重点）【上机实习】 数据的相似度度量</h3><h4 id="标称属性数据"><a href="#标称属性数据" class="headerlink" title="标称属性数据"></a>标称属性数据</h4><h4 id="二元变量属性数据"><a href="#二元变量属性数据" class="headerlink" title="二元变量属性数据"></a>二元变量属性数据</h4><h4 id="序数型变量数据"><a href="#序数型变量数据" class="headerlink" title="序数型变量数据"></a>序数型变量数据</h4><h4 id="数值属性数据"><a href="#数值属性数据" class="headerlink" title="数值属性数据"></a>数值属性数据</h4><h3 id="（重点）数据预处理"><a href="#（重点）数据预处理" class="headerlink" title="（重点）数据预处理"></a>（重点）数据预处理</h3><h4 id="为什么要挖掘？"><a href="#为什么要挖掘？" class="headerlink" title="为什么要挖掘？"></a>为什么要挖掘？</h4><h4 id="数据预处理的主要任务"><a href="#数据预处理的主要任务" class="headerlink" title="数据预处理的主要任务"></a>数据预处理的主要任务</h4><h4 id="（重点）-数据清理-（数据的填充方式重点）"><a href="#（重点）-数据清理-（数据的填充方式重点）" class="headerlink" title="（重点） 数据清理 （数据的填充方式重点）"></a>（重点） 数据清理 （数据的填充方式重点）</h4><h4 id="数据集成"><a href="#数据集成" class="headerlink" title="数据集成"></a>数据集成</h4><h4 id="数据规约"><a href="#数据规约" class="headerlink" title="数据规约"></a>数据规约</h4><h4 id="数据变化"><a href="#数据变化" class="headerlink" title="数据变化"></a>数据变化</h4><h4 id="数据离散化"><a href="#数据离散化" class="headerlink" title="数据离散化"></a>数据离散化</h4><h2 id="第三章-关联规则挖掘"><a href="#第三章-关联规则挖掘" class="headerlink" title="第三章 关联规则挖掘"></a>第三章 关联规则挖掘</h2><h3 id="复习提纲-1"><a href="#复习提纲-1" class="headerlink" title="复习提纲"></a>复习提纲</h3><h3 id="定义以及一些概念"><a href="#定义以及一些概念" class="headerlink" title="定义以及一些概念"></a>定义以及一些概念</h3><h3 id="Apriori算法"><a href="#Apriori算法" class="headerlink" title="Apriori算法"></a>Apriori算法</h3><h3 id="FP-growth算法"><a href="#FP-growth算法" class="headerlink" title="FP-growth算法"></a>FP-growth算法</h3><h3 id="支持度，置信度及兴趣因子"><a href="#支持度，置信度及兴趣因子" class="headerlink" title="支持度，置信度及兴趣因子"></a>支持度，置信度及兴趣因子</h3><h2 id="第四章-分类-回归"><a href="#第四章-分类-回归" class="headerlink" title="第四章 分类/回归"></a>第四章 分类/回归</h2><h3 id="复习提纲-2"><a href="#复习提纲-2" class="headerlink" title="复习提纲"></a>复习提纲</h3><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="监督学习-VS-无监督学习"><a href="#监督学习-VS-无监督学习" class="headerlink" title="监督学习 VS 无监督学习"></a>监督学习 VS 无监督学习</h4><h4 id="（重要）-模型分类"><a href="#（重要）-模型分类" class="headerlink" title="（重要） 模型分类"></a>（重要） 模型分类</h4><h5 id="生成模型"><a href="#生成模型" class="headerlink" title="生成模型"></a>生成模型</h5><h5 id="判别模型"><a href="#判别模型" class="headerlink" title="判别模型"></a>判别模型</h5><h5 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h5><h3 id="决策树（DT）"><a href="#决策树（DT）" class="headerlink" title="决策树（DT）"></a>决策树（DT）</h3><h4 id="（重点）-决策树的优缺点"><a href="#（重点）-决策树的优缺点" class="headerlink" title="（重点） 决策树的优缺点"></a>（重点） 决策树的优缺点</h4><h4 id="（重点）-构建决策树的方法"><a href="#（重点）-构建决策树的方法" class="headerlink" title="（重点） 构建决策树的方法"></a>（重点） 构建决策树的方法</h4><h4 id="（重点）-属性选择基本准则"><a href="#（重点）-属性选择基本准则" class="headerlink" title="（重点） 属性选择基本准则"></a>（重点） 属性选择基本准则</h4><h5 id="（重点）-信息增益（ID3）"><a href="#（重点）-信息增益（ID3）" class="headerlink" title="（重点） 信息增益（ID3）"></a>（重点） 信息增益（ID3）</h5><h5 id="（重点）-信息增益率（C4-5）"><a href="#（重点）-信息增益率（C4-5）" class="headerlink" title="（重点） 信息增益率（C4.5）"></a>（重点） 信息增益率（C4.5）</h5><h5 id="Gini指数（CART）"><a href="#Gini指数（CART）" class="headerlink" title="Gini指数（CART）"></a>Gini指数（CART）</h5><h3 id="（重点）-过拟合问题和解决"><a href="#（重点）-过拟合问题和解决" class="headerlink" title="（重点） 过拟合问题和解决"></a>（重点） 过拟合问题和解决</h3><h4 id="过拟合问题的解决策略"><a href="#过拟合问题的解决策略" class="headerlink" title="过拟合问题的解决策略"></a>过拟合问题的解决策略</h4><h4 id="（重点）在决策树中如何避免过拟合"><a href="#（重点）在决策树中如何避免过拟合" class="headerlink" title="（重点）在决策树中如何避免过拟合"></a>（重点）在决策树中如何避免过拟合</h4><h3 id="（重点）-KNN"><a href="#（重点）-KNN" class="headerlink" title="（重点） KNN"></a>（重点） KNN</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><h3 id="（重点）SVM支持向量机"><a href="#（重点）SVM支持向量机" class="headerlink" title="（重点）SVM支持向量机"></a>（重点）SVM支持向量机</h3><h4 id="（重点）SVM的优缺点"><a href="#（重点）SVM的优缺点" class="headerlink" title="（重点）SVM的优缺点"></a>（重点）SVM的优缺点</h4><h4 id="什么是支持向量？"><a href="#什么是支持向量？" class="headerlink" title="什么是支持向量？"></a>什么是支持向量？</h4><h3 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h3><h3 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h3><h3 id="分类评价指标"><a href="#分类评价指标" class="headerlink" title="分类评价指标"></a>分类评价指标</h3><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><h2 id="第五章-聚类算法和噪声检测"><a href="#第五章-聚类算法和噪声检测" class="headerlink" title="第五章 聚类算法和噪声检测"></a>第五章 聚类算法和噪声检测</h2><h3 id="复习提纲-3"><a href="#复习提纲-3" class="headerlink" title="复习提纲"></a>复习提纲</h3><h3 id="什么是聚类"><a href="#什么是聚类" class="headerlink" title="什么是聚类"></a>什么是聚类</h3><h3 id="聚类算法分类"><a href="#聚类算法分类" class="headerlink" title="聚类算法分类"></a>聚类算法分类</h3><h3 id="（重点）KMEANS"><a href="#（重点）KMEANS" class="headerlink" title="（重点）KMEANS"></a>（重点）KMEANS</h3><h4 id="KMEANS优缺点"><a href="#KMEANS优缺点" class="headerlink" title="KMEANS优缺点"></a>KMEANS优缺点</h4><h3 id="（重点）DBSCAN"><a href="#（重点）DBSCAN" class="headerlink" title="（重点）DBSCAN"></a>（重点）DBSCAN</h3><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><h2 id="大数据分析"><a href="#大数据分析" class="headerlink" title="大数据分析"></a>大数据分析</h2><h3 id="复习提纲-4"><a href="#复习提纲-4" class="headerlink" title="复习提纲"></a>复习提纲</h3><h3 id="哈希技术"><a href="#哈希技术" class="headerlink" title="哈希技术"></a>哈希技术</h3><h4 id="（重点）-Min哈希（最小哈希）"><a href="#（重点）-Min哈希（最小哈希）" class="headerlink" title="（重点） Min哈希（最小哈希）"></a>（重点） Min哈希（最小哈希）</h4><h4 id="（重点）-会算签名矩阵"><a href="#（重点）-会算签名矩阵" class="headerlink" title="（重点） 会算签名矩阵"></a>（重点） 会算签名矩阵</h4><h4 id="LSH（局部敏感哈希）"><a href="#LSH（局部敏感哈希）" class="headerlink" title="LSH（局部敏感哈希）"></a>LSH（局部敏感哈希）</h4><h3 id="数据流挖掘"><a href="#数据流挖掘" class="headerlink" title="数据流挖掘"></a>数据流挖掘</h3><h4 id="（重点）如何检测概念漂移"><a href="#（重点）如何检测概念漂移" class="headerlink" title="（重点）如何检测概念漂移"></a>（重点）如何检测概念漂移</h4><h3 id="（重点）-Hadoop-spark的基本概念！"><a href="#（重点）-Hadoop-spark的基本概念！" class="headerlink" title="（重点） Hadoop/spark的基本概念！"></a>（重点） Hadoop/spark的基本概念！</h3>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据挖掘与大数据分析 </tag>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件技术基础复习</title>
      <link href="/2022/05/27/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/05/27/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h3 id="软件开发六步骤（了解）"><a href="#软件开发六步骤（了解）" class="headerlink" title="软件开发六步骤（了解）"></a>软件开发六步骤（了解）</h3><h3 id="操作系统的主要功能（了解）"><a href="#操作系统的主要功能（了解）" class="headerlink" title="操作系统的主要功能（了解）"></a>操作系统的主要功能（了解）</h3><h2 id="第二章-数据结构与算法"><a href="#第二章-数据结构与算法" class="headerlink" title="第二章 数据结构与算法"></a>第二章 数据结构与算法</h2><h3 id="线性表的逻辑存储结构"><a href="#线性表的逻辑存储结构" class="headerlink" title="线性表的逻辑存储结构"></a>线性表的逻辑存储结构</h3><h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3><h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3><h3 id="两种存储方式的优缺点"><a href="#两种存储方式的优缺点" class="headerlink" title="两种存储方式的优缺点"></a>两种存储方式的优缺点</h3><h3 id="时间复杂度渐进分析（大题）"><a href="#时间复杂度渐进分析（大题）" class="headerlink" title="时间复杂度渐进分析（大题）"></a>时间复杂度渐进分析（大题）</h3><h3 id="分治算法求解排序问题"><a href="#分治算法求解排序问题" class="headerlink" title="分治算法求解排序问题"></a>分治算法求解排序问题</h3><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h3 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h3><h3 id="二叉树的存储"><a href="#二叉树的存储" class="headerlink" title="二叉树的存储"></a>二叉树的存储</h3><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><h3 id="树和二叉树的互换"><a href="#树和二叉树的互换" class="headerlink" title="树和二叉树的互换"></a>树和二叉树的互换</h3><h3 id="先序和中序遍历恢复二叉树"><a href="#先序和中序遍历恢复二叉树" class="headerlink" title="先序和中序遍历恢复二叉树"></a>先序和中序遍历恢复二叉树</h3><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><h3 id="Dijkstr算法求最短路径"><a href="#Dijkstr算法求最短路径" class="headerlink" title="Dijkstr算法求最短路径"></a>Dijkstr算法求最短路径</h3><h2 id="第三章-操作系统"><a href="#第三章-操作系统" class="headerlink" title="第三章 操作系统"></a>第三章 操作系统</h2><h3 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h3><h3 id="进程五状态转换模型"><a href="#进程五状态转换模型" class="headerlink" title="进程五状态转换模型"></a>进程五状态转换模型</h3><h3 id="挂起状态"><a href="#挂起状态" class="headerlink" title="挂起状态"></a>挂起状态</h3><h3 id="进程的构成（了解）"><a href="#进程的构成（了解）" class="headerlink" title="进程的构成（了解）"></a>进程的构成（了解）</h3><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h3 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h3><h3 id="竞争临界资源引起的问题"><a href="#竞争临界资源引起的问题" class="headerlink" title="竞争临界资源引起的问题"></a>竞争临界资源引起的问题</h3><h3 id="互斥的条件"><a href="#互斥的条件" class="headerlink" title="互斥的条件"></a>互斥的条件</h3><h3 id="信号量方法"><a href="#信号量方法" class="headerlink" title="信号量方法"></a>信号量方法</h3><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><h3 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h3><h3 id="链接方式"><a href="#链接方式" class="headerlink" title="链接方式"></a>链接方式</h3><h3 id="装入方式"><a href="#装入方式" class="headerlink" title="装入方式"></a>装入方式</h3><h2 id="第四章-编译原理"><a href="#第四章-编译原理" class="headerlink" title="第四章 编译原理"></a>第四章 编译原理</h2><h3 id="编译相关概念"><a href="#编译相关概念" class="headerlink" title="编译相关概念"></a>编译相关概念</h3><h3 id="数据类型及抽象层次"><a href="#数据类型及抽象层次" class="headerlink" title="数据类型及抽象层次"></a>数据类型及抽象层次</h3><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><h3 id="语句级控制结构"><a href="#语句级控制结构" class="headerlink" title="语句级控制结构"></a>语句级控制结构</h3><h3 id="定义语言"><a href="#定义语言" class="headerlink" title="定义语言"></a>定义语言</h3><h3 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h3><h3 id="推导和规约"><a href="#推导和规约" class="headerlink" title="推导和规约"></a>推导和规约</h3><h3 id="句型和句子"><a href="#句型和句子" class="headerlink" title="句型和句子"></a>句型和句子</h3><h3 id="文法和语言"><a href="#文法和语言" class="headerlink" title="文法和语言"></a>文法和语言</h3><h3 id="短句和直接短语"><a href="#短句和直接短语" class="headerlink" title="短句和直接短语"></a>短句和直接短语</h3><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><h3 id="语法树"><a href="#语法树" class="headerlink" title="语法树"></a>语法树</h3><h3 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h3><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><h3 id="词法分析两大类型"><a href="#词法分析两大类型" class="headerlink" title="词法分析两大类型"></a>词法分析两大类型</h3><h3 id="自下而上可能遇到的问题"><a href="#自下而上可能遇到的问题" class="headerlink" title="自下而上可能遇到的问题"></a>自下而上可能遇到的问题</h3><h3 id="确定与不确定"><a href="#确定与不确定" class="headerlink" title="确定与不确定"></a>确定与不确定</h3><h3 id="递归下降分析法"><a href="#递归下降分析法" class="headerlink" title="递归下降分析法"></a>递归下降分析法</h3><h3 id="预测分析法"><a href="#预测分析法" class="headerlink" title="预测分析法"></a>预测分析法</h3><h3 id="算法优先分析法"><a href="#算法优先分析法" class="headerlink" title="算法优先分析法"></a>算法优先分析法</h3><h3 id="FIRSTVT集"><a href="#FIRSTVT集" class="headerlink" title="FIRSTVT集"></a>FIRSTVT集</h3><h3 id="LASTVT集"><a href="#LASTVT集" class="headerlink" title="LASTVT集"></a>LASTVT集</h3><h3 id="优先关系表构造法"><a href="#优先关系表构造法" class="headerlink" title="优先关系表构造法"></a>优先关系表构造法</h3><h2 id="第五章-数据库"><a href="#第五章-数据库" class="headerlink" title="第五章 数据库"></a>第五章 数据库</h2><h3 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h3><h3 id="模式的体系结构"><a href="#模式的体系结构" class="headerlink" title="模式的体系结构"></a>模式的体系结构</h3><h3 id="关系模型基本概念"><a href="#关系模型基本概念" class="headerlink" title="关系模型基本概念"></a>关系模型基本概念</h3><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><h3 id="连接运算"><a href="#连接运算" class="headerlink" title="连接运算"></a>连接运算</h3><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><h3 id="主码和候选码"><a href="#主码和候选码" class="headerlink" title="主码和候选码"></a>主码和候选码</h3><h3 id="模式分解"><a href="#模式分解" class="headerlink" title="模式分解"></a>模式分解</h3><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><h3 id="重要例题"><a href="#重要例题" class="headerlink" title="重要例题"></a>重要例题</h3><h3 id="三种数据模型"><a href="#三种数据模型" class="headerlink" title="三种数据模型"></a>三种数据模型</h3><h3 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h3><h3 id="数据库设计阶段"><a href="#数据库设计阶段" class="headerlink" title="数据库设计阶段"></a>数据库设计阶段</h3><ol><li><p><strong>需求分析阶段</strong>：</p></li><li><p><strong>概念设计阶段</strong>：将用户的需求抽象为用户与开发人员都能接受的概念模型，</p></li><li><p><strong>逻辑设计阶段</strong>：把抽象的概念结构进一步转换为可以被具体的DBMS产品所能支持的数据模型</p></li><li><p><strong>物理设计阶段</strong>：确定的物理存储结构</p></li><li><p><strong>实现阶段</strong>：开发和调试，以及现实数据的录入和试运行等基本工作。</p></li><li><p><strong>运行与维护阶段</strong>：保证数据库系统的效率，以及根据实际运行情况和用户的需求变动进行调整</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 软件技术基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算智能复习</title>
      <link href="/2022/05/23/%E8%AE%A1%E7%AE%97%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/05/23/%E8%AE%A1%E7%AE%97%E6%99%BA%E8%83%BD%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-互联网情境下的智能预测"><a href="#第一章-互联网情境下的智能预测" class="headerlink" title="第一章 互联网情境下的智能预测"></a>第一章 互联网情境下的智能预测</h2><h3 id="强弱连接基本概念"><a href="#强弱连接基本概念" class="headerlink" title="强弱连接基本概念"></a>强弱连接基本概念</h3><p>强连接：连接稳定，共通点多，传播范围有限，例如亲戚，朋友，社会认知<br>弱连接：共同点少，例如无意间提到或打开收音机听到的信息</p><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><p>一个图G=(V,E)由一个非空顶点（或节点）集合V和一个边集合E组成。每条边都有一个或两个与之相关的顶点，称为端点。一条边被称为连接它的端点。</p><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p><strong>基本规则</strong><br>连边存在，值为1，连边不存在值为0.<br><strong>对于有向图</strong><br>第i行的含义为从顶点$v_i$出发的边，出度边，箭头的尾，即<strong>出度=第i行中元素之和</strong><br>第j列的含义为到顶点$v_j$结束的边，入度边，箭头的头，即<strong>入度=第i列中元素之和</strong><br><strong>邻接矩阵的n次方</strong><br>R代表可通过1条边到达某节点之间的路径数</p><p>$R*R=R^2$代表可通过R的两条边到达某节点的路径数</p><p>$R^n$代表可通过R中n条边到达的某节点的路径数</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/26/99310_17b7bce5dc-1.png" alt="1.png"> </p><p><strong>优点：</strong></p><ul><li>直观，简单</li><li>方便寻找是否有连边存在</li><li>方便寻找任意顶点的邻接点</li><li>方便计算任意顶点的度</li></ul><p><strong>缺点：</strong></p><ul><li>不便于增删节点</li><li>浪费空间：稀疏图（点多，边少），有大量元素</li><li>浪费时间：稀疏图统计需要大量时间</li></ul><h3 id="交叉验证Cross-Validation"><a href="#交叉验证Cross-Validation" class="headerlink" title="交叉验证Cross Validation"></a>交叉验证Cross Validation</h3><p><strong>定义</strong><br>Cross Validation也叫Rotation Estimation，是一种统计学上讲数据样本切割成较小子集的使用方法</p><p><strong>目的：</strong><br>为了得到稳定可靠的模型</p><blockquote><p>在神经网络中常常将样本分为训练集，验证集，测试集，能提高训练精度防止过拟合<br><strong>常见形式</strong><br>K-Fold Cross Validation</p></blockquote><h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><p><strong>定义：</strong><br>也叫误差矩阵，是表示精度评价的一种标准格式，用n行n列的矩阵来表示（n代表预测类别）<br><strong>二元分类-预测类别：</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/26/99310_84c171d2dc-2.png" alt="2.png"> </p><blockquote><p>关于上表的理解，阳性为真，阴性为假，真阳性就是预测为真，实际也为真，假阳性就是预测为真，但实际为假的，假阴性就是预测为假，实际为真，而真阴性就是预测为假，实际也为假，后面的单词就是缩写，真的为T，假的为F，阳性为P，阴性为N</p></blockquote><h3 id="链路预测"><a href="#链路预测" class="headerlink" title="链路预测"></a>链路预测</h3><p><strong>定义：</strong><br>网络中的链路预测（Link Prediction）是指通过已知的网络节点以及网络结构等信息预测网络中尚未产生连边的两个节点之间产生链接的可能性。</p><p>如果两个节点具有相似的网络结构，则他们是相连的</p><p><strong>目的：</strong><br>预测两节点相连的可能性</p><p><strong>应用：</strong><br>社交媒体，好友推荐</p><p><strong>相似度指数：</strong><br>局部相似度Local similarity Indices：仅使用局部信息（信息 节点周围），不是很准确但很快<br>全局相似度Global similarity indices：使用全局信息（信息 在整个网络中），更准确但成本高<br>准本地指数Quasi-local indices：本地和全球之间的权衡</p><p><strong>分类</strong><br>Local Prediction</p><ul><li>公共邻居Common neighbors (CN)<br>  两个节点的公共邻居个数<br>  <img src="https://img-blog.csdnimg.cn/20210629142818578.png" alt="1.png"></li><li>公共邻居比例Jaccard (JC)<br>  公共邻居数占两点总邻居的比例<br>  <img src="https://img-blog.csdnimg.cn/20210629141325855.png" alt="1.png"></li><li>资源分配Resource Allocation (RA)<br>  公共邻居的度取倒数，然后累加<br>  <img src="https://img-blog.csdnimg.cn/20210629141534871.png" alt="1.png"><blockquote><p>可以看作公共邻居分配给自己的资源</p></blockquote></li><li>Adamic-Adar (AA)<br>  公共邻居的度数取对后再取倒数，然后累加<br>  <img src="https://img-blog.csdnimg.cn/20210629141651353.png" alt="1.png"></li><li>Preferential attachment (PA) …<br>  两节点度 相乘<br>  <img src="https://img-blog.csdnimg.cn/20210629142733325.png" alt="1.png"></li></ul><p>Global Prediction</p><ul><li>Katz score</li><li>Hitting time</li><li>PageRank …</li></ul><p>Quasi-Local Prediction</p><h3 id="链路预测-机器学习性能评估指标"><a href="#链路预测-机器学习性能评估指标" class="headerlink" title="链路预测/机器学习性能评估指标"></a>链路预测/机器学习性能评估指标</h3><p><strong>灵敏度Sensitivity=召回率Recall</strong></p><p>真阳性率，实际阳性案例中，检测出阳性的比例</p><blockquote><p>实际阳性包括真阳和假阴</p></blockquote><p>真阳性率=$\frac{TP}{TP+FN}$</p><p><strong>特异性Specificity</strong><br>真阴性率，实际阴性案例中，检测出阴性的比例</p><blockquote><p>实际阴性包括真阴和假阳</p></blockquote><p>真阴性率=$\frac{TN}{FP+TN}$</p><p><strong>Precision</strong><br>被预测出阳性的案例中实际为阳性的比例</p><script type="math/tex; mode=display">\frac{TP}{TP+FP}</script><p><strong>Accuracy</strong><br>正确分类样本数占总样本数的比例，该值越高，分类效果越好</p><script type="math/tex; mode=display">\frac{TP+TN}{TP+FP+TN+FN}</script><p><img src="https://img-blog.csdnimg.cn/20210626145320729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p><p><strong>ROC&amp;AUC</strong><br>ROC是以真阳率和真阴率为轴的曲线</p><p>AUC是ROC曲线与坐标轴围成的面积，面积越接近于1，分类效果越好</p><h3 id="网页排序PageRank"><a href="#网页排序PageRank" class="headerlink" title="网页排序PageRank"></a>网页排序PageRank</h3><p><strong>核心思想：</strong> 非竞价排名</p><p><strong>数量假设：</strong> 在Web图模型中，如果一个页面节点接收到的其他页面指向的入链数量越多，那么这个页面越重要</p><p><strong>质量假设：</strong> 指向网页的入链质量不同，质量高的页面会通过链接向其他页面传递更多的权重。所以越是质量高的页面指向网页，则这个页面越重要。</p><p><strong>迭代公式：</strong></p><script type="math/tex; mode=display">PR(i)=\sum_{j \in B_i}\frac{PR(j)}{O_j}</script><p>$O_j$表示出度，$B_i$表示指向page i的所有网页集</p><p><strong>排名泄露</strong><br>如果存在网页没有出度链接，则会出现排名泄露问题，经过多次迭代后，所有网页的PR值都趋向于0</p><blockquote><p>可以这样理解，就是说所有的权重为1，有一个网站会不断的吸取权重，使得系统中的权重不断减少，经过多次迭代系统内部的权重被吸收完了。</p></blockquote><p><strong>排名下沉</strong><br>若网页没有入度链接，经过多次迭代，其PR值会趋向于0</p><p><strong>排名上升</strong><br>互联网中一个网页只有对自己的出链，或者几个网页的出链形成了一个循环圈。那么在不断迭代过程中，这一个或几个网页的PR值将只增不减</p><h2 id="第二章-互联网情境下的智能学习"><a href="#第二章-互联网情境下的智能学习" class="headerlink" title="第二章 互联网情境下的智能学习"></a>第二章 互联网情境下的智能学习</h2><h3 id="过拟合-Overfitting"><a href="#过拟合-Overfitting" class="headerlink" title="过拟合 Overfitting"></a>过拟合 Overfitting</h3><p><strong>根本原因：</strong> 参数过多<br><strong>实际原因：</strong></p><ul><li>训练集和测试集分布不一致</li><li>模型太过复杂而样本量不足</li></ul><p><strong>解决策略：</strong><br>增大数据规模，简化模型，交叉检验，增大正则化系数$\lambda$</p><h3 id="Bias-VS-Variance"><a href="#Bias-VS-Variance" class="headerlink" title="Bias VS Variance"></a>Bias VS Variance</h3><p>Bias代表偏差，高Bias代表与真实值偏离大，对应着欠拟合</p><p>Variance代表方差，高Variance代表数据波动大，对应过拟合</p><p><img src="https://img-blog.csdnimg.cn/20210626154804445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><p><strong>概念</strong><br>简单的来说，正则化是一种为了减小<strong>测试误差</strong>的行为（有时候会增加<strong>训练误差</strong>）<br><strong>常用方法</strong></p><ol><li>L1&amp;L2范数正则化<br>在目标函数后面添加一个惩罚项，之后的目标函数为<br><img src="https://img-blog.csdnimg.cn/20210626165721277.png" alt="1.png"><br>$\lambda$是超参数，用于控制正则化程度，L1或L2正则化时，惩罚项对应为L1/L2范数</li><li>Dropout<br>直接在网络层里加一个dropout层，随机丢弃神经网络参数</li><li>earlystopping<br>提前终止可能是最简单的正则化方法，他适用于模型的表达能力很强的时候。一般情况下，一般训练误差会随着训练次数的增多逐渐下降，而测试误差则会先下降而后再次上升。我们需要做的就是在测试误差最低的点停止训练即可。<h3 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h3><strong>定义</strong><br>在线性代数中，泛函分析等数学分支中，范数（Norm）是一个函数，其赋予了某个向量空间（或矩阵）中的每个向量以长度或大小，向量$x=[x_1,x_2,…,x_n]$,向量的长度，或者向量到零点的距离，或者相应的两个点之间的距离。对于零向量，另其长度为零。<br><strong>性质</strong><br>满足非负性$||x||\leq 0|，齐次性||CX||=|C|||X||，三角不等式$||x+y||\leq ||x||+||y||$<br><strong>分类</strong><br><strong>$L_0范数$</strong> ||x||为x向量中所有非零元素的个数<br>实现稀疏的模式表示，如果我们用$L_0$范数来求min，规则化一个参数矩阵W，就是使W的大部分元素都是0.（特征简单）</li></ol><p>稀疏的意义：</p><p>实现特征的自动选择：去掉这些没有信息的特征，也就是把这些特征对应的权重置为0</p><p>模型更容易解释：例如患某种病的概率是y，收集到的数据x是1000维的，也 就是我们需要寻找这1000种因素到底是怎么影响患上这种病的概率的。假设 我们这个是个回归模型： y=w1 <em>x1+w2 </em>x2+…+w1000 <em>x1000+b 如果最后学习到 的w</em>就只有很少的非零元素，例如只有5个非零的$w_i$，那么我们就有理由相信， 这些对应的特征在患病分析上面提供的信息是巨大的，决策性的。</p><p><strong>L1范数</strong>：||x||为x向量各个元素绝对值之和</p><p>也叫“稀疏规则算子”，同样是使得W中的大部分元素都为0 ， 在一定条件下，L1范数和L0范数可以等价 ，L1范数和L0范数可以实现稀疏， L1因具有比L0更好的优化求解特性而被广泛应用；</p><p>在Wi=0的地方不可微，并且可以分解为一个“求和”的形式，它是L0范数的最 优凸近似，比L0范数要容易优化求解求min（有一些计算机解法）；</p><p><strong>L2范数</strong>||x||为x向量各个元素平方和的1/2次方，L2范数又称Euclidean范数 或者Frobenius范数</p><p>“岭回归”（Ridge Regression），也叫做“权值衰减weight decay”。将L2范数的规则项||W||2最小化，可以使得W的每个元素都很小，都接近于0 ，但与L1范数不同，它不会让它等于0，而是接近于0。</p><p>我们可以实现对模型空间的限制，从而在一定程度上避免了 过拟合</p><p><strong>Lp范数</strong>：||x||为x向量各个元素绝对值p次方和的1/p次方</p><p><strong>L∞范数</strong>：||x||为x向量各个元素绝对值最大那个元素的绝对值</p><h3 id="距离度量"><a href="#距离度量" class="headerlink" title="距离度量"></a>距离度量</h3><p><strong>闵可夫斯基距离：</strong><br> 闵氏距离不是一种距离，而是一组距离的定义，对应$L_p$范数，p为参数。</p><p> <img src="https://img-blog.csdnimg.cn/20210626160819342.png" alt="1.png"></p><p> <strong>典型的闵可夫斯基距离：</strong></p><ul><li>p=1时，即为曼哈顿距离</li><li>p=2时，就是欧几里得距离（欧式）距离</li><li>当$p \to$∞时，就是切比雪夫距离</li></ul><p><strong>损失函数</strong><br> 铰链损失（Hinge Loss）：主要用于支持向量机（SVM） 中；</p><p> 互熵损失 （Cross Entropy Loss，Softmax Loss ）：用于Logistic 回归与 Softmax 分类中；</p><p> 平方损失（Square Loss）：主要是最小二乘法（OLS）中；</p><p> 指数损失（Exponential Loss） ：主要用于Adaboost 集成学习算法中；</p><p> 其他损失（如0-1损失，绝对值损失）</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><img src="https://img-blog.csdnimg.cn/20210626163143251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p><p><strong>计算步骤</strong></p><ol><li>找出算法中重复执行次数最多的语句的频率来估计时间复杂度</li><li>保留算法的最高次幂，忽略所有低次幂和高次幂的系数</li><li>将算法实行次数的数量级放入大O记号中</li></ol><p><img src="https://img-blog.csdnimg.cn/20210626164812545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p><h2 id="互联网情景下的智能决策"><a href="#互联网情景下的智能决策" class="headerlink" title="互联网情景下的智能决策"></a>互联网情景下的智能决策</h2><h3 id="四大基本智能体"><a href="#四大基本智能体" class="headerlink" title="四大基本智能体"></a>四大基本智能体</h3><ol><li><p>简单反射智能体Simple Reflex Agent：<br><img src="https://img-blog.csdnimg.cn/20210628130410367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p></li><li><p>基于模型的反射智能体Model-based Reflex Agent：<br>相当于在action由一个网络模型（神经网络或其他网络模型应该都算）计算得到<br><img src="https://img-blog.csdnimg.cn/20210628130735828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p></li><li><p>基于目标的反射智能体 Goal-based agents：<br><img src="https://img-blog.csdnimg.cn/20210628130836443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p></li><li><p>基于用途的反射智能体Utility-based agents:<br>现在用的最多的智能个体框架</p></li></ol><p>个人理解可能相当于不止考虑当前action的V值，还考虑未来的V值，也就是以当前action的Q值为标准。<br><img src="https://img-blog.csdnimg.cn/20210628131018337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p><h3 id="强化学习框架"><a href="#强化学习框架" class="headerlink" title="强化学习框架"></a>强化学习框架</h3><p><img src="https://img-blog.csdnimg.cn/20210628131341652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p><h3 id="博弈"><a href="#博弈" class="headerlink" title="博弈"></a>博弈</h3><p>多智能体之间交互，互相学习训练的过程</p><p><img src="https://img-blog.csdnimg.cn/2021062813165051.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p><h3 id="机器学习定义"><a href="#机器学习定义" class="headerlink" title="机器学习定义"></a>机器学习定义</h3><p>基本定义：</p><p>通过统计学的学习方法，使模型从大量数据中找到规律，从而得到预测未来的能力</p><p>白话定义：<br>举一反三，通过对大量样本的学习总结出规律，再次利用规律对从未见过的样本进行分析，判断并得出结论</p><h3 id="三大机器学习"><a href="#三大机器学习" class="headerlink" title="三大机器学习"></a>三大机器学习</h3><ol><li>监督学习：<strong>预测分类</strong></li></ol><p>从<strong>有标签</strong>的训练数据中学习模型，以便对未知或者未来的数据做出预测</p><p>应用：自然语言处理，计算机视觉</p><ol><li><p>非监督学习：<strong>聚类</strong><br>从<strong>没有标签</strong>的训练数据中学习判断，寻找相似点进行聚类</p></li><li><p>强化学习：<strong>行为决策</strong><br>根据环境数据<strong>选择行为</strong>以最大化预期长期收益</p></li></ol><p>强化学习框架可以融合其他学习的方法但其他学习无法刻画强化学习</p><p>应用：智能机器人，游戏AI， Alpha Go</p><h3 id="强化学习的主要元素"><a href="#强化学习的主要元素" class="headerlink" title="强化学习的主要元素"></a>强化学习的主要元素</h3><p>历史（History）：一连串的observation、action和reward</p><p>状态（state）：是历史（History）的函数，用来决定即将发生的情况</p><p>策略（Policy）：环境感知到动作的映射action = f ( state ) </p><p>受益（Reward）：定义强化学习中智能个体的目标</p><p>状态估值（State Value）：一个状态的估值就是从这个状态开始，按照某一策略，智能个体期望在未来获得的奖赏</p><p>环境模型（Model of Environment）：刻画环境的演变</p><h3 id="强化学习应用"><a href="#强化学习应用" class="headerlink" title="强化学习应用"></a>强化学习应用</h3><ol><li><p>各类游戏：Alpha Go、OpenAI Five</p></li><li><p>资源调度：带宽资源、功率资源</p></li><li><p>自动控制：交通信号灯、无人驾驶</p></li><li><p>推荐排序：个性化、网页排序</p></li></ol><h3 id="Discount"><a href="#Discount" class="headerlink" title="Discount"></a>Discount</h3><p>折扣因子关注智能体在过去，现在和未来获得的rewards，也就是说它将奖励和时域联系起来。简单来说，就是对不同时期的reward加权</p><p>discount的值在[0, 1],若discount=0，那么智能体仅关注过去获得的第一个reward，若等于1，则关注未来获得所有的奖励，0，1之间的就介于值之间，自己理解</p><p>使用衰减因子的最终回报函数<br><img src="https://img-blog.csdnimg.cn/20210628150937843.png" alt="1.png"></p><p>通俗解释：不同时期的reward重要程度不一样，discount小于1时，越后期的reward加权值越小，重要程度越小</p><p>在大多数马尔可夫奖励和决策中都是使用了discount，原因是什么呢？</p><ul><li>数学上方便对奖励discount</li><li>避免循环马尔可夫过程中的无限汇报</li><li>未来的不确定性可能无法完全体现</li><li>如果奖励是财务奖励，即时奖励可能比延迟奖励赚取更多的利息</li><li>动物/人类行为表现出对即时奖励的偏好</li><li>有时可以使用未贴现的马尔可夫奖励过程（即discount=1），例如：如果所有序列都终止</li></ul><h3 id="Reward-VS-Value"><a href="#Reward-VS-Value" class="headerlink" title="Reward VS Value"></a>Reward VS Value</h3><p>简单的来说，reward是当前收益（即时利益），value是长远收益</p><blockquote><p>• Whlie the reward signWal indicates what is good in an immediate sense, a value function     specifiWes what is good in the long run .<br>• Whlie rewards determine the immediate, intrinsic desirability of  environmental states,     values indicate the long-term desirability of states after taking into account the states that    are likely to follow and the rewards available in those states .<br>• Rewards are in a sense primary, whereas values, as predictions of rewards, are   secondary ..<br>• We seek actions that bring about states of highest value, not highest reward, because   these actions obtain the greatest amount of reward for us over the  long run.<br>• Rewards are basically given directly by the environment, but values must be estimated   and re-estimated from the sequences of observations an agent makes over its entire   lifetime<br>• A state might always yield a low immediate reward but still have a high value because it is   regularly followed by other states that yield high rewards. Or the reverse could be true<br>• It is much harder to determine values than it is to determine rewards </p></blockquote><ul><li>虽然reward signal 表明什么是<strong>即时</strong>意义的好，但value function指定了从<strong>长远</strong>来看什么是好的</li><li>虽然reward决定了环境状态的直接，内在可取性，但在考虑了可能遵循的这些状态和这些状态中可用奖励后，values表明了状态的长期可取性</li><li>从某种意义上说，reward是主要的，而作为对reward的预测，value是次要的</li><li>我们寻求带来<strong>最高value状态而非最高reward</strong>的行动，因为从长远来看，这些行动会为我们带来最大的reward</li><li>一个状态可能总是产生<strong>较低的即时奖励，但仍然具有很高的价值</strong>，因为它经常被其他产生高奖励的状态跟随，反之亦然。</li><li>确定value比确定reward要困难得多</li></ul><h3 id="Exploit-VS-Explore"><a href="#Exploit-VS-Explore" class="headerlink" title="Exploit VS Explore"></a>Exploit VS Explore</h3><p>探索常用即贪婪搜索，即完全随机选择动作，以寻找到更多可能的情况<br><img src="https://img-blog.csdnimg.cn/20210628144759700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p><p><img src="https://img-blog.csdnimg.cn/20210628144947936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt="1.png"></p><h3 id="马尔科夫过程MP"><a href="#马尔科夫过程MP" class="headerlink" title="马尔科夫过程MP"></a>马尔科夫过程MP</h3><p><strong>定义：</strong><br>马尔可夫过程是一个二元组（S，P），且满足：S是有限状态集合，P是状态转移概率：<br><img src="https://img-blog.csdnimg.cn/20200303103916957.png" alt="1.png"><br>马尔科夫过程也称为马尔科夫链：由一些具有马尔科夫性的量随机组成的记忆链，这些量之间有转移概率，如具有马尔科夫性质的stat可以组成马尔科夫链<br><strong>状态转移矩阵：</strong><br>描述当前状态转移到可达的多个状态的概率值（一行），行和都为1<br><img src="https://img-blog.csdnimg.cn/20200303104120445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvaG5KaW0w,size_16,color_FFFFFF,t_70" alt="1.png"><br>实例：<br>在马尔科夫链中，假如学生在上class 1，那么结束class 1后有0.5的概率继续上class 2，也有0.5的概率会去刷facebook，那么class1对应行的值为【0，0.5， 0， 0， 0， 0.5， 0】<br><img src="https://img-blog.csdnimg.cn/20200303104447841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvaG5KaW0w,size_16,color_FFFFFF,t_70" alt="1.png"></p><p><img src="https://img-blog.csdnimg.cn/20200303105149956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvaG5KaW0w,size_16,color_FFFFFF,t_70" alt="1.png"></p><p>求得完整的马尔可夫状态转移矩阵</p><h3 id="马尔科夫奖励过程MRP"><a href="#马尔科夫奖励过程MRP" class="headerlink" title="马尔科夫奖励过程MRP"></a>马尔科夫奖励过程MRP</h3><p>仅仅有上面的MP还不足以做出决策，RL本质上是一个基于reward的过程，我们需要引入reward，在马尔可夫链中可以表示为下图所示效果，比如进入Facebook状态时reward=-1</p><p><img src="https://img-blog.csdnimg.cn/20210628151509755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt=""></p><p><strong>MRP值函数：</strong><br>在一个episode中，我们每完成一个状态就给一个奖励，回合结束时将奖励累积起来就是最终的回报(return)，在这也就是MRP值函数，定义如下，其中r是衰减discount，不明白的可以看上面介绍Discount部分。<br><img src="https://img-blog.csdnimg.cn/20200303105727741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvaG5KaW0w,size_16,color_FFFFFF,t_70" alt=""></p><p><strong>计算MRP值函数（设衰减r=0.5）：</strong><br>C1 C2 C3 Pass Sleep：  $v = -2 - 2 <em> 0.5 - 2 </em> 0.5 ^2 +10 <em> 0.5^3 + 0 </em> 0.5^4 = -2.25$</p><p>C1 FB FB C1 C2 Sleep:   $v = -2 - 1 <em> 0.5 - 1 </em> 0.5 ^2 - 2 <em> 0.5^3 - 2</em>0.5^4 + 0 * 0.5^4 = -3.125$</p><blockquote><p>就是将该路径上的权值采用上图的方法来进行处理</p></blockquote><h3 id="贝尔曼方程Bellman-Equation"><a href="#贝尔曼方程Bellman-Equation" class="headerlink" title="贝尔曼方程Bellman Equation"></a>贝尔曼方程Bellman Equation</h3><p>从上面的计算可以看出不同情况下，每个状态的v值时不同的，而我们value function计算的是期望值，此时就需要贝尔曼方程来计算每个状态的value期望值，</p><p>即当前状态的value值 = 当前状态的奖励R + 衰减 <em> 下一步各状态的v值 </em> 转移概率</p><p><img src="https://img-blog.csdnimg.cn/20210628153124305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt=""></p><p>举个例子：</p><p>下图中C3下一步可选状态有两个，其v值分别为10和0.8，设衰减为1</p><p>$4.3 = - 2 + 1 <em>（ 0.6 </em>10 +0.4 *0.8） $</p><p><img src="https://img-blog.csdnimg.cn/20200303112603372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvaG5KaW0w,size_16,color_FFFFFF,t_70" alt=""></p><p>如果把r设为0.9：</p><p>$4.1 = - 2 + 0. 9 <em>（ 0.6 </em> 10 +0.4 *1.9 ）$</p><p><img src="https://img-blog.csdnimg.cn/20210628153928184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt=""></p><p>此时会产生一个问题，这里的10 和 1.9是哪来的呢?我们需要从终止状态Sleep算起，终止状态Sleep的V值就等于他的R值，一步步反向推到，或者是建方程组求解所有的V值，具体计算过程这里不讨论（主要是考试不考），上面的计算其实就只是验证了一下计算的正确性。</p><h3 id="马尔科夫决策过程MDP"><a href="#马尔科夫决策过程MDP" class="headerlink" title="马尔科夫决策过程MDP"></a>马尔科夫决策过程MDP</h3><p>有了MP和MRP，要完成RL的决策目标就需要最后加入一个action形成一个完整的决策过程<br><strong>MDP值函数：</strong><br>主要分为状态-值函数（v值）和动作-值函数（q值），一个基于状态，一个基于动作和状态，如下：<br><img src="https://img-blog.csdnimg.cn/20200303130209971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvaG5KaW0w,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20200303130209971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvaG5KaW0w,size_16,color_FFFFFF,t_70" alt=""><br>q值与v值的关系如下：<br><img src="https://img-blog.csdnimg.cn/20200303131350591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvaG5KaW0w,size_16,color_FFFFFF,t_70" alt=""><br><strong>也就是说，v值是采取不同动作产生q值概率加权而来的</strong><br><strong>q值公式：</strong><br><img src="https://img-blog.csdnimg.cn/20210628171858154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt=""><br>如果采取某一动作后只进入一个状态，那q值其实就等于采取动作的R值+下一状态v值*衰减即：</p><p> q = R +  rV，若r=1，那么q = R + v</p><p>简单来说就是q等于R加上下一状态的V值，如果采取动作可能进入多个状态，那就状态加个权</p><p>计算示例：</p><p>注意此图中的R值是采取动作的R值，不同于上面的进入某状态的R值，注意观察R的位置</p><p>在下图中，圆圈里的值代表每一个状态的V值，对于7.4的状态，下一步有两个动作选择，所以我们先来计算两个动作的q值，都记r=1</p><p>第一个动作选择Study进入终止状态，R=10，但是终止状态后没有后续选择，于是公式后半部分为0，此时q值就为R=10；</p><p>第二个动作选择Pub，R=-2，但执行次动作进入的状态不确定，可能还会进入三种状态，此时累加衰减<em>概率</em>下一步V值，最后加上R即为当前动作的q值</p><p>最后用两个q值乘上对于概率就求导了当前状态的v值7.4<br><img src="https://img-blog.csdnimg.cn/20210628172447366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt=""></p><p><strong>寻找最优策略</strong><br>一个简单的最优策略可以通过找到每步最大的q值得出，如下图</p><p>从左上开始，每步选择q值最大的动作，最终红线就是最优化策略</p><p><img src="https://img-blog.csdnimg.cn/20200303143859306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0pvaG5KaW0w,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="贝尔曼最优等式"><a href="#贝尔曼最优等式" class="headerlink" title="贝尔曼最优等式"></a>贝尔曼最优等式</h3><p><img src="https://img-blog.csdnimg.cn/20210628184445289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt=""><br>需要注意的是贝尔曼最优等式是非线性的，因此没有一个通解，常用的解决方法如下：<br><img src="https://img-blog.csdnimg.cn/20210628184523792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTk4MTIyNA==,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="互联网情景下的智能交互"><a href="#互联网情景下的智能交互" class="headerlink" title="互联网情景下的智能交互"></a>互联网情景下的智能交互</h2><h3 id="公开竞价拍卖"><a href="#公开竞价拍卖" class="headerlink" title="公开竞价拍卖"></a>公开竞价拍卖</h3><p><strong>升价拍卖</strong><br>英式拍卖，加价获胜者支付自己的最终出价<br><strong>降价拍卖</strong><br>荷兰式拍卖，价格一直降低，直到有人接受</p><h3 id="密封出价拍卖"><a href="#密封出价拍卖" class="headerlink" title="密封出价拍卖"></a>密封出价拍卖</h3><p><strong>一价拍卖</strong><br>出价最高者得，支付最高价格<br><strong>二价拍卖</strong><br>出价最高者得，支付第二高得价格</p><h3 id="HA匹配问题"><a href="#HA匹配问题" class="headerlink" title="HA匹配问题"></a>HA匹配问题</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>这是一个具有<strong>单边偏好</strong>的<strong>多一、二部</strong>匹配问题，存在单边偏好（或者我们主要关心一方的偏好）</p><ul><li>学生在校园里挑选住房</li><li>学生选择新生研讨会</li></ul><p>HA的一个实例包括</p><ul><li>一个申请人的集合$A={a<em>1, a_2,…,a</em>{n1}}$</li><li>一个房子集合 $H={h<em>1,h_2,…  ,h</em>{n2}}$</li></ul><p>每个申请人对一套房子都有一定的偏好。</p><h4 id="最优匹配"><a href="#最优匹配" class="headerlink" title="最优匹配"></a>最优匹配</h4><p>什么是“好”结果？</p><ul><li>帕累托最优匹配<blockquote><p>直观地说，如果没有申请人能在不要求另一个申请人使自己过得更差，那么匹配是帕累托最优的</p></blockquote></li><li>流行匹配</li><li>基于配置文件的最优匹配</li></ul><h4 id="帕累托最优匹配"><a href="#帕累托最优匹配" class="headerlink" title="帕累托最优匹配"></a>帕累托最优匹配</h4><p>求帕累托最优匹配的算法</p><ul><li>（随机）系列独裁机制(SDM)<ul><li>每个学生都有一个优先权（可能是在住房抽签中随机分配的）</li><li>学生们按他们的优先级的顺序选择房子</li></ul></li><li>处理申请人的顺序将会影响申请结果</li><li>所得到的帕累托最优匹配是不同的大小的</li><li>定理:连续独裁是有效的（即之后没有相互同意的交易）和战略证明的。</li></ul><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>策略证明</p><ul><li>有第一选择的人会得到她最喜欢的房子，所以显然没有撒谎的动机</li><li>有第二选择的人在剩下的房子中得到她喜欢的房子，所以同样没有理由撒谎。</li><li>等等<br>效率</li><li>有优先权的个人并不想进行交易。</li><li>考虑到她出局了，有第二优先级的人不想交易</li><li>等等..。<br><img src="https://cdn.acwing.com/media/article/image/2022/05/27/99310_5b1a0368dd-1.png" alt="1.png"> </li></ul><h4 id="变体"><a href="#变体" class="headerlink" title="变体"></a>变体</h4><p>初始捐赠</p><ul><li>在每个申请人最初拥有一件商品的情况下，这被称为房屋市场(HM)问题</li><li>亚伯拉罕给出了一个个体理性的算法，它确保每个最初拥有一个房子的申请人最终都拥有相同或更好的房子。</li><li>缩短申请人的优先名单，取消所有比最初捐赠更好的房屋。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 计算智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计量经济学复习</title>
      <link href="/2022/05/20/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/05/20/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-回归分析概述"><a href="#第一章-回归分析概述" class="headerlink" title="第一章 回归分析概述"></a>第一章 回归分析概述</h2><p><strong>计量经济学研究路线</strong></p><ul><li><strong>建立</strong>理论模型</li><li><strong>确立</strong>计量经济学模型</li><li><strong>搜集</strong>检查并整理<code>数据</code></li><li><strong>估计</strong>计量经济学模型</li><li><strong>评价</strong>计量经济学模型</li><li><strong>应用</strong>计量经济学模型</li></ul><p><strong>回归分析的现代含义</strong> </p><blockquote><p>回归分析是关于研究一个叫做因变量的变量（Y）对另一个或多个叫做自变量的变量（X）的依赖关系</p><p>其用意在于通过自变量在重复抽样中的已知或设定值，去估计或预测因变量的总体均值</p></blockquote><p>确定关系：确定变量之间的函数关系</p><p>统计关系：随机变量之间的依赖关系</p><p><code>计量经济学关注的是统计关系</code></p><p><strong>线性的含义</strong><br>有两种线性，变量线性和参数线性</p><p>线性回归是指对估计参数为线性的一种回归（即估计参数只以一次方出现），对自变量X则可以是或不是线性的</p><p>判断下列方程是不是线性回归？</p><p>$E(Y|X_i)=\beta_0+\beta_1^2 X_i$ 不是线性回归<br>$E(Y|X_i)=\beta_0+\beta_1 X_1 X_2$ 是线性回归</p><p>随机干扰项 $\varepsilon_i=Y_i-E(Y_i|X_i)$</p><p>残差 $\hat{\varepsilon_i}=e_i=Y_i-\hat{Y_i}$</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>计量经济学，从字面意思来上讲，叫”经济度量”，属于经济学的一个分支学科，主要致力于量化理论关系。回归分析虽然仅仅是计量经济学分析方法的一种，确实目前最常用的一种方法。</li><li>计量经济学最主要的用途为：描述经济关系、假设检验和预测。根据研究的需要，特定的计量经济学方法会有所不同。</li><li>尽管回归分析设定被解释变量是一个或者多个解释变量的函数，但回归分析本身并不能证明或隐含因果关系。</li><li>回归方程中必须加入随机误差项，用于度量被解释变量没有完全被解释变量解释而形成的误差。随机误差项的组成部分有：①遗漏或者省略变量；② 数据的测量误差；③隐含理论的函数形式与回归方程不同； ④纯随机误差或不可预知的事件。</li><li>估计出的回归方程式真实回归方程的近似代替，是从包含X和Y的样本数据中计算出来的。由于真实回归方程不可知，所以，计量经济分析注重的是估计出的回归方程和回归参数的参数估计值。被解释的变量的特定观测值与其估计值之差成为残差。</li></ol><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="https://cdn.acwing.com/media/article/image/2022/05/22/99310_d2511414d9-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/22/99310_d4572aacd9-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/22/99310_d6c6d98ed9-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/22/99310_d81d9d6ed9-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/22/99310_db0f4b34d9-5.png" alt="5.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/22/99310_dcccbbc2d9-6.png" alt="6.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/22/99310_0d33f34ed9-7.png" alt="7.png"> </p><h2 id="第二章-最小二乘法"><a href="#第二章-最小二乘法" class="headerlink" title="第二章 最小二乘法"></a>第二章 最小二乘法</h2><p><strong>偏回归系数</strong>：当其他变量相同（保持其他变量不变）时，特定变量对被解释变量的边际影响（贡献）</p><p>n为样本量，k为待估计参数数量，通常情况下$n \geq 5*k$</p><p>最小二乘法估计量$ \hat{\beta} $是确定性变量还是随机变量？为什么？</p><p>$\hat{\beta}$是由Y计算来的，Y是一个随机变量，随机性来自随机干扰项 $\varepsilon$,$\varepsilon$影响Y，Y影响$\hat{\beta}$，所以$\hat{\beta}$是一个随机变量，同时如果Y服从<strong>正态分布</strong>，那么$ \hat{\beta} $也服从<strong>正态分布</strong></p><p>判断估计量优劣的标准是什么？</p><ul><li>估计值的均值是否等于真实值：无偏性</li><li>估计量的方差是否足够小：有效性</li><li>估计量的极限是否趋于真实值：一致性</li></ul><p><strong>控制变量的选择</strong><br>去什么，加什么，因为我们的被解释变量受到多个因素的影响，仅仅用一元线性回归是不够的，以餐厅收入案例为例，虽然我们关心的是居民收入对于餐厅收入的影响，但我们考虑到竞争对手的数量还有人口密度等等会影响餐厅收入，如果不把这两个影响因素去掉，可能得不到真实的回归结果，为了去除这两个因素的影响，我们要把这两个变量加入道方程中去。</p><p><strong>古典假设</strong>：</p><ol><li>回归模型是线性的，模型设定无误且含有误差项。</li><li>误差项的总体均值为0。</li><li>所有解释变量与误差项都不相关</li><li>误差项观测值互不相关（不存在序列相关性）</li><li>误差项具有同方差（不存在异方差性）</li><li>任何一个解释变量都不是其他解释变量的完全线性函数（不存在多重共线性）</li><li>误差项服从正态分布（该假设是选择性的，但通常被采用）</li></ol><p><strong>古典假设小结</strong></p><ol><li>7个古典假设表述为：回归模型是线性的且含有一个均值为0且与解释变量不相关的误差项；各误差项观测值之间不想管；误差项观测值之间互补相关；误差项的方差相同，服从正态分布（不要求）；另外，解释变量之间一定不能相互存在完全的线性函数关系。</li><li>估计量的两个最重要的性质是无偏性和最小方差性。无偏估计量是指被估计参数的期望与真实值相等的估计量。在给定的一类估计量中（例如无偏估计量），茹估计值分布的方差在所有估计量中最小时，则满足最小方差性。</li><li>在古典假设下，普通最小二乘估计量被证明具有最小方差性，线性，无偏性（或称BLUE，即最优线性无偏估计量），即高斯——马尔科夫定理。当一个或多个古典假设不成立时（正态分布假设除外），在某些时候，尽管普通最小二乘法仍然能够提供比随后章节中所讨论的其他可供选择估计的方法得到的更好的估计量，但普通最小二乘估计量不再是BLUE的。</li><li>因为$\hat{\beta_k}$的普通最小二乘估计量的抽样分布是BLUE的，所以$\hat{\beta_k}$具有令人满意的性质。另外，随着被观测样本数量的增加，$\hat{\beta_k}$的抽样分布中的方差（或离散程度）减小。</li><li>计量经济学中有一套标准的记述符号，如下表所示</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">总体参数</th><th style="text-align:center">（真实值，但不能观测）</th></tr></thead><tbody><tr><td style="text-align:center">回归参数</td><td style="text-align:center">$\beta_k$</td></tr><tr><td style="text-align:center">参数估计量的期望</td><td style="text-align:center">$E(\hat{\beta_k})$</td></tr><tr><td style="text-align:center">误差项的方差</td><td style="text-align:center">$\sigma^2 或 VAR(\varepsilon_i)$</td></tr><tr><td style="text-align:center">误差项标准差</td><td style="text-align:center">$\sigma$</td></tr><tr><td style="text-align:center">参数估计量的方差</td><td style="text-align:center">$\sigma^2(\hat{\beta_k})$ 或 $VAR(\hat{\beta_k})$</td></tr><tr><td style="text-align:center">参数估计量的标准差</td><td style="text-align:center">$\sigma_{\hat{\beta_k}}$ 或 $\sigma(\hat{\beta_k})$</td></tr><tr><td style="text-align:center">误差项或随机干扰项</td><td style="text-align:center">$\varepsilon_i$</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">估计值</th><th style="text-align:center">（由样本观测得到）</th></tr></thead><tbody><tr><td style="text-align:center">回归参数估计值</td><td style="text-align:center">$\hat{\beta_k}$</td></tr><tr><td style="text-align:center">误差项的方差的估计值</td><td style="text-align:center">$s^2 或 VAR(\sigma^2)$</td></tr><tr><td style="text-align:center">误差项标准差的估计值</td><td style="text-align:center">$s$ 或 $SE$</td></tr><tr><td style="text-align:center">参数估计量的方差估计值</td><td style="text-align:center">$s^2(\hat{\beta_k})$ 或 $\widehat{VAR}(\hat{\beta_k})$</td></tr><tr><td style="text-align:center">参数估计量的标准差估计值</td><td style="text-align:center">$\hat{\sigma_{\hat{\beta_k}}}$ 或 $SE(\hat{\beta_k})$</td></tr><tr><td style="text-align:center">残差项</td><td style="text-align:center">$e_i$</td></tr></tbody></table></div><p><strong>拟合优度</strong><br>OLS估计量是BLUE（最小方差性[有效性]，线性，无偏性），但采用OLS不一定能够得到满意的结果</p><p>从几何意义上说，拟合优度是指样本回归线对样本数据拟合得多好</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_31504084da-9.png" alt="9.png"> </p><p><strong>判定系数$(R^2)$</strong></p><script type="math/tex; mode=display">R^2=\frac{回归平方和}{总平方和}=\frac{ESS}{TSS}=1-\frac{RSS}{TSS} < 1</script><p>一般来说，$(R^2)$的值越接近1，表明拟合优度越好；相反，越接近0，意味着回归估计方程不能比样本均值$\bar{Y}$更好的解释$Y_i$的值</p><p>判定系数$(R^2)$是解释变量个数的非减函数，即增加解释变量，$(R^2)$会增加或不变</p><p>$(R^2)$不是越大模型越好</p><ul><li>增加无关的解释变量，使模型失去经济含义</li><li>降低<code>自由度</code>，降低参数估计量的可靠性</li></ul><blockquote><p>自由度：观测样本数    减去待估参数的个数</p></blockquote><p><strong>调整的判定系数</strong></p><blockquote><p>对参数（包括截距项）的个数k进行惩罚，在模型拟合优度（好）与其复杂性（不好）之间进行权衡</p></blockquote><script type="math/tex; mode=display">\bar{R^2}=1-\frac{\sum e_i^2/(n-k)}{\sum y_i^2/(n-1)}=1-(1-R^2)\frac{n-1}{n-k}</script><blockquote><p>当模型中新增解释变量时，$\bar{R^2}$变化的方向（上升、下降或者不变）依赖于新变量对回归拟合的贡献是否超过对损失一个额外自由度所作修正的补偿</p></blockquote><ul><li>拟合优度仅是衡量回归总体质量的指标之一</li><li>参数估计值符合经济理论的程度、研究者对参数预期比拟合优度更加重要</li></ul><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol><li>普通最小二乘法是利用一组数据求的回归参数估计值的最常用的方法。普通最小二乘法使得一个特定样本的残差平方和（$\sum e_   i^2$）最小。</li><li>调整的判定系数$\bar{R^2}$是经过自由度调整后的判定系数，他衡量了Y与他的均值被特定回归方程解释的比例。方程中新增加一个变量时，只有拟合有毒提高的程度超过了自由度下降的损失，调整的判定系数$\bar{R^2}$才会更大，所以，多数研究者在评价回归方程的拟合优度时，都自然地使用调整地判定系数$\bar{R^2}$</li><li>切记，估计方程地拟合有毒只是一个衡量回归整体质量地指标之一。许多其他的标准，包括参数估计值与经济理论地一致性，以及与预期（研究者在搜集数据前做出地预期）的一致性，都比调整的判定系数$\bar{R^2}$更重要。<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_bce57b9cda-11.png" alt="11.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_c0eb49a7da-12.png" alt="12.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_c375484ada-13.png" alt="13.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_c5b58d86da-14.png" alt="14.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_003ac9f1da-18.png" alt="18.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_c8449c40da-15.png" alt="15.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_ca7936cbda-16.png" alt="16.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_ce0d5917da-17.png" alt="17.png"> </li></ol><h2 id="第三章-假设检验"><a href="#第三章-假设检验" class="headerlink" title="第三章 假设检验"></a>第三章 假设检验</h2><h3 id="假设检验的基本原理"><a href="#假设检验的基本原理" class="headerlink" title="假设检验的基本原理"></a>假设检验的基本原理</h3><p>我们用样本的信息来检验总体的信息</p><p><strong>假设检验</strong>：先对总体的特征作出某种假设，然后通过<strong>抽样研究的统计推理</strong>，对此假设应该拒绝还是被接受做出推断</p><p>基本思想：<strong>小概率原理、反证法</strong></p><p>原假设（$H_0$） 备择假设($H_A$)</p><p>因为拒绝假设比较简单，我们只需要举出一个反例，而接受一个假设相对比较困难，因为我们可能需要穷举所有的情况</p><p>因此我们就可以根据研究者预期来设计假设，我们将希望出现的结果作为备择假设，将不希望出现的结果作为原假设</p><p>如果回归分析希望出现一个正的参数$\beta$,原假设和备择假设应该为：</p><script type="math/tex; mode=display">H_0:\beta \leq 0; H_A: \beta > 0</script><blockquote><p>单侧检验：具有明显的预期</p></blockquote><p>如果回归分析希望参数$\beta$不为零，原假设和备择假设应该设为：</p><script type="math/tex; mode=display">H_0: \beta = 0; H_A: \beta \ne 0</script><blockquote><p>双侧检验： 预期不确定</p></blockquote><p>假设检验是要确定一个标准（判定准则），以便决定<strong>拒绝</strong>或<strong>不拒绝</strong>某个原假设$H_0$</p><p>当拒绝原假设时，通常表述为<strong>统计上显著</strong>;反之，<strong>统计上不显著</strong></p><p><strong>两类错误</strong><br>| | $H_0$为真 | $H_0$不为真 |<br>|:—-: | :—-: | :—-: |<br>| 拒绝$H_0$ | 第一类错误（弃真）| 正确 |<br>| 不拒绝$H_0$ | 正确 | 第二类错误（纳伪）|</p><p>犯第一类错误的概率：$P(H_A|H_0)=\alpha$ </p><p>犯第二类错误的概率：$P(H_0|H_A)=\beta$ </p><blockquote><p>$\alpha$ 越大 $\beta$越小,我们主要关注第一类错误出现的概率$\alpha$</p></blockquote><p><strong>假设检验的判定准则</strong></p><ul><li>判定准则是比较样本统计量与预先设定的临界值之间的大小</li><li>参数估计值范围分为两个区域：<strong>拒绝域</strong>和“<strong>接受域</strong>”<h3 id="假设检验的方法"><a href="#假设检验的方法" class="headerlink" title="假设检验的方法"></a>假设检验的方法</h3><strong>置信区间法</strong><br>根据参数估计量的分布，在给定的<strong>置信水平</strong>（如95%）下，构造一个随机<strong>置信区间</strong>；若该随机区间覆盖原假设值，则不拒绝原假设，否则拒绝原假设<br><strong>置信区间的构造</strong><br>首先设定<strong>显著性水平</strong>（第一类错误的概率）$\alpha$,然后确定一个正数 $\delta$,使得随机区间$(\hat{\beta}- \delta, \hat{\beta}+ \delta)$包括参数真实值$\beta$的概率为$1-\alpha$(置信水平)<script type="math/tex; mode=display">P(\hat{\beta}- \delta \leq \beta \leq \hat{\beta}+ \delta)=1-\alpha</script></li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_969ce206da-20.png" alt="20.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_b46c86c6da-21.png" alt="21.png"></p><p><strong>显著性假设法</strong><br>显著性检验法直接比较参数估计值和原假设之间的差异大小。若”差异”  较大，则拒绝原假设；反之，不拒绝原假设</p><p><strong>怎样判断差异的大小</strong><br>判断$\hat{\beta}-\beta_0$是否显著异于0的关键在于构造一个函数f($\hat{\beta}-\beta_0$)(称为统计量),该统计量具有确定的分布规律；比较该统计量的值与分布临界值来判断差异是否显著 </p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_1bd35f12da-22.png" alt="22.png"> </p><p>如果得到的P值小于我们要求的显著性水平（5%）的话，我们就拒绝原假设，反之，不拒绝。</p><h3 id="t检验"><a href="#t检验" class="headerlink" title="t检验"></a>t检验</h3><p>检验单个变量对被解释变量是否由解释力</p><script type="math/tex; mode=display">t=\frac{\hat{\beta}-\beta_0}{se(\hat{\beta})}</script><p><strong>单侧T检验的判定方法</strong></p><ul><li>根据<strong>t值</strong>判断，如果$|t_k|&gt;t_c$,<strong>并且</strong>$\beta_k$的符号与$H_A$隐含的符号相同（符合预期），则拒绝$H_0$</li><li>根据<strong>P值</strong>判断：如果P值小于研究所要求的显著性水平，且$\beta_k$的符号与$H_A$隐含的符号相同（符合预期），则拒绝$H_0$    </li></ul><blockquote><p>计量经济学分析中，大多数情况采用单侧检验</p><p>采用双侧检验的情况：估计值得符号没有明确得预期或者是否显著性于某个特定的值</p></blockquote><p><strong>永远牢记：不要把t检验得出的统计显著性等同于理论的有效性</strong></p><p>在回归分析中，t检验不能检验相应变量的相对“重要性”，检验数字特征要用到统计检验，后面会提到<br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_e82d7ec7da-23.png" alt="23.png"> </p><p><strong>t检验的陷阱</strong>：随着样本容量的增大，t值会越来越大的原因在于：标准误会随着样本数量增加而减小，标准误越小t统计量就会越大</p><p>对于一个超大规模的样本而言，t检验没有任何意义，因为你几乎可以拒绝任何原假设</p><p>综上所述，<strong>t检验的局限性</strong></p><ul><li>t检验不能检验理论有效性</li><li>t检验不能检验“重要性”</li><li>t检验不是针对总体的检验</li></ul><h3 id="F检验"><a href="#F检验" class="headerlink" title="F检验"></a>F检验</h3><script type="math/tex; mode=display">F=\frac{(RSS_R-RSS_{UR})/J}{RSS_{UR}/(n-k)}</script><p>其中J为约束条件个数，K为估计的参数个数（包括$\beta_0$）</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_3cc9369fda-24.png" alt="24.png"></p><p>对多个假设的联合检验<strong>或</strong>对线性约束的假设检验不能用t检验，只能用<strong>F检验</strong></p><p><strong>一种检验思路</strong></p><ul><li>将线性约束（原假设）代入线性回归方程，可得<strong>约束最小二乘估计量</strong></li><li>约束最小二乘的拟合将劣于无约束最小二乘的拟合，即<strong>约束导致拟合的损失</strong></li><li>约束最小二乘的RSS将大于无约束最小二乘的RSS，可据此构建统计量</li></ul><p><strong>检验回归模型的总体显著性</strong><br>RSS为残差平方和<br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_b0de6097da-25.png" alt="25.png"> </p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_e20bbb72da-26.png" alt="26.png"><br><strong>检验某个偏回归系数等于某个特定值</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_5819e71dda-1.png" alt="1.png"> </p><p><strong>检验规模报酬不变</strong></p><p><strong>邹检验</strong><br>结构变化：时间序列回归中，模型的参数在整个样本期间内可能发生变化</p><ul><li>邹检验的假定：两个子时期回归的误差项是独立且具有同方差的正态分布变量</li><li>邹检验只告诉我们不同时期的回归方程是否有差别，并没有告诉我们差别来自截距，斜率还是二者兼有</li><li>邹检验假定我们知道结构转折点</li></ul><h3 id="正态性检验"><a href="#正态性检验" class="headerlink" title="正态性检验"></a>正态性检验</h3><p>采用JB检验（雅克-贝拉检验）</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ol><li>通常，确定被解释变量后，应用回归分析采用六个步骤：<br> a. 查阅文献，建立理论模型<br> b. 确定模型：选择解释变量及函数形式<br> c. 对参数的符号做出假设<br> d. 搜集、检查和整理数据<br> e. 估计和评价方程<br> f. 报告结果</li><li>虚拟变量只能取值0或1，这取决与是否满足某些特定状态条件。虚拟变量的例子就是当为女性时X等于1，为男性时X等于0</li></ol><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_66fb7a8fda-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_5ddb70aeda-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_6980e992da-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_6a8abdefda-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_6cefa212da-5.png" alt="5.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_6ffd8581da-6.png" alt="6.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_7286f40eda-7.png" alt="7.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_754d6c6eda-8.png" alt="8.png"> </p><h2 id="第四章-模型设定"><a href="#第四章-模型设定" class="headerlink" title="第四章 模型设定"></a>第四章 模型设定</h2><p><strong>正确的方程</strong></p><ul><li>正确的解释变量</li><li>正确的函数形式</li><li>正确的随机误差项</li></ul><p><strong>如何正确的选择解释变量</strong></p><ul><li>最重要的选择依据：（经济理论判断）</li><li>若理论上不明确，则可采用统计方法来判断<ul><li>遗漏变量</li><li>不相干变量</li></ul></li></ul><p><strong>遗漏变量的后果</strong></p><blockquote><p>设定偏误：参数估计量<strong>有偏</strong>且非一致，方差变小</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_05ed6799da-9.png" alt="9.png"> </p><p><strong>加入不相干变量的后果</strong></p><blockquote><p>参数估计量<strong>无偏</strong>但非有效（方差变大），t检验失效</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_7c5108f8da-10.png" alt="10.png"> </p><p><strong>模型选择准则</strong></p><ul><li>判定系数<script type="math/tex; mode=display">R^2=1-\frac{RSS}{TSS}</script><script type="math/tex; mode=display">\bar{R^2}=1-\frac{\sum e_i^2/(n-k)}{\sum y_i^2/(n-1)}=1-(1-R^2)\frac{n-1}{n-k}</script></li><li>赤池信息准则（AIC）和施瓦茨信息准则（SC）<br>  $AIC=\frac{2k}{n}+ln{\frac{RSS}{n}}$ 如果你加入一个新的解释变量那么AIC会增大 $\frac{2}{n}$<br>  $SC=\frac{k}{n}lnn+ln{\frac{RSS}{n}}$ 如果加入一个新的解释变量那么SC会增大 $\frac{lnn}{n}$</li></ul><blockquote><p>AIC和SC准则对增加解释变量加大了惩罚，其中SC的惩罚比AIC更严厉。相对而言，AIC和SC的值越低的模型越好。</p></blockquote><p>看下面的例子，可以发现中间的AIC和SC值是最小的，该模型也确实更好<br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_ea8040c5da-1.png" alt="1.png"> </p><p><strong>模型设定的四个重要准则</strong></p><ol><li>理论：变量在方程中的含义是不是模糊不清的，从理论上看是不是合理的？</li><li>t检验：变量的待估参数在预期假设下是否显著？<blockquote><p>不能简单地将一个t值不显著的变量从方程中排除，要结合理论与实际</p></blockquote></li><li>调整的判定系数$\bar{R^2}$或AIC和SC：在变量加入后，方程的整体拟合优度（自由度调整后）是否得到了改善</li><li>偏误：变量加入方程后，其他变量的参数值是否发生了显著性改变？</li></ol><p><strong>模型设定搜索</strong></p><ul><li>数据挖掘<ul><li>适当的数据挖掘也许有助于揭示经济学理论尚未说明的经验规律</li><li>不适当的数据挖掘，比什么都不做更坏：如果你对数据严刑拷打，它就会屈打成招</li></ul></li><li>敏感性分析：稳健性分析<ul><li>几乎所有学术论文的必备步骤和分析内容</li><li>稳健的含义：某种结果对于各种模型设定，变量定义，数据子集都是显著的（或不显著的）</li></ul></li></ul><h3 id="解释变量选择小结"><a href="#解释变量选择小结" class="headerlink" title="解释变量选择小结"></a>解释变量选择小结</h3><ol><li>由于遗漏变量在某种程度上都与已包含变量之间有相关性，因此，遗漏变量会导致方程中剩余变量的参数估计值产生偏误。</li><li>由遗漏变量所引起的偏误等于遗漏变量的参数乘以已包含变量和未包含变量的简单相关系数的函数。</li><li>方程中包含一个真正的不相关变量并不会因此偏误，但会增加已包含变量参数估计值的方差，因此会使t统计量和调整的判定系数$\bar{R^2}$都降低。</li><li>方程中包含一个变量的四个有用准则：<br> a. 理论<br> b. t检验<br> c. 调整的判定系数$\bar{R^2}$<br> d. 偏误</li><li>回归方程中包含一个变量的最重要的准则是理论，而不是统计上的显著性，否则存在产生错误或不可信结果的风险</li></ol><p><strong>错误函数形式的后果</strong></p><ul><li>影响解释变量的显著性</li><li>解释变量可能有非预期的符号</li><li>严重影响模型解释和变量预测</li></ul><p><strong>函数的选择形式</strong><br><strong>不含常数项的回归</strong></p><script type="math/tex; mode=display">Y_i=\beta_i X_i+\epsilon_i</script><p>可以证明：</p><ul><li>残差均值不一定为0</li><li>拟合优度的判定系数可能出现负值</li></ul><blockquote><p>除非有非常强的先验预期，否则还是采取含有常数项的模型为好；<strong>即使先验预期为无常数项模型，仍可使用含常数项的模型，再检验其常数项在统计上等于0即可</strong></p></blockquote><p><strong>可线性化</strong>的非线性函数形式</p><ul><li>指数函数</li><li>对数函数</li><li>反函数形式</li><li>多项式形式</li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_c05791f3da-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_c206fb53da-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_fc20ea32da-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_fecb0efeda-5.png" alt="5.png"> </p><p><strong>如何选择函数形式</strong></p><ul><li>选择经济理论给出的特定函数形式</li><li>所选模型的参数应满足一定的先验预期</li><li>当多个模型能很好地拟合数据时，研究者往往选择调的判断系数较高或者AIC和SC较低的模型。<strong>然而，当被解释变量Y被替换时，这些指标不能比较</strong></li></ul><h3 id="函数形式选择小结"><a href="#函数形式选择小结" class="headerlink" title="函数形式选择小结"></a>函数形式选择小结</h3><ol><li>即使理论上常数项可以等于零，也不能剔除常数项。另外，尽管常数项的估计值在理论上是显著的，也不能对常数项进行推理</li><li>函数形式的选择必须基于潜在的经济理论，也就是说要根据理论上的曲线形状去选择相应的函数形式。除非有特别要求需要选择其他形式，模型中变量的函数形式通常都是选用变量是线性的方程。</li><li>变量是非线性的函数形式包括双对数形式，半对数形式以及多项式形式。双对数形式特别适用于弹性是固定的模型中。半对数形式能用于哪些随着解释变量的增加，解释变量对于被解释变量的影响逐渐变小的模型中。多项式形式通常用于斜率符号会随着解释变量的不断变化而改变的模型中。</li><li>斜率虚拟变量是由一般解释变量和虚拟变量的成绩构成的。其中，这个一般解释变量于被解释变量之间的斜率会因为虚拟变量的设定状态是否被满足有所不同。</li><li>使用非线性函数形式存在一系列的潜在问题。特别地，如果解释变量Y的函数形式不同，则各个模型的调整的判定系数$\bar{R^2}$不能进行比较；此外，如果选择了错误的函数形式对样本范围外进行预测，那么，预测结果的残差可能会非常大。</li></ol><h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><p><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_258f61eeda-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_1e5c6bfeda-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_20e2de13da-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/23/99310_2925f4a1da-4.png" alt="4.png"> </p><h2 id="第五章-多重共线性"><a href="#第五章-多重共线性" class="headerlink" title="第五章 多重共线性"></a>第五章 多重共线性</h2><p><strong>多重共线性定义</strong><br>回归模型中的一些或者全部解释变量之间存在一种完全或不完全的线性关系。    </p><p>完全多重共线性：<br>$\lambda_1X_1+\lambda_2X_2+…+\lambda_kX_k =0$</p><p>不完全多重共线性：<br>$\lambda_1X_1+\lambda_2X_2+…+\lambda_kX_k + v_i=0$</p><p>只要不是完全多重共线性，用OLS仍可以得到参数的估计值及其标准误，并且仍是无偏，尽管无偏，但估计量的标准误非常大，即估计的精度很小。</p><p>多重共线性可能会导致估计量的标准误偏大，同时可能导致参数的估计值的符号与预期符号不符。</p><p>若总体中各解释变量X之间<strong>没有</strong>线性关系，样本中各解释变量X之间<strong>也可能</strong>存在线性关系。</p><blockquote><p>多重共线性本质上是一种样本现象。</p></blockquote><p><strong>不完全多重共线性的特征</strong></p><ul><li>偏回归系数的t值会降低，倾向于统计上的不显著;</li><li>估计量（偏回归系数）对模型设定的变化非常敏感，估计系数可能出现<strong>非预期的符号或难以置信的数值</strong>;</li><li>虽然系数不显著，但总的拟合优度$R^2$<strong>却可能</strong>非常高</li><li>可能出现每个偏回归系数的t值都不显著，但回归方程的F值却很显著。</li></ul><p><strong>不完全多重共线性对预测的影响</strong></p><ul><li>如果回归分析的唯一目的是预测，并且如果不完全共线性的结构在样本和未来都保持一致，那么不完全多重共线性不是一个严重的问题</li><li>如果不完全共线性的结构在未来发生变化，则预测是冒险的</li></ul><p><strong>多重共线性的来源</strong></p><ul><li>经济变量之间具有共同变化的趋势<blockquote><p>如经济繁荣时期，基本经济变量都趋于增长；衰退时期又同时趋于下降</p></blockquote></li><li>模型中包含滞后变量<blockquote><p>考察当期收入和前期收入对消费的影响，两期收入间有较强的线性相关性</p></blockquote></li><li>横截面数据之间存在相关性<blockquote><p>生产函数中资本投入与劳动力投入往往出现高度相关的情况，大企业二者都大，小企业都小</p></blockquote></li></ul><p><strong>多重共线性的诊断</strong> </p><ul><li>解释变量之间的相关系数 如果有多个变量，采用偏相关系数的方法 </li><li>回归模型估计结果 $R^2$F统计量显著，但是单个变量不显著，并且有些变量参数符号不符合预期 经验做法</li><li>方差膨胀因子(VIF)</li></ul><p><strong>多重共线性的补救措施</strong></p><ul><li>剔除支配变量<blockquote><p>支配变量：与被解释变量高度相关，以致于完全掩盖了方程中其他解释变量的影响（如销售量与销售额）</p></blockquote></li><li>增加样本容量<blockquote><p>样本越大，估计越精准</p></blockquote></li><li>剔除多余变量<blockquote><p>潜在的理论假设作为剔除的主要依据</p></blockquote></li><li>变换解释变量<ul><li>一阶差分</li><li>两个变量相除</li><li>构造一个多重共线性的组合<ul><li>主成分分析法</li><li>因子分析法</li></ul></li></ul></li><li>什么都不做       </li></ul><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ol><li>完全多重共线性违背了一个解释变量不能是其他或多个解释变量的完全线性函数的古典假设。完全多重共线性会导致回归参数估计值的不确定性，并使得这些估计值具有巨大的标准差，从而使得普通最小二乘法不再适用</li><li>使用“多重共线性”一词时，通常指的是不完全多重共线性。不完全多重共线性指的是两个或多个解释变量之间存在较强的线性关系，以至于能够显著地影响方程中解释变量的参数估计。多重共线性问题既是一种样本现象，同时也是一种理论现象。不同的样本可能存在不同程度的多重共线性。</li><li>严重的多重共线性产生的主要结果是增大了回归参数估计量的方差，同时使得这些参数估计值的t统计量变小，扩大了置信区间。多重共线性不会导致参数估计值有偏，它对于回归方程的整体显著性或者任何一个不是多重共线性的解释变量的参数估计值都几乎没有多少影响。</li><li>由于在不同数据集中多重共线性的程度会有显著的不同，所以，在诊断多重共线性时需要注意的问题就是：在一个特定的样本当中，多重共线性究竟有多严重。</li><li>用来诊断严重多重共线性的两种有用的方法是：<br> a. 解释变量之间的简单相关系数是否很高？ 一般来看，相关系数的绝对值如果大于0.80，则认为很高。<br> b. 方差膨胀因子是否很高？一般来看当 $VIF(\hat{\beta_i}) &gt; 5$,则存在严重的多重共线性。<blockquote><p>如果两个答案中任意一个是“是”，则多重共线性确实存在，但是当答案同时为“否”时，也可能存在多重共线性问题。</p></blockquote></li><li>针对多重共线性有如下三种最为常用的补救措施：<br> a. 什么都不做（这样可以避免方程设定偏误）<br> b. 去除多余的变量<br> c. 增大样本容量</li><li>对于多重共线性的问题，什么都不做往往是最好的补救措施。假如多重共线性没有使t统计量减少到不显著的程度，那么就不需要对多重共线性采取任何补救措施。即使t统计量不显著，针对多重共线性所采取的补救措施也必须谨慎，因为补救所带来的估计成本，可能比从方程中消除多重共线性所获得潜在收益还要大。</li></ol><h3 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h3><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_2a52cea6db-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_2d8e6892db-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_2f98a836db-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_3243fae4db-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_3469286edb-5.png" alt="5.png"> </p><h2 id="第六章-序列相关性"><a href="#第六章-序列相关性" class="headerlink" title="第六章 序列相关性"></a>第六章 序列相关性</h2><p><strong>序列相关性的形式</strong></p><ul><li>一阶序列相关<blockquote><p>干扰项只与其滞后一期值相关 $\varepsilon<em>t=f(\varepsilon</em>{t-1})$</p></blockquote></li><li>高阶序列相关<blockquote><p>干扰项与其滞后多期值相关 $\varepsilon<em>t=f(\varepsilon</em>{t-1},\varepsilon_{t-2},…)$</p></blockquote></li></ul><p>序列相关通常假定为线性序列相关，最常见的形式为一阶序列相关</p><script type="math/tex; mode=display">\varepsilon_t=\rho\varepsilon_{t-1}+u_t</script><blockquote><p>其中，$\rho$为一阶自相关系数，且$|\rho|&lt;1$;$u_t$为白噪声序列，满足$E(u_t)=0,Var(u_t)= \sigma_u^2,Cov(u_t,u_t+s)=0,s \ne 0$</p></blockquote><p><strong>根据自相关系数$\rho$，序列相关可分类如下</strong></p><ul><li>$\rho &gt; 0 \to $ 正序列相关</li><li>$\rho &lt; 0 \to $ 负序列相关</li><li>$\rho = 0 \to $ 无序列相关</li></ul><p><strong>序列相关类型</strong></p><ul><li>非纯序列相关<ul><li>由<strong>设定偏误</strong>导致，如遗漏变量、不正确的函数形式等</li></ul></li><li>纯序列相关<ul><li>时间序列数据：对同一总体的连续的观测很可能表现出某种系统的相关性，特别是连续观测时间间隔很短，如一周，一天，甚至同一天多次观测</li></ul></li></ul><p><strong>序列相关的后果</strong><br>在纯序列相关性的情形下</p><ul><li>OLS估计量仍是<strong>无偏的</strong></li><li>OLS估计的假设检验<strong>不可靠</strong></li><li>OLS估计量<strong>不再是有效</strong>的（即最小方差估计量）</li><li>标准误的OLS估计是<strong>有偏的</strong>，且偏差通常是负的，意味着OLS通常会高估参数的t值，导致原本不显著的变量可能变得显著</li></ul><p><strong>序列相关的检验</strong><br>检验思路：<strong>检验序列相关，也就是检验随机误差项之间的相关性及“形式”</strong></p><p>因随机误差项的样本对应物是OLS的残差，因此所有的检验都基于<strong>残差</strong></p><p><strong>常用检验方法</strong></p><ul><li>图解法</li><li>杜宾——沃森（DW）检验</li><li>BG检验</li></ul><p><strong>图解法</strong><br>将残差对时间描点，以发现残差在时间上的特定关联</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_99b5c3a7db-1.png" alt="1.png"> </p><p><strong>杜宾——沃森（DW）检验</strong><br>利用方程的残差构成统计量，推断误差项是否存在一阶序列相关</p><p>基本假定</p><ul><li>回归模型包含截距项</li><li>序列相关是<strong>一阶</strong>序列相关</li><li><p>回归模型不能把<strong>滞后被解释变量</strong>作为解释变量</p></li><li><p>d检验值为0，意味着序列存在完全正相关</p></li><li>d值为2意味着不存在序列相关性</li><li>d值为4意味着序列存在完全负相关。</li><li>$0 &lt; d &lt; 2 \to 0 &lt; \rho &lt; 1$</li><li>$2 &lt; d &lt; 4 \to -1 &lt; \rho &lt; 0$</li></ul><p><strong>d统计量的检验</strong></p><ul><li>由于d统计量依赖于残差，而残差又依赖于X，故无法推导出d统计量的准确分布</li><li>D-W根据样本容量n和待估参数k，在给定显著性水平下，给出了d统计量上，下两个临界值$d_U和d_L$</li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_f0c1f0badb-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_26faf637db-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_29614da7db-4.png" alt="4.png"> </p><p><strong>DW检验的缺陷</strong></p><ul><li>当d统计量落在两个不确定区域时，无法判断是否存在序列相关</li><li>当滞后因变量作为解释变量，检验无效</li><li>只能检验一阶序列相关，不适用于高阶序列相关</li><li>若误差项不是IID正态分布，d检验也不可靠</li></ul><p><strong>BG检验</strong></p><p>这里$\varepsilon_t$没有常数项是因为其期望值为0</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_d1e77c77db-5.png" alt="5.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_56814ba8db-6.png" alt="6.png"> </p><p><strong>序列相关的补救措施</strong><br>非纯序列相关</p><ul><li>正确的模型设定，特别是出现负的序列相关<br>纯序列相关</li><li>广义最小二乘法：广义差分法<br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_c55a4c5fdb-1.png" alt="1.png"></li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_30533aaddb-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_328db523db-3.png" alt="3.png"> </p><blockquote><p>实际中，有时只要迭代两次，就可得到较满意的结果。两次迭代过程也被称为<strong>科克伦-奥科特两步法 </strong></p></blockquote><p><strong>几点说明</strong></p><ol><li>GLS的DW检验值和调整的$R^2$不能与OLS进行比较</li><li>GLS的估计值通常与OLS的估计值不同</li><li>在小样本中，因相关系数的估计可能有偏，GLS估计的系数可能也是有偏的</li></ol><ul><li><p>AR方法</p></li><li><p>Newey——West方法</p><ul><li>只修正标准误而不会改变系数的估计值</li><li>在大样本估计中，效果更好</li><li>绝大多数学术论文采用此种方法</li></ul></li></ul><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><ol><li>序列相关，也叫自相关，违背了古典假设四（即误差项的值彼此不相关）。通常，计量经济学家更多关注的是1阶序列自相关，即误差项当前值是前1期值和序列不相关的误差项u的函数：<script type="math/tex; mode=display">\varepsilon_t=\rho\varepsilon_{t-4}+u_t, -1<\rho<1</script></li><li>纯序列相关是正确设定的回归方程中误差项的相关函数。非纯序列相关是由遗漏了变量或选择了不正确的函数形式等错误设定引起的，可以为正相关（$0&lt;\rho&lt;1$）,也可以为负相关（$-1&lt;\rho&lt;0$）。在经济和商业环境下，纯序列相关几乎都是正相关。</li><li>序列相关性的主要后果是采用普通最小二乘法估计的SE $(\hat{\beta})$是有偏的，导致假设检验不可靠。纯序列相关不会造成参数$\beta$的有偏估计。</li><li>诊断1阶序列相关性最常用得到方法是杜宾——沃森d检验。它用回归估计的残差检验误差项是否存在序列相关性。d检验值为0，意味着序列存在完全正相关，d值为2意味着不存在序列相关性，d值为4意味着序列存在完全负相关。</li><li>消除方程序列相关性的第1步时检查可能存在的设定错误，只有当非纯序列相关存在的可能性很小时，才能考虑修正纯序列相关性。</li><li>广义最小二乘法（GLS）是通过变换方程以消除纯1阶序列相关的方法。运用广义最小二乘法时需要 $\rho$的估计值。</li><li>Newey-West标准差时另一种修正序列相关性的方法。这种方法在考察序列相关性时，在不改变估计量值 $\hat{\beta}$的情况下，调整普通最小二乘估计的标准差SE $(\hat{\beta})$</li></ol><h3 id="例题-5"><a href="#例题-5" class="headerlink" title="例题"></a>例题</h3><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_65781cbcdb-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_67b8314adb-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_69770554db-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_6ca77114db-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_6db91db6db-5.png" alt="5.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_700c3b04db-6.png" alt="6.png"> </p><h2 id="第七章-异方差性"><a href="#第七章-异方差性" class="headerlink" title="第七章 异方差性"></a>第七章 异方差性</h2><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_f7a988dadb-1.png" alt="1.png"> </p><p><strong>异方差类型</strong><br>非纯异方差</p><ul><li>由<strong>设定偏误</strong>导致，如遗漏变量</li><li>函数设定形式不当一般不会导致非纯异方差</li></ul><p><strong>纯异方差</strong></p><ul><li><strong>横截面数据</strong>：被解释变量取值差异较大</li><li>时间序列数据：学习效应，数据采集技术的变化</li></ul><p><strong>纯异方差的后果</strong></p><ul><li>OLS估计量仍然是<strong>无偏</strong>的</li><li>OLS估计量<strong>不再是有效</strong>的（即最小方差估计量）</li><li>标准误的OLS估计量是<strong>有偏</strong>的，且偏差<strong>通常</strong>是负的，意味着OLS通常会高估参数的t值，导致原本不显著的变量可能变得显著</li></ul><blockquote><p>若存在异方差，OSL估计的假设检验不可靠</p></blockquote><p><strong>异方差的检验</strong><br>检验思路：检验异方差，也就是检验随机误差项的方差与比例因子Z或解释变量X之间的相关性及其“形式”</p><p>因随机误差项<strong>方差</strong>的样本对应物是OLS的残差<strong>平方</strong>，因此所有的检验方法都基于<strong>残差平方</strong></p><p><strong>图解法</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_5028b5c5db-2.png" alt="2.png"> </p><p><strong>帕克检验</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_52410ba7db-3.png" alt="3.png"></p><p><strong>*white（怀特）检验</strong><br>基本思想：异方差来源于解释变量及其高次方</p><script type="math/tex; mode=display">Y_i=\beta_0+\beta_1X_{1i}+\beta_2X_{2i}+\varepsilon_i</script><p>步骤1：假设同方差，OLS估计获得残差<br>步骤2：做辅助回归并得到拟合优度$R^2$<br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_6599c024db-4.png" alt="4.png"> </p><p>步骤3：在无异方差的假设下有<br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_94218bfcdb-5.png" alt="5.png"> </p><p>步骤4：若计算的$nR^2$超过选定显著性水平的临界值，则拒绝同方差假设。</p><blockquote><p>有一个经验判断，如果white检验中不包含交叉项，则主要针对异方差性的检验，如果包含交叉项的话，这个检验就是针对模型设定偏误和异方差性的联合检验</p></blockquote><p><strong>异方差的补救措施</strong></p><ul><li>非纯异方差<ul><li>正确的模型设定</li></ul></li><li>纯异方差<ul><li>广义最小二乘法：加权最小二乘（WLS）<ul><li>使用WLS的前提是知道比例因子Z及其与误差项方差之间的关系，即权重向量P</li></ul></li><li>修正异方差的标准误：White方法<ul><li>只修正标准误而不会改变系数的估计值</li><li>在大样本估计中，效果更好</li><li>绝大多数学术论文采用此种方法</li></ul></li><li>重新定义新变量    <ul><li>将某些变量，特别是被解释变量取对数</li><li>根据经济理论，对某些变量进行“规模调整”</li></ul></li></ul></li></ul><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><ol><li>古典假定5要求误差项应服从相同方差的分布，而异方差性正是对此假定的违背。同方差的误差项的观测值的分布是，对于所有观测值而言都具有相同的方差；异方差性的误差项观测值的分布是，对于不同观测值而言，方差不完全相同。界面是数据模型中，最常产生异方差性。</li><li>异方差性误差项的方差不等于常数 $\sigma^2$,而等于 $\sigma_i^2$（其中下标表明方差随观测值的不同而变化）。异方差性有许多种，但是最常用的异方差性模型是将方差看成某个其他变量（比例因子Z）的函数<script type="math/tex; mode=display">VAR(\varepsilon_i)=\sigma^2Z_i^2</script>比例因子通常是跟被解释变量的规模或者精确度相关联的一个变量</li><li>纯异方差性是指异方差性是由误差项的一个函数所表示的，而该误差项是设定正确的方程回归得到的。纯异方差性是由方程设定偏误（比如遗漏变量）导致的。</li><li>异方差性的主要后果是：最小二乘法的SE$(\hat{\beta})$有偏，从而导致假设检验的结果不可信。纯异方差性并不导致$\beta$本身的偏误。</li><li>检验异方差性的主要方法是BP检验和White检验，他们都是通过分析原方程的残差平方可以被辅助方程解释的程度来检验异方差性的。</li><li>修正异方差性的第一步是检查异方差性是否因为遗漏变量而引起的非纯异方差性。如果方程设定正确，那么，就可以考虑采用HC标准差，重新定义变量等措施对异方差性进行补救。</li></ol><h3 id="例题-6"><a href="#例题-6" class="headerlink" title="例题"></a>例题</h3><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_b375e682db-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_b4a997c0db-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_b70b1d06db-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_b96c7fb5db-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_bc63d7fedb-5.png" alt="5.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_be261426db-6.png" alt="6.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_c14e4c42db-7.png" alt="7.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_c381ba78db-8.png" alt="8.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_c54e5b0edb-9.png" alt="9.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_c90f48bddb-10.png" alt="10.png"> </p><h2 id="第八章-虚拟变量模型"><a href="#第八章-虚拟变量模型" class="headerlink" title="第八章 虚拟变量模型"></a>第八章 虚拟变量模型</h2><p><strong>经济变量</strong></p><pre><code>- 可以度量的变量：商品需求量，价格，收入，产量等- 无法定量度量；职业，性别，战争，自然灾害等</code></pre><p><strong>虚拟变量</strong>：定性变量</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_2b391e39db-1.png" alt="1.png"><br>解答：因为如果加入东部，那么三个虚拟变量相加等于1，就会存在多重共线性</p><p><strong>虚拟变量的设置原则</strong></p><ul><li>每一定性变量所需的虚拟变量个数要比该定性变量的类别少1，即如果有m个定性变量，只能在模型中引入m-1个虚拟变量</li><li>在同一方程中，可以引入多个虚拟变量来考察多种定性因素的影响</li></ul><p><strong>虚拟变量的引入</strong></p><ul><li>加法形式：考察<strong>截距的不同</strong><script type="math/tex; mode=display">Y_i=\beta_0+\beta_1X_i+\beta_2D_i+\mu_i</script></li><li>乘法形式：考察<strong>斜率的不同</strong><script type="math/tex; mode=display">C_t=\beta_0+\beta_1X_t+\beta_2D_tX_t+\mu_t</script></li><li>混合形式： <strong>截距和斜率同时发生变化</strong><script type="math/tex; mode=display">Y_i=\beta_0+\beta_1X_i+\beta_3D_i+\beta_4(D_iX_i)+\mu_i</script></li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_0de0a155db-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_48d8fbf7db-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_4b258a20db-4.png" alt="4.png"> </p><p><strong>计量经济学中的实验方法</strong><br><strong>随机分配实验</strong></p><ul><li>处理组：参与实验人员</li><li>对照组或控制组：未参与实验人员<br><strong>自然实验</strong></li><li>观测值自然产生，由外生事件引起</li><li>自然时间，政策变动</li></ul><h3 id="例题-7"><a href="#例题-7" class="headerlink" title="例题"></a>例题</h3><p><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_f7a84806db-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_f9c6cf69db-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_ffd4b727db-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_01b79418db-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_04a20d2edb-5.png" alt="5.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_0667430adb-6.png" alt="6.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_08d57cd8db-7.png" alt="7.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_0b295e6edb-8.png" alt="8.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/24/99310_0d7f931edb-9.png" alt="9.png"> </p><h2 id="第九章-虚拟应变量模型"><a href="#第九章-虚拟应变量模型" class="headerlink" title="第九章 虚拟应变量模型"></a>第九章 虚拟应变量模型</h2><p><strong>虚拟应变量的概念</strong></p><ul><li>虚拟变量既可以作为解释变量，又可以作为被解释变量（应变量）</li><li>虚拟应变量模型又称为概率模型，离散选择模型<ul><li>二元选择模型</li><li>多元选择模型</li></ul></li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_b32092f5db-1.png" alt="1.png"> </p><p>LPM模型存在的问题：</p><ul><li>$\hat{D_i}$的取值可能不在0和1之间</li><li>调整的判定系数$\bar{R^2}$不能准确度量方程的拟合优度</li><li>随机干扰项不服从正态分布，且存在异方差</li></ul><p><strong>Logit模型</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_5b687c48db-2.png" alt="2.png"> </p><p><strong>Probit模型</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_aee3d9ecdb-4.png" alt="4.png"> </p><blockquote><p>采用<strong>极大似然估计法</strong>来估计Logit模型和Probit模型</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_e7e2c668db-9.png" alt="9.png"> </p><p>因为这两种方法的分布函数不同，会得到不同的结果，这两组系数不能直接比较，但是二者系数存在一定的关系</p><p>标准正态分布的方差为1，而标准逻辑分布的方差为$\pi^2/3$，因此将Probit系数乘以$\pi/ \sqrt 3$（约1.81)，就会近似得到Logit系数（约为0.55）</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_4f38b362db-5.png" alt="5.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_52c9d7b3db-6.png" alt="6.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_55dfdc04db-7.png" alt="7.png"></p><p><strong>其它虚拟应变量模型</strong></p><ul><li>多元Logit模型<ul><li>被解释变量存在<strong>多种</strong>离散且<strong>无序</strong>的选择</li><li>如择业的选择，交通工具的选择</li><li>采用极大似然估计</li></ul></li><li>序次Logit模型<ul><li>被解释变量存在<strong>多种</strong>离散且<strong>有序</strong>的选择</li><li>如债券的评级，舆论调查结果</li><li>采用极大似然估计</li></ul></li></ul><p><strong>补充</strong></p><ul><li>当被解释变量是虚拟变量时，不能采用线性概率模型（OLS估计方法）</li><li>Logit和Probit模型可用于估计被解释变量是二分应变量（二元选择）的问题</li><li>在解释变量是多元选择问题中，可以采用多元Logit模型或次序Logit模型</li></ul><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><ol><li>线性概率模型是用来解释虚拟变量$(D_i)$的参数线性方程，$\hat{D_i}$是$D_i$等于1的概率</li><li>采用普通最小二乘法估计线性概率模型会出现三个主要问题：<br> a. 调整的判定系数$\bar{R^2}$不能准确度量模型的整体拟合优度<br> b. $\hat{D_i}$的期望值不是以0和1为界<br> c. 误差项既不是同方差的，也不是正态分布的</li><li>在度量虚拟被解释变量的整体拟合优度时，可以采用样本观测值被模型正确解释的百分比$\bar{R_P^2}$来代替判定系数$\bar{R^2}$</li><li>二元logit模型是一种采用累积logistic函数的变形来回避线性概率模型无界性问题的虚拟被解释变量模型估计方法。模型形式为：<script type="math/tex; mode=display">L:Pr(D_i=1)=ln(\frac{P_i}{[1-P_i]})=\beta_0+\beta_1X_{1i}+\beta_2X_{2i}</script></li><li>二元logit模型最好在大样本条件下采用最大似然法估计，logit模型的斜率参数表示：在其他解释变量保持不变的情况下，特定解释变量每增加1单位对给定选择的概率的对数的影响。</li><li>二元probit模型是一种利用累计正态分布函数的变形来规避线性概率模型无界性问题的虚拟被解释变量模型估计方法。二元probit模型与二元logit模型的特征非常相似<h3 id="例题-8"><a href="#例题-8" class="headerlink" title="例题"></a>例题</h3><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_d0eea739db-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_d2a28cf5db-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_d46bff4fdb-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_d53957ccdb-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_d6d954b7db-5.png" alt="5.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_d843d4addb-6.png" alt="6.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_da2da811db-7.png" alt="7.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_dbb8b170db-8.png" alt="8.png"> </li></ol><h2 id="第十章-预测"><a href="#第十章-预测" class="headerlink" title="第十章 预测"></a>第十章 预测</h2><p><strong>预测共性</strong></p><ul><li>被预测的变量的都是未知的（样本外）</li><li>仅能预测变量的期望值（随机性）</li></ul><blockquote><p>预测是对被解释样本外的观测值的期望值的估计</p></blockquote><p><strong>计量模型的预测步骤</strong></p><ol><li>搜集相关数据，建立回归模型</li><li>估计模型</li><li>将预测期解释变量的值代入模型，进行预测</li><li>评价预测效果</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_a6827a05db-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_db77c7bcdb-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_0ff4f299db-3.png" alt="3.png"> </p><p><strong>时间序列模型预测</strong><br>时间序列分析：“让数据自己说话”</p><ul><li>传统计量模型以理论为基础，而社会经济现象往往受多种因素影响且这些因素存在错综复杂的联系，使得根据理论建模较为困难</li><li>依据经济变量自身的历史资料，采用一定的统计方法，建立起能反映变量自身规律性的动态模型，以此对经济变量进行分析和预测</li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_fe29e0b1db-4.png" alt="4.png"></p><p>平稳性检验：<strong>单位根检验</strong></p><ul><li>存在单位根的时间序列的一阶差分为平稳序列</li><li>常用方法为DF检验，ADF检验</li><li>检验的原假设为：时间序列存在单位根</li></ul><p><strong>时间序列模型预测（平稳）</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_81013502db-5.png" alt="5.png"> </p><p><strong>时间序列模型预测（非平稳）</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_c6e785e3db-6.png" alt="6.png"> </p><p><strong>预测方法</strong></p><ul><li>动态预测：从预测样本的第一期开始计算<strong>多步预测</strong></li><li>静态预测：利用滞后项被解释变量的实际值计算<strong>1步</strong>预测</li></ul><blockquote><p>静态预测效果更好</p><p>复杂模型的预测能力不一定强于简单模型</p><p>预测仅仅是计量经济学的用途之一，不要过分相信计量经济学模型的预测能力！</p></blockquote><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><ol><li>预测就是根据样本范围外的观测值来估计被解释变量的期望值。基本方法是将想要预测的变量作为被解释变量估计一个方程，然后将各个解释变量（需预测的观察结果）的值带入方程中计算出预测值。</li><li>一个预测方程在样本范围内拟合得很好，并不能保证也可以对样本范围外得观测值进行准确的预测。</li><li>确切地知道每一个解释变量的值的预测叫做无条件预测，但如果有一个或多个解释变量的值要通过预测得到，那么这种预测叫做条件预测。条件预测所得到的Y的预测值是无偏的（只要X的预测值是无偏的），但是一定会使误差方差变大。</li><li>如果方程的参数是用广义最小二乘法估计得出的（为了修正纯1阶序列相关），那么预测方程为：<script type="math/tex; mode=display">\hat{Y_{T+1}}=\hat{\rho}Y_T+\hat{\beta_0}(1-\hat{\rho})+\hat{\beta_1}({\hat{X_{T+1}}-\hat{\rho}X_T})</script>式中，$\rho$代表自相关系数</li><li>如果同时计算出置信区间，预测结果将会更加有意义。置信区间是指被解释变量的真实值落入该区间的次数为某固定百分比（置信水平）的某个区间。计算如下：<script type="math/tex; mode=display">\hat{Y_{T+1}}\pm S_Ft_c</script>式中，$S_F$为预测的估计标准差，$t_c$为某置信水平下双侧检验的t的临界值</li><li>ARIMA是一种高度精炼的曲线拟合方法，能用被解释变量（仅仅是被解释变量）的过去值和现在值来精确地预测该变量短期内的值，首先通过d阶差使序列变平稳，差分后的变量其均值和方差固定不变的。ARIMA(p,d,q)表示该模型是由p阶自回归过程（含有$\theta<em>1 Y</em>{t-1}$）和q阶的平均移动过程（含有$\phi<em>1\varepsilon</em>{t-1}$）来表示d阶差分的被解释变量<h3 id="例题-9"><a href="#例题-9" class="headerlink" title="例题"></a>例题</h3><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_e068a6f7db-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_e1e076a9db-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_e3c3db68db-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_e520f2f4db-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_e7ab0f96db-5.png" alt="5.png"> </li></ol><h2 id="第十一章-时间序列模型"><a href="#第十一章-时间序列模型" class="headerlink" title="第十一章 时间序列模型"></a>第十一章 时间序列模型</h2><p><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_b353f8bbdc-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_b64aa6a7dc-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_b8a666afdc-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_bb0123cfdc-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_bc69586adc-5.png" alt="5.png"> </p><p><strong>有限滞后模型（FDL）模型的估计</strong></p><script type="math/tex; mode=display">Y_t= \alpha_0+\beta_0X_t+\beta_1X_{t-1}+...+\beta_{p}X_{t-q}+\varepsilon_{t}</script><p>存在的问题</p><ul><li>X的各期滞后项之间可能存在严重的多重共线性</li><li>参数估计值未必会符合经济理论具有平滑递减的特征</li></ul><p><strong>FDL模型估计的假设</strong></p><ol><li>参数是线性的</li><li>解释变量和误差项不存在完全共线性</li><li>零条件均值 <strong>（严格外生）</strong><blockquote><p>$E(\varepsilon_{t}|X)=0$</p></blockquote></li><li>同方差性</li><li>无序列相关</li><li>正态性</li></ol><p><strong>FDL模型的特点</strong></p><ol><li>OLS的无偏性</li><li>OLS的样本方差<br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_aed943f4dc-6.png" alt="6.png"> </li><li>$\sigma^2$的无偏估计<br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_07c099d6dc-7.png" alt="7.png"> </li><li>高斯-马尔科夫定理<br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_0acded4edc-8.png" alt="8.png"> </li><li>正态抽样分布<br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_43d2d2fadc-9.png" alt="9.png"> </li></ol><p><strong>例子</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_82f01e81dc-10.png" alt="10.png"> </p><p><strong>无限期分布滞后（IDL）模型</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_d4081d01dc-1.png" alt="1.png"> </p><p><strong>考伊克模型的特点</strong></p><ul><li>以滞后被解释变量代替了大量被解释变量的滞后项，节省了自由度</li><li>滞后被解释变量与解释变量的相关度较低，缓解了多重共线性<br><strong>考伊克模型的问题</strong></li><li>随机干扰项存在序列相关性</li><li><p>滞后被解释变量与随机干扰项<strong>不独立</strong></p><blockquote><p>该问题属于内生性问题，导致OLS估计量有偏</p></blockquote></li><li><p>外生解释变量和内生解释变量</p><ul><li>解释变量X与误差项$\varepsilon$不相关，则称x为<strong>外生解释变量</strong></li><li>解释变量X与误差项$\varepsilon$相关，则称x为<strong>内生解释变量</strong></li></ul></li><li><p>解决内生性问题</p><ul><li>在回归模型中增加遗漏变量进行控制</li><li>工具变量（IV检验），代理变量</li></ul></li></ul><p>简单的回归模型：$y=\beta_0+\beta_1x+\varepsilon$</p><script type="math/tex; mode=display">Cov(x,\varepsilon) \ne 0 or E(\varepsilon|x) \ne 0</script><p>为了得到参数的一致估计，需要额外的信息。假设有一个可观测变量z，它满足两个条件：</p><ol><li>z和 $\varepsilon$不相关，即$Cov(z,\varepsilon)=0$</li><li>z和x相关，即$Cov(z, \varepsilon) \ne 0$<br>则称z是x的工具变量。</li></ol><blockquote><p>普通最小二乘估计是工具二乘估计（IV检验）的特殊形式</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_f6e0164bdc-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_f9e552fbdc-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_fbaed7dddc-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_ff9e488ddc-4.png" alt="4.png"> </p><blockquote><p>两组非平稳时间序列进行回归，会产生<strong>虚假的回归现象</strong></p></blockquote><h3 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h3><ol><li>分布滞后项反应Y的当期值是X的当期值和过去值的函数，于是，将X的影响分布于滞后的若干期中。无约束分布滞后模型（特设分布滞后模型）的普通最小二乘估计会产生多重共线性问题，自由度问题和参数随时间的非连续变化问题。</li><li>动态模型通过假设滞后解释变量的参数随滞后项的加长而呈集合呈几何级数衰减回避了分布滞后模型面临的问题。给定这一假设，动态模型可以表述为：<script type="math/tex; mode=display">Y_t=\alpha_0+\beta_0 X_t+\lambda Y_{t-1}+u_t</script>式中，$Y_{t-1}$代表滞后被解释变量且$0&lt;\lambda&lt;1$.</li><li>在小样本条件下，动态模型的普通最小二乘估计存在偏误且假设检验不可靠。即使在大样本条件下，如果误差项存在序列相关性，普通最小二乘法在估计动态模型参数时仍会产生偏误。</li><li>在动态模型中，杜宾-沃森d检验有时不能检验出序列相关性，因为d偏向于2。另一种最常用的检测方法是拉格朗日乘数检验。</li><li>Granger因果关系，也称前定关系，描述的是这样一种情形，即若某时间序列变量变动，另一个时间序列变量会发生一致的可预测的变化。即便一个变量前定（Greanger导致）另外一个变量，也不能认为第一变量的变动引起了另一个变量的变动。</li><li>非平稳序列是随时间发生显著变化（例如，均值和方差）的序列。如果被解释变量和至少一个解释变量是非平稳的，回归结果可能产生谬误相关，使得调整的判定系数$\bar{R^2}$和非平稳解释变量的t统计量偏大。</li><li>DF检验可以检验出非平稳性，如果变量是非平稳的（存在单位根），那么，就应该采用DF检验检验方程残差的平稳性，进而检验方差的协整性。如果变量存在单位根但并不协整，那么，把模型的函数形式转换为1阶差分，再估计方程。如果变量存在单位根并且是协整的，那么，以变量的原始形式估计方程。</li></ol><h2 id="第十二章-面板数据模型"><a href="#第十二章-面板数据模型" class="headerlink" title="第十二章 面板数据模型"></a>第十二章 面板数据模型</h2><p><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_2abc28eadc-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_444b15a5dc-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_460a3463dc-3.png" alt="3.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_4a0e3594dc-4.png" alt="4.png"><br><img src="https://cdn.acwing.com/media/article/image/2022/05/25/99310_4f0d27eedc-5.png" alt="5.png"> </p><h3 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h3><ol><li>随机分配实验被认为是证明一个实验（处理）因素与出现的结果间存在因果关系的黄金准则。随机选择的处理组暴露在实验（处理）下，对照组不受实验因素作用。我们检验组的结果是否有显著性差异。不幸的是，这种实验在经济学的许多领域都不可行。</li><li>如果一个自然发生的时间（如政策的改变）能够被看作模仿了一个随机分配实验过程，则该自然实验能够为经济学中的因果关系提供证据。如果该事件让处理组结果的均值比对照组的均值发生了更显著的变化，则我们有证据表明实验（处理）是使结果发生改变的原因。</li><li>涉及自然实验数据的方程可以用差异中的差分模型来估计，该模型比较了处理组和对照组结果改变量之间的差异。</li><li>面板数据（也称纵向数据）通过在两个或两个以上时间段采集的相同截面样本的相同变量的观测值的方法，结合了时间序列数据和截面数据。面板数据常常是由多年的大规模调查项目得来的，为计量经济学分析提供了丰富的数据资源。</li><li>涉及面板数据的方程可以用固定效应模型或者更先进的随机效应模型进行估计。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由数据范围反推算法复杂度以及算法内容</title>
      <link href="/2022/05/16/%E7%94%B1%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E5%8F%8D%E6%8E%A8%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%A5%E5%8F%8A%E7%AE%97%E6%B3%95%E5%86%85%E5%AE%B9/"/>
      <url>/2022/05/16/%E7%94%B1%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E5%8F%8D%E6%8E%A8%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%A5%E5%8F%8A%E7%AE%97%E6%B3%95%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>一般ACM或者笔试题的时间限制为1秒或2秒</p><p>在这种情况下，C++代码操作次数一般控制在$10^7 - 10^8$</p><p>下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择</p><ol><li>$n \leq 30$, 指数级别， dfs+剪枝，状态压缩DP</li><li>$n \leq 100 \to O(n^3)$ floyed, dp, 高斯消元</li><li>$n \leq 1000 \to O(n^2), O(n^2logn)$ dp, 二分， 朴素版dijkstra，朴素版Prim，Bellman-Ford </li><li>$n \leq  10000\to O(n * \sqrt n)$ 块状链表、分块、莫队</li><li>$n \leq 100000 \to O(nlogn)$ 各种sort，线段树，树状数组，set/map，heap，拓扑排序，dijkstra+heap，prim+heap，Kruskal，spfa，求凸包，求半平面交，二分，CDQ分治，整体二分，后缀数组，树链剖分，动态树</li><li>$n \leq 1000000 \to O(n)$, 以及常数较小的$O(nlogn)$算法单调队列，hash，双指针扫描，并查集，kmp，AC自动机，常数比较小的$O(nlogn)$做法sort、树状数组、heap、dijkstra、spfa</li><li>$n \leq 10000000 \to O(n)$ 双指针扫描，kmp，AC自动机，线性筛素数</li><li>$n \leq 10^9 \to O(\sqrt n)$,判断素数</li><li>$n \leq 10^{18} \to O(logn)$,最大公约数，快速幂，数位DP</li><li>$n \leq 10^{1000} \to O((logn)^2)$ 高精度加减乘除</li><li>$n \leq 10^{100000} \to O(logk*loglogk)$  , k表示位数，高精度加减，FFT/NTT</li></ol>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing周赛</title>
      <link href="/2022/05/14/AcWing%E5%91%A8%E8%B5%9B/"/>
      <url>/2022/05/14/AcWing%E5%91%A8%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="第51场周赛"><a href="#第51场周赛" class="headerlink" title="第51场周赛"></a>第51场周赛</h2><h3 id="上车"><a href="#上车" class="headerlink" title="上车"></a><a href="https://www.acwing.com/problem/content/4422/">上车</a></h3><h4 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h4><p>只要每辆车差值大于等于2答案加一</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span> (y - x &gt;= <span class="hljs-number">2</span>) res ++ ;<br>    &#125;<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="连通分量"><a href="#连通分量" class="headerlink" title="连通分量"></a><a href="https://www.acwing.com/problem/content/4423/">连通分量</a></h3><h4 id="题意分析-1"><a href="#题意分析-1" class="headerlink" title="题意分析"></a>题意分析</h4><p>我们以障碍物为操作对象，我们发现障碍物有周围4个格子，我们可以看一下上下左右四个一共有多少连通块，我们将当前的障碍物变成空地之后，我们就可以让上下左右方向上的空地连通起来，我们本质上是求将上下左右的连通块合并完之后，新的连通块的大小</p><p>求连通块有三种方法，分别是dfs，bfs或者并查集</p><p>我们对于当前四个方向上的格子一共有几个连通块，每一个集合用根节点表示，对于空地来说，如果有abcd四个空地，我们可以求一下每一个区域的代表元素a’b’c’d’，将属于同一个区域里面的连通块去掉，将不同的连通块的大小加上1得到新的连通块的大小</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">char</span> g[N][N];<br><span class="hljs-type">int</span> p[N * N], s[N * N];<br><br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x * m + y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)  p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; g[i];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * m; i ++ ) p[i] = i, s[i] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>            <span class="hljs-keyword">if</span> (g[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k ++ )<br>                &#123;<br>                    <span class="hljs-type">int</span> x = i + dx[k], y = j + dy[k];<br>                    <span class="hljs-keyword">if</span> (x &lt; n &amp;&amp; x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp; g[x][y] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                    &#123;<br>                        <span class="hljs-type">int</span> a = <span class="hljs-built_in">find</span>(<span class="hljs-built_in">get</span>(x, y)), b = <span class="hljs-built_in">find</span>(<span class="hljs-built_in">get</span>(i, j));<br>                        <span class="hljs-keyword">if</span> (a != b)<br>                        &#123;<br>                            s[b] += s[a];<br>                            p[a] = b;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>            <span class="hljs-keyword">if</span> (g[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>) cout &lt;&lt; <span class="hljs-string">&quot;.&quot;</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> fathers[<span class="hljs-number">4</span>], cnt = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k ++ )<br>                &#123;<br>                    <span class="hljs-type">int</span> x = i + dx[k], y = j + dy[k];<br>                    <span class="hljs-keyword">if</span> (x &lt; n &amp;&amp; x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp; g[x][y] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                    fathers[cnt ++ ] = <span class="hljs-built_in">find</span>(<span class="hljs-built_in">get</span>(x, y));<br>                &#125;<br>                <span class="hljs-type">int</span> sum = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (cnt)<br>                &#123;<br>                    <span class="hljs-built_in">sort</span>(fathers, fathers + cnt);<br>                    cnt = <span class="hljs-built_in">unique</span>(fathers, fathers + cnt) - fathers;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; cnt; k ++ )<br>                        sum += s[fathers[k]];<br>                &#125;<br>                cout &lt;&lt; sum % <span class="hljs-number">10</span>;<br>            &#125;<br>            <br>        cout &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a><a href="https://www.acwing.com/problem/content/4424/">信号</a></h3><h4 id="题意分析-2"><a href="#题意分析-2" class="headerlink" title="题意分析"></a>题意分析</h4><p>如果第 $p$ 号房子内装有信号发射器，则所有房间编号在 $[p−r+1,p+r−1]$ 范围内的房子均可被其发出的无线信号覆盖，而其余房子则不会被其发出的无线信号覆盖。</p><p>至少开启多少个无线信号发射器，才能保证所有房子都被无线信号覆盖到,如果无解输出-1</p><p>时间复杂度只要控制在$O(n^2)$</p><p>本题采用贪心的方法来做，直觉上想如果最左边的区域可以由两个信号发射器覆盖，我们选择更靠右的方案一定是更优的，同理如果一个点可以由多个点覆盖那么一定是更靠右的效果更好</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n, r;<br><span class="hljs-type">int</span> q[N], cnt;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; r;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a;<br>        cin &gt;&gt; a;<br>        <span class="hljs-keyword">if</span> (a) q[cnt ++ ] = i;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (last &gt;= n) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (q[i] - r &gt; last)<br>        &#123;<br>            res = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span> j = i;<br>        <span class="hljs-keyword">while</span> (j + <span class="hljs-number">1</span> &lt; cnt &amp;&amp; q[j + <span class="hljs-number">1</span>] - r &lt;= last) j ++ ;<br>        last = q[j] + r - <span class="hljs-number">1</span>;<br>        res ++ ;<br>        i = j;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (last &lt; n) res = <span class="hljs-number">-1</span>;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stata使用笔记</title>
      <link href="/2022/05/12/stata%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/05/12/stata%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="b站教学视频"><a href="#b站教学视频" class="headerlink" title="b站教学视频"></a><a href="https://space.bilibili.com/19985250/search/video?keyword=stata">b站教学视频</a></h2><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>use</p><h2 id="画散点图"><a href="#画散点图" class="headerlink" title="画散点图"></a>画散点图</h2><p>scatter 纵坐标变量 横坐标变量</p><p>scatter y x1 x2 … </p><h2 id="回归分析"><a href="#回归分析" class="headerlink" title="回归分析"></a>回归分析</h2><p>reg y x1 x2 x3 … </p><h2 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h2><h3 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3><ul><li>正态分布检验指令 sktset + 变量</li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_96103944d1-1.png" alt="1.png"> </p><blockquote><p>Obs 样本值 Pr（skewness）是对偏度的正态分布检测值 Pr（kurtosis）是对其峰度的正态分布检验，chi（2）是对总体的正态分布检验，我们主要观看的是P值（Prob）如果P值大于0.05我们就认为其符合正态分布，否则不符合</p></blockquote><ul><li>寻找变量正态化的方法 ladder+变量</li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_9ac04f1ed1-2.png" alt="2.png"> </p><blockquote><p> Formula对数据的处理方法，主要看p值如果P值大于0.05我们就认为其符合正态分布，否则不符合</p></blockquote><ul><li>画出变量进行正态话处理后的图像 gladder+变量</li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_9c9332acd1-3.png" alt="3.png"> </p><h3 id="t检验"><a href="#t检验" class="headerlink" title="t检验"></a>t检验</h3><ul><li>单一样本T检验 ttest + 变量名 = 数值</li></ul><blockquote><p>通过单一样本T检验，我们可以实现样本均值与总体均值的比较。也就是说，是用来比较一组数据的平均值和一个数值有无差异</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_9f913caad1-4.png" alt="4.png"> </p><blockquote><p>Mean是平均值，std.err为标准误，std.dev是标准差 95% conf.interval是95%水平的置信区间范围 自由度为观测样本数-1 t为t值 主要看P值如果小于0.05那么这组数据的平均值与给定的数据平均值有显著性差异，如果大于0.05那么则无显著性差异</p></blockquote><ul><li>单一样本T检验修改置信水平 ttest + 变量名 = 数值，level(99)</li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_a2afad70d1-5.png" alt="5.png"> </p><blockquote><p>数据指标与上图一致，只是置信水平发生变化</p></blockquote><ul><li>独立样本T检验修改置信区间值 ttest 变量名=变量名，unpaired </li></ul><blockquote><p>通过独立样本T检验，我们可以实现两个独立样本的均值检验</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_a612a332d1-6.png" alt="6.png"> </p><blockquote><p>其他表项与上述表项类似，主要看P值如果小于0.05那么两组数据有显著性差异，如果大于0.05那么则无显著性差异</p></blockquote><ul><li>独立样本T检验修改置信区间值 ttest 变量名=变量名，unpaired level(数值)</li></ul><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_a88d39fcd1-7.png" alt="7.png"> </p><ul><li><p>独立样本T检验两样本方差不同 ttest 变量名=变量名，unpaired unequal</p></li><li><p>配对样本T检验 ttest 变量名=变量名</p></li></ul><blockquote><p>通过配对样本T检验，我们可以实现对成对数据样本均值的比较，其与独立样本T检验的区别是：两个样本来自同一总体，而且数据的顺序不能调换。</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_aadaa1d2d1-8.png" alt="8.png"> </p><blockquote><p>主要看P值分析与上面一致</p></blockquote><h3 id="F检验"><a href="#F检验" class="headerlink" title="F检验"></a>F检验</h3><blockquote><p>F检验又叫方差齐性检验。从两研究总体中随机抽取样本，要对这两个&gt;样本进行比较的时候，首先要判断两总体方差是否相同，即方差齐性。若两总体方差相等，则直接用t检验，若不等，可采用t’检验或变量变换或秩和检验等方法。<br>从两研究总体中随机抽取样本，要对这两个样本进行比较的时候，首先要判断两总体方差是否相同，即方差齐性。若两总体方差相等，则直接用t检验，若不等，可采用t’检验或变量变换或秩和检验等方法。其中要判断两总体方差是否相等，就可以用F检验。</p></blockquote><p>reg y x1 x2 x3 x4</p><p>test x1 x2 x4</p><p>test x2=0.3</p><p>注意除了y其他都能用test检验</p><h2 id="邹检验"><a href="#邹检验" class="headerlink" title="邹检验"></a>邹检验</h2><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>建立鸡肉消费量Y对鸡肉价格PC、人均可支配收入YD的回归模型，采用1974-2002的数据估计参数(变量YEAR)，检验1993年是否存在结构变化(邹检验)，请写出相应的Stata的程序或命令(数据use CHICK6.dta)。</p><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> CHICK6.dta<br><span class="hljs-keyword">reg</span> Y PC YD<br><span class="hljs-keyword">scalar</span> ssr = <span class="hljs-built_in">e</span>(rss)<br><span class="hljs-keyword">reg</span> Y PC YD <span class="hljs-keyword">if</span> year &lt; 1993<br><span class="hljs-keyword">scalar</span> srr1 = <span class="hljs-built_in">e</span>(rss)<br><span class="hljs-keyword">reg</span> Y PC YD <span class="hljs-keyword">if</span> year &gt;= 1993<br><span class="hljs-keyword">scalar</span> srr2 = <span class="hljs-built_in">e</span>(rss)<br><span class="hljs-keyword">gene</span> f = ((ssr - ssr1 - ssr2) / 3) / (srr1 + srr2) / (29 -  6)<br></code></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> CHICK6.dta<br><span class="hljs-keyword">reg</span> Y PC YD<br><span class="hljs-keyword">estat</span> sbknown,<span class="hljs-keyword">break</span>(1993)<br></code></pre></td></tr></table></figure><h2 id="循环结构举例"><a href="#循环结构举例" class="headerlink" title="循环结构举例"></a>循环结构举例</h2><p><a href="https://blog.csdn.net/Hedy_mail/article/details/108351037">参考博客</a></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">scaler j = 1<br><span class="hljs-keyword">while</span> j &lt;= num&#123;<br>    <span class="hljs-keyword">matrix</span> pvalue[j, 1] = 2*(1-t(<span class="hljs-built_in">rowsof</span>(x)-<span class="hljs-built_in">colsof</span>(X), <span class="hljs-built_in">abs</span>(tvalue[j, 1])))<br>    <span class="hljs-keyword">scalar</span> j = j + 1 <span class="hljs-comment">// 更新时也用scalar</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="正态性JB检验：-jb6-X"><a href="#正态性JB检验：-jb6-X" class="headerlink" title="正态性JB检验： jb6 X"></a>正态性JB检验： jb6 X</h2><blockquote><p>需要提前安装 ssc install jb6</p><ul><li>输出的第二个数大于0.05则可认为数据符合正态分布</li></ul></blockquote><h2 id="多重共线性检验之VIF判断"><a href="#多重共线性检验之VIF判断" class="headerlink" title="多重共线性检验之VIF判断"></a>多重共线性检验之VIF判断</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">estat</span> <span class="hljs-keyword">vif</span><br></code></pre></td></tr></table></figure><blockquote><p>先回归再检测，如果vif大于5认为存在严重的多重共线性</p></blockquote><h2 id="序列相关性"><a href="#序列相关性" class="headerlink" title="序列相关性"></a>序列相关性</h2><h3 id="序列相关性检验"><a href="#序列相关性检验" class="headerlink" title="序列相关性检验"></a>序列相关性检验</h3><blockquote><p>先回归再检验</p><ul><li>DW检验:estat dwatson</li><li>(简写) estat dwa<br><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_3c9c8bdbd1-1.png" alt="1.png"> </li><li>BG/LM检验 (拉格朗日乘数检验)<br>DW检验有许多限制，只能用于阶序列相关性的检验，方程包含一个常数，而且方程不含滞后被解释变量，还有DW检验会随着被解释变量的个数增加，不确定区域也会扩大</li></ul></blockquote><pre><code>- estat bgo- estat bgo, lags(1/2)- estat bgo, small lags(1/2)- lags用来设置自相关系数- Prob&lt;0.05时拒绝原假设，认为存在自相关- small specifies that the p-values of the test statistics be obtained using the F or t distribution instead of the default chi-squared or normal distribution.</code></pre><h3 id="自相关图和bg检验"><a href="#自相关图和bg检验" class="headerlink" title="自相关图和bg检验"></a>自相关图和bg检验</h3><p>estat bgodfrey, lags( p ) nomiss()</p><p>以上为BG检验原始语句，lags( p )用来指定BG检验的滞后阶数p，默认为lags(1),选择项nomiss()表示进行不添加0的BG检验，默认是以0代替缺失值，即DM方法</p><p>关于如何确认滞后阶数，简单的方法是看自相关图，画图自相关图后，阴影部分时95%的置信区间，点落在95%的置信区间之外或者附近，表明显著不为0，也就是有自相关</p><h3 id="序列相关的补救之GLS方法"><a href="#序列相关的补救之GLS方法" class="headerlink" title="序列相关的补救之GLS方法"></a>序列相关的补救之GLS方法</h3><blockquote><p>自动估计相关系数和阶数，两条命令代表相关系数的两种迭代方法</p><pre><code>- prais Y X1 X2 X3- prais Y X1 X2 X3, corc</code></pre><h3 id="序列相关的补救之NW方法"><a href="#序列相关的补救之NW方法" class="headerlink" title="序列相关的补救之NW方法"></a>序列相关的补救之NW方法</h3><p> lag(3)代表最高自相关阶数为3<br>    newey Y PC PB YD, lag(3)</p></blockquote><h2 id="异方差检验"><a href="#异方差检验" class="headerlink" title="异方差检验"></a>异方差检验</h2><p><a href="https://blog.csdn.net/Clytie_Lion/article/details/120510724">参考博客</a></p><h3 id="异方差的怀特检验"><a href="#异方差的怀特检验" class="headerlink" title="异方差的怀特检验"></a>异方差的怀特检验</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> VOL TOT SAT <span class="hljs-comment">// 先回归</span><br><span class="hljs-keyword">estat</span> <span class="hljs-keyword">imtest</span>, white<br></code></pre></td></tr></table></figure><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_3fab8ef2d1-2.png" alt="2.png"> </p><h3 id="异方差的补救"><a href="#异方差的补救" class="headerlink" title="异方差的补救"></a>异方差的补救</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//补救措施1 怀特调整</span><br><span class="hljs-keyword">reg</span> PCON <span class="hljs-keyword">REG</span> PRICE, robust<br><span class="hljs-comment">//补救措施2 变换方程形式(双对数)</span><br><span class="hljs-keyword">gen</span> lnPCON = <span class="hljs-built_in">ln</span>(PCON)<br><span class="hljs-keyword">gen</span> lnREG = <span class="hljs-built_in">ln</span>(<span class="hljs-keyword">REG</span>)<br><span class="hljs-keyword">gen</span> lnPRICE = <span class="hljs-built_in">ln</span>(PRICE)<br><span class="hljs-keyword">reg</span> lnPCON lnREG lnPRICE<br><span class="hljs-comment">//补救措施3 重新定义定义变量</span><br><span class="hljs-keyword">gen</span> PCON1 = PCON / POP<br><span class="hljs-keyword">gen</span> REG1 = <span class="hljs-keyword">REG</span> / POP<br><span class="hljs-keyword">reg</span> PCON1 REG1 PRICE<br></code></pre></td></tr></table></figure><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_42398d09d1-3.png" alt="3.png"> </p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_4590028cd1-4.png" alt="4.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/12/99310_485e9575d1-5.png" alt="5.png"> </p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p>建立图书馆藏书量VOL对师生人数TOT，学生高考成绩SAT的回归模型，请写出线性回归模型的stata命令，采用white法检验异方差命令，采用White调整异方差的命令<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">reg</span> VOL TOT SAT<br><span class="hljs-keyword">estat</span> <span class="hljs-keyword">imtest</span>, white<br><span class="hljs-keyword">reg</span> VOL TOT SAT, robust<br></code></pre></td></tr></table></figure><br>结果如下：</p><blockquote><p>这个结果用的是CHICK6.dta的数据，但意思大同小异</p></blockquote><p>怀特检验，我们主要H0是同方差假设，HA是异方差假设，看P值，如果P值&lt;0.05说明我们要拒绝原假设，即原序列有着异方差性</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/13/99310_de5e842ad2-1.png" alt="1.png"> </p><p>怀特检验修正</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/13/99310_e1e7d20ad2-2.png" alt="2.png"> </p><blockquote><p>画自相关图<br>ac e1</p></blockquote><h2 id="8A-SAT互动练习"><a href="#8A-SAT互动练习" class="headerlink" title="8A SAT互动练习"></a>8A SAT互动练习</h2><p>简单来说，本次练习就是寻找最合适的解释变量，来解释被解释变量。</p><p>首先肯定要选择GPA，APMATH以及APENG为我们的解释变量，然后AP因为APMATH以及APENG已经可以解释所以不用，然后看ESL和RACE因为样本中不是亚洲人就是白种人，如果英语不是母语，很大概率是亚洲人，并且在相关系数表中，ESL和RACE的相关系数为0.8461&gt;0.8太大了，因此ESL和RACE只用选一个就可以了，在考试中我认为ESL个具有代表性，因为如果你不是母语者那么你学习过程中肯定有一定的困难，所以采用ESL作为解释变量，而GENDER和PEPR在我看来都有充足的解释力，而且前文也提到了性别对于SAT成绩的巨大影响。</p><p>综上所述，我们先用 GPA APMATH APENG ESL GENDER PEPR进行回归分析</p><p>预测符号<br>| 变量 | 符号 |<br>| :—-: | :—-: |<br>| GPA | + |<br>| APMATH |  + |<br>| APENG | + |<br>| ESL | - |<br>| GEND | + |<br>| PREP | + |</p><p>开始回归</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/13/99310_eee6f902d2-1.png" alt="1.png"> </p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/13/99310_f09be2efd2-2.png" alt="2.png"> </p><p>我们首先看系数与我们的设想一不一致，然后看p值，在t检验中，p值如果&lt;0.05则说明该解释变量有显著的解释力，反之则没有。<br>我们发现PREP与我们的预期不符。表面上看，变量PREP是一个有影响力的变量，因为几乎可 以肯定PREP课程可以提高修读了该课程学生的SAT测试成绩。问题是学生修读PREP课程的 决定与他以前的（或者预期的）SAT测试成绩有关。我们相信那些感觉自己需要修读PREP课 程的学生会做出正确的判断，同时，我们认为这些课程会使他们的成绩达到与那些没有选修 PREP课程的学生的成绩不相上下。因而，该变量对SAT成绩没有显著的影响。<br>所以去除PREP</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/13/99310_f541fe6ed2-3.png" alt="3.png"> </p><p>发现一个问题，其他变量p值都挺好的，但到了ESL就拉了，从感性角度出发，但是ESL有充分理由留在这里，这启发我们，数据统计出来的只是一个参考，具体问题，要结合具体的情况分析。</p><h2 id="stata命令"><a href="#stata命令" class="headerlink" title="stata命令"></a>stata命令</h2><ul><li>导入数据<ul><li>命令行 ——use “路径”<ul><li>例：use “D:\stata\auto.dta”</li></ul></li><li>标签——文件——打开——选择文件</li></ul></li><li>计算函数<ul><li>exp()</li><li>log()</li><li>log10()</li><li>sqrt()</li><li>abs()</li></ul></li><li>数据操作<ul><li>导入数据<ul><li>命令行——use “路径”<ul><li>例：use “D:\stata\auto.dta”</li></ul></li><li>标签——文件——打开——选择文件</li></ul></li><li>删除数据行<ul><li>drop in 1/n //删除前n行</li><li>drop in n 删除n行</li><li>duplicates drop //删除重复行</li></ul></li><li>导出dta文件为excel<ul><li>save name.dta, replace \ export excel using name</li></ul></li></ul></li><li>变量操作<ul><li>新建变量<ul><li>命令行——generate 新变量名=新变量产生方法<ul><li>例: generate newprice = price + 4(price是已有变量)</li></ul></li></ul></li><li>删除变量<ul><li>命令行——clear</li></ul></li><li>变量值排序<ul><li>命令行——sort预排序变量<ul><li>默认从小到大</li><li>例:sort price</li></ul></li></ul></li><li>查看变量值分布<ul><li>命令行——tabulate 变量</li></ul></li><li>变量的分组<ul><li>命令行——generate 新变量 = autocode(旧变量，分类数，下界，上界)</li><li>举例<ul><li>generate newmpg = autocode(mpg, 3, 10, 40)</li><li>结果:新变量newmpg将只取20，30，40中的值</li></ul></li></ul></li></ul></li><li>矩阵操作<ul><li>设置系统能容纳的矩阵大小<ul><li>命令行: set matsize 数值</li></ul></li><li>创建矩阵A<ul><li>创建单位矩阵<ul><li>matrix define A = l(n) // 创建n维单位矩阵</li></ul></li></ul></li><li>手动输入值构造<ul><li>Mat A=[1,2,3\4,5,6]</li></ul></li><li>创建每个值相等的矩阵<ul><li>matrix A = J(行数，列数，每个元素的值)</li></ul></li><li>通过变量构造<ul><li>mkmat 变量1 变量2 变量3，matrix(A) //会将三个变量作为矩阵的三列</li></ul></li><li>通过矩阵构造<ul><li>matrix A = []//类似输入值构造，只不过换成了矩阵，注意行列对齐</li><li>matrix A = 矩阵运算式</li><li>matrix A = invsym(B)// B是一个可逆矩阵，A得到其逆矩阵</li><li>matrix diag = vecdiag(A)//提取A的对角元素得到列向量diag</li><li>matrix R = cholesky(A) // S = RR’，对S进行分解</li></ul></li><li>创建对角矩阵<ul><li>mat D = diag(v) // 其中v是n <em> 1或 1 </em> n矩阵</li></ul></li><li>显示矩阵A<ul><li>mat list A</li></ul></li><li>提取矩阵某行某列<ul><li>X[1…2, 3…4]得到X第1、2行和第3、4列形成的矩阵</li><li>X[1…., 3….]得到第1行到最后一行，第3列到最后一列</li></ul></li><li>矩阵运算<ul><li>取逆：invsym(A)</li><li>转置：A’</li></ul></li><li>设计矩阵列名<ul><li>matrix colnames A = 第一列名 第二列名 第三列名</li></ul></li><li>其他矩阵相关函数<ul><li>scalar m = rowsof(A)//返回矩阵A的行数给标量m</li><li>scalar n = colsof(A)//返回矩阵A的列数给标量n</li></ul></li></ul></li><li>绘图<ul><li>散点图<ul><li>Twoway scatter y x</li></ul></li><li>折线图<ul><li>Twoway line y x</li></ul></li><li>带数据点标记折线图<ul><li>twoway connected y x</li></ul></li><li>垂直线图<ul><li>twoway dropline y x</li></ul></li><li>lowess图<ul><li>twoway lowess y x</li></ul></li><li>脉冲图<ul><li>twoway spike y x</li></ul></li></ul></li><li>循环结构<ul><li>见文档</li></ul></li><li>得到data集中的所有行数<ul><li>scalar n = _N</li></ul></li><li>单词表<ul><li>Obs(objects)有效观测样本</li><li>Std.Dev(Standard deviation)标准差</li><li>Wgt(Weight)权重</li><li>Varlance方差</li><li>Skewness偏度<ul><li>用来衡量数据的不对称性</li><li>&lt;0时，概率分布左偏，有一个向左的尾</li><li><blockquote><p>0时，概率分布右偏，有一个向右的尾</p></blockquote></li><li>=0时，数据相对均匀地排布在平均值两侧</li></ul></li><li>Kurtosis峰度<ul><li>用来衡量数据的集中性</li><li>取值范围&gt;=1，峰度值越大概率分布图越高尖</li><li>完全服从正态分布的数据峰度为3</li></ul></li></ul></li><li>统计、假设检验<ul><li>查看变量的统计指标值<ul><li>命令行——summarize [变量1 变量2 ……][,detail]<ul><li>后面不加变量名：输出所有变量的统计指标值</li><li>后面加变量名，变量名之间空格隔开：输出所选变量的统计指标值<ul><li>例：summarize price mpg</li></ul></li><li>后面加,detail：显示更多的统计指标值<ul><li>例：summarize price mpg,detail</li></ul></li></ul></li><li>命令行——tabstat 变量1 [变量2 ……],stats(指标1 [指标2 ……])</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计量经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春季每日一题2022</title>
      <link href="/2022/05/09/%E6%98%A5%E5%AD%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%982022/"/>
      <url>/2022/05/09/%E6%98%A5%E5%AD%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%982022/</url>
      
        <content type="html"><![CDATA[<p>之前的有时间补先按照顺序做吧</p><h2 id="DAY-5-09"><a href="#DAY-5-09" class="headerlink" title="DAY 5-09"></a>DAY 5-09</h2><h3 id="更多奇怪的照片"><a href="#更多奇怪的照片" class="headerlink" title="更多奇怪的照片"></a><a href="https://www.acwing.com/problem/content/3362/">更多奇怪的照片</a></h3><h3 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h3><p>给定一个序列n，每个点只能选一次，要全部选完，然后组成偶奇交替的序列</p><p>可以记录奇数和偶数出现的次数，因为要求最大分组，用奇数+偶数=奇数 奇数+奇数=偶数来构造，每用一个在数目上减去。</p><p>可以证明按照这种处理方法如果还剩下若干个偶数，或者若干个奇数没有办法配对，那么可以把偶数加到前面的偶数组中，奇数只能剩下1个，否则的话，2个奇数能够凑成偶数，能够继续构造，因此这种方法一定有解，并且一定是最优解,如果奇数只剩下1个，那么答案要减一，因为如果只剩下1个奇数没法配对，那么当前一定是匹配偶数，前一个一定是奇数，现在剩下一个没法配对成功，那么就要把前一个分组删除，把它和最后一个奇数合并，构成一个偶数，因此答案减一，本题就做完了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> odd, even;<br><span class="hljs-type">int</span> n, res;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (x % <span class="hljs-number">2</span>) odd ++ ;<br>        <span class="hljs-keyword">else</span> even ++ ;<br>    &#125;<br>    <br>    <span class="hljs-comment">//  cout &lt;&lt; odd &lt;&lt; &quot; &quot; &lt;&lt; even &lt;&lt; endl;</span><br>    <br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((i % <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (even) even -- , res ++ ;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (odd &gt;= <span class="hljs-number">2</span>) odd -= <span class="hljs-number">2</span>, res ++ ;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (odd) odd -- , res ++ ;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; odd &lt;&lt; endl;</span><br>        i ++ ;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (odd == <span class="hljs-number">1</span>) res -- ;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DAY-05-10"><a href="#DAY-05-10" class="headerlink" title="DAY 05-10"></a>DAY 05-10</h2><h3 id="舒适的奶牛"><a href="#舒适的奶牛" class="headerlink" title="舒适的奶牛"></a><a href="https://www.acwing.com/problem/content/3374/">舒适的奶牛</a></h3><h3 id="题意分析-1"><a href="#题意分析-1" class="headerlink" title="题意分析"></a>题意分析</h3><p>题目要求的是每次加入奶牛后舒服的奶牛数量，那么我们当读入一个奶牛时，我们发现它只会改变它周围四个点的性质，那么我们检查下该点和其周围的奶牛就可以了，用st[i][j]表示这个位置有没有算过答案，如果算过答案—</p><p>时间复杂度为$O(n)$</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n, res;<br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-type">bool</span> st[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a = x + dx[i], b = y + dy[i];<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span> || a &gt;= n || b &lt; <span class="hljs-number">0</span> || b &gt;= n) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (g[a][b]) cnt ++ ;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">3</span>) st[x][y] = <span class="hljs-literal">true</span>, res ++ ;<br>    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">4</span> &amp;&amp; st[x][y]) res -- ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        g[x][y] = <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-built_in">check</span>(x, y);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> a = x + dx[j], b = y + dy[j];<br>            <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span> || a &gt;= n || b &lt; <span class="hljs-number">0</span> || b &gt;= n) <span class="hljs-keyword">continue</span>;<br>           <span class="hljs-keyword">if</span> (g[a][b]) <span class="hljs-built_in">check</span>(a, b);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DAY-05-11"><a href="#DAY-05-11" class="headerlink" title="DAY 05-11"></a>DAY 05-11</h2><h3 id="牛的学术圈-II"><a href="#牛的学术圈-II" class="headerlink" title="牛的学术圈 II"></a><a href="https://www.acwing.com/problem/content/3749/">牛的学术圈 II</a></h3><h3 id="题意分析-2"><a href="#题意分析-2" class="headerlink" title="题意分析"></a>题意分析</h3>]]></content>
      
      
      <categories>
          
          <category> 自律 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期前集训动态规划题解</title>
      <link href="/2022/05/08/%E6%9A%91%E6%9C%9F%E5%89%8D%E9%9B%86%E8%AE%AD%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/05/08/%E6%9A%91%E6%9C%9F%E5%89%8D%E9%9B%86%E8%AE%AD%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2018年提高组题解</title>
      <link href="/2022/05/08/NOIP2018%E5%B9%B4%E6%8F%90%E9%AB%98%E7%BB%84%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/05/08/NOIP2018%E5%B9%B4%E6%8F%90%E9%AB%98%E7%BB%84%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跑步打卡</title>
      <link href="/2022/05/08/%E8%B7%91%E6%AD%A5%E6%89%93%E5%8D%A1/"/>
      <url>/2022/05/08/%E8%B7%91%E6%AD%A5%E6%89%93%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="DAY1-2022-05-06"><a href="#DAY1-2022-05-06" class="headerlink" title="DAY1 2022-05-06"></a>DAY1 2022-05-06</h1><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_cd1bfa23ce-2.jpg" alt="2.jpg"> </p><h1 id="DAY2-2022-05-07"><a href="#DAY2-2022-05-07" class="headerlink" title="DAY2 2022-05-07"></a>DAY2 2022-05-07</h1><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_d0ecd836ce-1.jpg" alt="1.jpg"> </p>]]></content>
      
      
      <categories>
          
          <category> 自律 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自律 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件技术基础项目1.4与课后作业</title>
      <link href="/2022/05/08/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE1-4%E4%B8%8E%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/"/>
      <url>/2022/05/08/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE1-4%E4%B8%8E%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="63090d27778130e42dc621a21b59b4d00e57a5753c313f9304d4ddbf157b63f7">83bc12dacc7a0d781bd8e05336f2838b92390b858277e4757d82da37f5df1719</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件技术基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成电讲坛观后感</title>
      <link href="/2022/05/08/%E6%88%90%E7%94%B5%E8%AE%B2%E5%9D%9B%E8%A7%82%E5%90%8E%E6%84%9F/"/>
      <url>/2022/05/08/%E6%88%90%E7%94%B5%E8%AE%B2%E5%9D%9B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="成电讲坛观后感"><a href="#成电讲坛观后感" class="headerlink" title="成电讲坛观后感"></a>成电讲坛观后感</h1><p>在成电讲坛中，我开阔了我的视野，在社会各界的大咖身上获得了宝贵的知识和经验，受益终身。</p><p>杨教练为大家播放了世界顶级冲浪运动员的冲浪视频，冲浪运动的力量与美感，人类与浪花的博弈与共生令同学们沉醉。冲浪运动同滑板和滑雪有许多共同之处——最显著的地方即是三个运动都需要一块木板。冲浪运动在夏威夷真正起源，作为一项严肃的运动保有其独特的宗教意义，而古老的文化作为竞技运动和生活方式影响着现代人。接着，杨教练介绍了中国冲浪项目的起源和发展。上世纪六十年代冲浪运动传入亚洲，七十年代传入中国。中国的冲浪项目起步虽晚，但是后劲十足。2010年我国就举办了第一届国际冲浪赛；2017年中国冲浪国家队成立，国家队培训基地揭牌；21年国家管理体系建立，冲浪运动在我国的发展如火如荼。最后，杨教练介绍了国家冲浪体系。体系分为教练员体系和学员体系。</p><p>周文彰教授在社会主义的经典构想和新中国的初期探索，社会主义初级阶段和党的基本路线，中国特色社会主义一创立就成为党的旗帜，中国特色社会主义在实践中不断发展，习近平新时代中国特色社会主义思想和中国特色社会主义新时代以及做中国特色社会主义得到奋斗者六个方面生动的诠释了中国特色社会主义的发展历程，讲座高屋建瓴，从一定高度和深度对中国特色社会主义的历史脉络进行了细致的分析和讲解，我从中收益匪浅。</p><p>尧教授讲到，智力主要分为流体智力与晶体智力。流体智力主要来源于遗传，25岁左右就会逐渐降低；而晶体智力主要通过学习获得，直到65岁左右才会下降。因此“学习改变人生”也不是没有道理，同时尧教授也希望同学们“活到老，学到老”。脑智是可以调控的，尧教授也为同学们分享了几个调控脑智的方法，包括音乐、学习、药物和物理干预。随后尧教授总结道：“生物智能的核心原理是大脑可塑性，而大脑是一个复杂的系统，我们可以通过多样的、内在的、外部的、局部的、全面的综合干预来调控脑智。但这样的干预离不开科学的把控，需要建立在评估的基础上，趋利避害，辩证统一。”</p><p>“收藏其实很简单”，樊馆长从人生中第一个藏品——自己幼儿园时期的成绩单讲起，围绕收藏的张张老照片，生动地向同学们介绍了自己波折、丰富又充满趣味的人生经历，以及最终是如何走向收藏、走向博物馆建设的道路。樊馆长回顾自己的人生经历时讲到，相比于“不想当将军的兵不是好兵”而言，他更倾向“不想当副班长的兵不是好兵”。他认为人确实要有“将军”的梦想，但更要有层次的设定目标，一步一个目标才能走得更成功。</p><p>“未来10年，将是世界经济新旧动能转换的关键10年”，于施洋教授以习近平总书记的讲话为引，提出了国家建设全国一体化的国家大数据中心的伟大目标。“东数西算”，正是在数据要素参与分配的大环境下，为促进东西部算力资源优势互补和数据资源汇聚流通而提出的大工程。于施洋用详实的数据，分析了算力在国家经济发展、企业运作中的重要作用，并提出数据、算力的大爆炸促进5G时代分布式人工智能体系发展的智能大爆炸的展望。</p><p>我们跟随谢云宁校友一起探索星海处的快捷星门，人类仰望太空之时，就注定我们将不再平凡，科幻是科学的翅膀，借助于它，我们平凡人也可以挣脱地心引力，在讲座的最后，谢云宁勉励同学们可以多读些科幻作品，多看点科幻电影，像哆啦A梦一般打开科幻世界的大门。同时他也希望科幻作品可以帮助同学们开阔视野，也为我们留下一个永远的心灵的慰藉。</p><p>最后希望自己也能像讲座的大咖一样，努力学习知识，将来好好报效祖国，回馈社会。</p>]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期前集训图论题解</title>
      <link href="/2022/05/07/%E6%9A%91%E6%9C%9F%E5%89%8D%E9%9B%86%E8%AE%AD%E5%9B%BE%E8%AE%BA%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/05/07/%E6%9A%91%E6%9C%9F%E5%89%8D%E9%9B%86%E8%AE%AD%E5%9B%BE%E8%AE%BA%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>把之前写的题解上传到博客上</p><h1 id="A题"><a href="#A题" class="headerlink" title="A题"></a><a href="http://121.48.165.90/contest/170/problem/A">A题</a></h1><h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>求全局最小割</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>Stoer_Wagner板题<br>Stoer_Wagner<br>每次在当前的无向图 G( V , E ) 中不断维护一个点集 A ,开始点集 A 包含一个任选的点 a . 当 A ≠ V 时选取属于V但不属于A且最大的点 v 加入点集 A ，直到 A=V 时结束。 此时令倒数第二次加入A的点为 s ，最后一次加入的点为 t ，则s-t最小割为割 ( A-{t} , {t} ) ，此时的全局最小割即为操作中的 s-t 最小割的最小值。 总的复杂度为$O((E+V)logV)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">550</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> edge[N][N], dist[N];<br><span class="hljs-type">bool</span> vis[N], bin[N];<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">contract</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;s, <span class="hljs-type">int</span> &amp;t)</span>                        </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(dist));<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    <br>    <span class="hljs-type">int</span> i, j, k, mincut, maxc;<br>    <br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>    &#123;<br>        k = <span class="hljs-number">-1</span>; maxc = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>; j &lt;= n; j ++)<span class="hljs-keyword">if</span>(!bin[j] &amp;&amp; !vis[j] &amp;&amp; dist[j] &gt; maxc)<br>        &#123;<br>            k = j;  maxc = dist[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> mincut;<br>        s = t;  t = k;<br>                mincut = maxc;<br>        vis[k] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>; j &lt;= n; j++)<span class="hljs-keyword">if</span>(!bin[j] &amp;&amp; !vis[j])<br>            dist[j] += edge[k][j];<br>    &#125;<br>    <span class="hljs-keyword">return</span> mincut;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Stoer_Wagner</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> mincut, i, j, s, t, ans;<br>    <span class="hljs-keyword">for</span>(mincut = inf, i = <span class="hljs-number">1</span>; i &lt; n; i ++ )<br>    &#123;<br>        ans = <span class="hljs-built_in">contract</span>(s, t);<br>                bin[t] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(mincut &gt; ans)mincut = ans;<br>        <span class="hljs-keyword">if</span>(mincut == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">1</span>; j &lt;= n; j++)<span class="hljs-keyword">if</span>(!bin[j])<br>            edge[s][j] = (edge[j][s] += edge[j][t]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> mincut;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(edge, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(edge));<br>    <span class="hljs-built_in">memset</span>(bin, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(bin));<br>    <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>        <span class="hljs-keyword">while</span> (m --)<br>        &#123;<br>            <span class="hljs-type">int</span> a, b, c;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>            edge[a][b] += c, edge[b][a] += c;<br>        &#125;<br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">Stoer_Wagner</span>());<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C题"><a href="#C题" class="headerlink" title="C题"></a><a href="http://121.48.165.90/contest/170/problem/C">C题</a></h1><p>双端队列+广度优先搜索<br>首先把电路板上每一个格子点(交叉点)看作无向图中的节点,我们认为两个节点x和y是某个小方格的两个对角,那么如果说x和y的线段’’,那么我们可以认为边权为0,反之如果x和y线段是’/’,那么我们的边权视为1,说明要旋转一次才能够连上.<br>现在我们得到了一张完美的边权0或1的无向图,那么和普通广搜一样,我们唯一的改变就是,如果说当前新状态的边权为0,那么我们就放到队头先走,因为我们要满足两端性和单调性,而为了这个单调性,如果说当前新状态边权为1,那么我们就只能压入到队尾.<br>具体小细节就看代码吧.hh</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><br><span class="hljs-type">char</span> g[N][N];<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">bool</span> st[N][N];<br><span class="hljs-type">int</span> d[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    deque&lt;PII&gt; q;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> d);<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> st);<br><br>    <span class="hljs-type">char</span> cs[<span class="hljs-number">5</span>] = <span class="hljs-string">&quot;\\/\\/&quot;</span>;<br>    <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br>    <span class="hljs-type">int</span> ix[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, iy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;;<br><br>    d[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push_front</span>(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop_front</span>();<br><br>        <span class="hljs-keyword">if</span> (t.x == n &amp;&amp; t.y == m) <span class="hljs-keyword">return</span> d[n][m];<br><br>        <span class="hljs-keyword">if</span> (st[t.x][t.y]) <span class="hljs-keyword">continue</span>;<br>        st[t.x][t.y] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> a = t.x + dx[i], b = t.y + dy[i];<br>            <span class="hljs-type">int</span> ca = t.x + ix[i], cb = t.y + iy[i];<br>            <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span> || a &gt; n || b &lt; <span class="hljs-number">0</span> || b &gt; m) <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-type">int</span> w = g[ca][cb] != cs[i];<br>            <span class="hljs-type">int</span> dist = d[t.x][t.y] + w;<br>            <span class="hljs-keyword">if</span> (dist &lt; d[a][b])<br>            &#123;<br>                d[a][b] = dist;<br>                <span class="hljs-keyword">if</span> (!w) q.<span class="hljs-built_in">push_front</span>(&#123;a, b&#125;);<br>                <span class="hljs-keyword">else</span> q.<span class="hljs-built_in">push_back</span>(&#123;a, b&#125;);<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, g[i]);<br><br>        <span class="hljs-keyword">if</span> (n + m &amp; <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO SOLUTION\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">bfs</span>());<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E题"><a href="#E题" class="headerlink" title="E题"></a><a href="http://121.48.165.90/contest/170/problem/E">E题</a></h1><h2 id="题意分析-1"><a href="#题意分析-1" class="headerlink" title="题意分析"></a>题意分析</h2><p>多次询问从1号节点到给定终点的简单路径上的最小点权  </p><h2 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h2><p>首先考虑如果图就是一棵树，显然此时路径唯一，因此只需dfs一遍即可。  然后我们可以发现，每个点到根的简单路径可能经过的点只可能是路径上点双上的点。因此我们可以考虑用tarjan算法求解点双，显然，在求完点双后，如果用点来代替点双，那么图就可以转化成树  因此我们可以离线询问，在转化后的树上直接dfs一遍即可求解。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-type">int</span> n, m, q, cnt;<br><span class="hljs-type">int</span> w[N * <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> dfn[N * <span class="hljs-number">2</span>], low[N], ts, stk[N], tp;<br><span class="hljs-type">int</span> idf[N * <span class="hljs-number">2</span>], f[N * <span class="hljs-number">2</span>], siz[N * <span class="hljs-number">2</span>], dep[N * <span class="hljs-number">2</span>], son[N * <span class="hljs-number">2</span>], top[N * <span class="hljs-number">2</span>], ans[N * <span class="hljs-number">2</span>];<br><span class="hljs-type">bool</span> st[N];<br><br>vector&lt;<span class="hljs-type">int</span>&gt; G[N], T[N * <span class="hljs-number">2</span>];<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    low[u] = dfn[u] = ++ ts;<br>    stk[++ tp] = u;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : G[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!dfn[v])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(v);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>            <br>            <span class="hljs-keyword">if</span> (low[v] == dfn[u])<br>            &#123;<br>                cnt ++ ;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x != v; -- tp)<br>                &#123;<br>                    x = stk[tp];<br>                    T[cnt].<span class="hljs-built_in">push_back</span>(x);<br>                    T[x].<span class="hljs-built_in">push_back</span>(cnt);<br>                   <span class="hljs-comment">// printf(&quot;    BCC #%d has vertex #%d\n&quot;, cnt - n, x);</span><br>                &#125;<br>                T[u].<span class="hljs-built_in">push_back</span>(cnt);<br>                T[cnt].<span class="hljs-built_in">push_back</span>(u);<br>                <span class="hljs-comment">//printf(&quot;    BCC #%d has vertex #%d\n&quot;, cnt - n, u);</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    ans[u] = <span class="hljs-built_in">min</span>(w[u], ans[fa]);<br>    <span class="hljs-comment">// cout &lt;&lt; &quot;u:&quot; &lt;&lt; u &lt;&lt; endl;</span><br>    st[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (u &gt; n)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : T[u])<br>            ans[u] = <span class="hljs-built_in">min</span>(w[x], ans[u]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : T[u])<br>        <span class="hljs-keyword">if</span> (!st[x])<br>            <span class="hljs-built_in">dfs</span>(x, u);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(w, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> w);<br>    <span class="hljs-built_in">memset</span>(ans, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> ans);<br>    <br>     <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);<br>     <br>     cnt = n;<br>     <br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++ )<br>     &#123;<br>         <span class="hljs-type">int</span> a, b;<br>         <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>         <span class="hljs-keyword">if</span> (a &gt; <span class="hljs-number">0</span> || b &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>         a = -a, b = -b;<br>         G[a].<span class="hljs-built_in">push_back</span>(b);<br>         G[b].<span class="hljs-built_in">push_back</span>(a);<br>     &#125;<br>     <br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br>     <br>     <span class="hljs-built_in">tarjan</span>(<span class="hljs-number">1</span>);<br>     <br>    <span class="hljs-comment">//  for (int i = 1; i &lt;= cnt; i ++ )</span><br>    <span class="hljs-comment">//     cout &lt;&lt; i &lt;&lt; &quot;:&quot; &lt;&lt; w[i] &lt;&lt; endl;</span><br>     <br>     <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>     <br>    <span class="hljs-comment">//   for (int i = 1; i &lt;= cnt; i ++ )</span><br>    <span class="hljs-comment">//     cout &lt;&lt; i &lt;&lt; &quot;:&quot; &lt;&lt; ans[i] &lt;&lt; endl;</span><br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[x]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="F题"><a href="#F题" class="headerlink" title="F题"></a><a href="http://121.48.165.90/contest/170/problem/F">F题</a></h1><h2 id="题意分析-2"><a href="#题意分析-2" class="headerlink" title="题意分析"></a>题意分析</h2><p>本题是一个差分约束的简单题<br>差分约束<br> 形如$x_i \leq x_j + c_k$的不等式组，假设我们存在 $j \xrightarrow{c} i$ 如果求得是最短路一定存在$dist_i \leq dist_j + c$, 我们在这个图上随便找一个起点，然后求一下每个点到起点的最短距离，每一个差分约束问题都等价于一个单源最短路问题，<br>差分约束：<br>步骤：<br> [1]首先将每个不等式$x_i \leq x_j + c_k$, 转换成一条从$x_j$走到$x_i$，长度为$c_k$的一条边<br>[2]找到一个超级源点，使得该源点一定可以遍历到所有边<br>[3]从源点求一遍单源最短路,注意如果在图中存在负环，说明方程矛盾,也就是不等式无解，等价于图中有负环<br>有负环，则方程无解，无负环则$dist_i$是方程组的一个解<br>如果是最长路,原方程$x_i \leq x_j + c_k$不等号方向改变变为$x_j \geq x_i - c_k$，$i \xrightarrow{-c} j$ 正环表示无解.</p><ol><li>可以求不等式组的可行解 源点需要满足的条件：从源点出发，一定可以走到所有的边</li><li>如何求最大值或者最小值<br>结论1：如果求的是最小值，则应该求最长路，如果求的是最大值，则应该求最短路。<br>求最值的时候一定会告诉我们一个绝对值<br>问题1：如何转化 $x_i \leq c$,其中c是一个常数，这类不等式<br>方法：建立一个超级源点，0，然后建立$0\xrightarrow{c} i$的边即可<br>以求$x_i$的最大值为例，所有从$x_i$出发构成的不等式链$x_i\leq x_j+c_1\leq x_k+c_1+c_2… \leq x_0(c_0)+c_1+c_2 … $所计算出的上界，最终$x_i$的最大值应该等于所有上界的最小值。我们可以发现每一条这样的不等式就是从$0 \to i$走过的最短路径<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2>构造不等式<br>$a_u\leq a_v+w$也就是形成$v\xRightarrow{w} u$边<br>$a_i\leq a_0(0)+w$<br>有前面的分析知，采用最短路，如果存在负环，则说明无解。<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e3</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">1e4</span> +<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], w[M], idx;<br><span class="hljs-type">int</span> dist[N], cnt[N], q[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">1</span>;<br>    dist[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    q[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (hh != tt)<br>    &#123;<br>        <span class="hljs-type">int</span> t = q[ -- tt];<br>        st[t] = <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (cnt[j] &gt;= n + <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                    q[tt ++ ] = j;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;b, &amp;a, &amp;c);<br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>, i, <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">spfa</span>()) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="I题"><a href="#I题" class="headerlink" title="I题"></a><a href="http://121.48.165.90/contest/170/problem/I">I题</a></h1><h2 id="题意分析-3"><a href="#题意分析-3" class="headerlink" title="题意分析"></a>题意分析</h2>本题是2-SAT算法的板题<br>2-SAT算法思想<br>一般的SAT算法为NP完全问题，但是对于2-SAT算法有比较好的解决方法。<br>我们采用图论的方法解决2-SAT问题，我们用$x_i$表示$x_i=1$ 用$\neg x_i$表示$x_i=0$<br>我们可以发现$a\to b \Leftrightarrow \neg a∪$b<br>所以我们可以将所有的条件表示为$ a∪b \Leftrightarrow \neg a\to b $我们将这些所有的推导关系，对应到我们图论中的边<br>对于每个命题，他会对应两个点我们会建立$x 和 \neg x$</li></ol><p>因此我们可以建立一个有向图，有向图里面的一个路径就代表我们的一个传递关系<br>下面我们讨论下何时无解，我们如果说从一个取值开始，如果$x_1\to … \to \neg x_1$ 并且$\neg x_1\to … \to x_1$,存在矛盾，此时一定无解。即如果$x_i与 \neg x_i$在同一个强连通分量中，则代表无解。<br>若任何一个上述条件不成立，是否一定有解，首先我们先来看一下如何判断第一个条件，我们可以用tarjan算法来做，然后看第二个问题，答案是一定有解，构造解的方式如下，我们可以枚举所有$x_i \neg x_i$,我们缩完点后，按照拓扑排序，我们直接看一下$x_i与 \neg x_i$在tarjan中的编号，谁更靠后，我们取哪个条件，这样的话就可以给出来一组解。</p><p>下面我们来证明一下这个构造方式的正确性</p><ol><li>我们给出的解每一个$x_i$只有一种值</li><li>对于每一个连通分量来说，如果我们选择了这个分量中的某个点，那必须选择该分量中的所有条件，如果我们选择了一个块，那么一定存在一个块与它里面的条件完全相反，因为$a\to b \Leftrightarrow \neg b \to \neg a$,原命题和逆否命题等价，我们不妨设一个块更靠后</li><li>a∪b一定成立，假设$\neg a $<br>意味着$\neg a$在后面一定取到b<br>所以一定满足<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> dfn[N], low[N], ts, stk[N], top;<br><span class="hljs-type">int</span> id[N], cnt;<br><span class="hljs-type">bool</span> ins[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[u] = low[u] = ++ ts;<br>    stk[ ++ top] = u, ins[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[j])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(j);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[j]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ins[j])<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[j]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (low[u] == dfn[u])<br>    &#123;<br>        cnt ++ ;<br>        <span class="hljs-type">int</span> y;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            y = stk[top -- ], id[y] = cnt, ins[y] = <span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-keyword">while</span> (y != u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> i, j, a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;i, &amp;a, &amp;j, &amp;b);<br>        i -- , j -- ;<br>        <span class="hljs-built_in">add</span>(i * <span class="hljs-number">2</span> + !a, j * <span class="hljs-number">2</span> + b);<br>        <span class="hljs-built_in">add</span>(j * <span class="hljs-number">2</span> + !b, i * <span class="hljs-number">2</span> + a);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span> * n; i ++ )<br>        <span class="hljs-keyword">if</span> (!dfn[i])<br>            <span class="hljs-built_in">tarjan</span>(i);<br>            <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        <span class="hljs-keyword">if</span> (id[i * <span class="hljs-number">2</span>] == id[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>])<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="J题"><a href="#J题" class="headerlink" title="J题"></a><a href="http://121.48.165.90/contest/170/problem/J">J题</a></h1><h2 id="题意分析-4"><a href="#题意分析-4" class="headerlink" title="题意分析"></a>题意分析</h2>tarjan板题<br>tarjan思想<br>Tarjan 算法是基于对图深度优先搜索的算法，每个强连通分量为搜索树中的一棵子树。搜索时，把当前搜索树中未处理的节点加入一个堆栈，回溯时可以判断栈顶到栈中的节点是否为一个强连通分量。</li></ol><ul><li>定义:<br>o DFN(u)为节点u 搜索的次序编号(时间戳);<br>o LOW(u)为u 或 u的子树能够追溯到的最早的栈中节点的次序号;<br>由定义可以得出，当 DFN(u)=LOW(u)时，以u为根的搜索子树上所有节点是一个强连通分量。</li><li>算法：</li></ul><ol><li>当首次搜索到点u时DFN[u]=LOW[u]=time;</li><li>每当搜索到一个点，把该点压入栈顶;</li><li>当u和v有边相连时:<br>1）如果v不在栈中（树枝边），DFS(v)，并且LOW[u] = min{LOW(u),LOW(v)};<br>2）如果v在栈中（前向边/后向边），此时LOW[u] = min{LOW[u],DFN[v]}</li><li>当DFN[u]=LOW[u]时，将它以及在它之上的元素弹出栈，此时，弹出栈的结点构成一个强连通分量;</li><li>继续搜索，知道图被遍历完毕。<br>由于在这个过程中每个点只被访问一次，每条边也只被访问一次，所以Tarjan算法的时间复杂度是O(n+m).<br>2.2. 算法伪代码</li></ol><h2 id="本题具体步骤"><a href="#本题具体步骤" class="headerlink" title="本题具体步骤"></a>本题具体步骤</h2><ol><li>建图。 </li><li>dfs过程中按dfs序（时间戳）更新dfn数组，同时初始的low数组为dfn. </li><li>当前dfs对象为a，枚举与a相连的点b。   如果b已经搜索过则更新low[a]为low[a]和dfn[b]里面的小值。   如果b未搜索过，则搜索b,然后更新low[a]为low[a]和low[b]里面的小值。同时判断当前点是否为割点（low[b]&gt;=dfn[a]），当前边是否为桥（low[b]&gt;dfn[a]）。 </li><li>维护一个栈，当扫描到割点时将栈中点弹出至b，并将这些点加入答案（割点不出栈但是统计至答案中）。 </li><li>则极大点双连通分量数量可由4统计出。 </li><li>极大点双连通分量包含边数的最大值则由每个极大点双统计。对于每个分量，枚举其中的点如果两点间有一条边则边数加1。 （注意，如果根节点只有一个儿子则不为割点） <h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>, M = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> dfn[N], low[N], timestamp, stk[N], top;<br><span class="hljs-type">bool</span> cut[N], is_bridge[M];<br><span class="hljs-type">int</span> dcc_cnt, bridge_cnt, cut_cnt;<br>vector&lt;<span class="hljs-type">int</span>&gt; dcc[N];<br><span class="hljs-type">int</span> root;<br><span class="hljs-type">int</span> g[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> from)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> son = <span class="hljs-number">0</span>;<br>    low[u] = dfn[u] = ++ timestamp;<br>    stk[ ++ top] = u;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (i == (from ^ <span class="hljs-number">1</span>)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (!dfn[j])<br>        &#123;<br>            son ++ ;<br>            <span class="hljs-built_in">tarjan</span>(j, i);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[j]);<br>            <span class="hljs-keyword">if</span> (low[j] &gt; dfn[u]) is_bridge[i] = <span class="hljs-literal">true</span>, is_bridge[i ^ <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (low[j] &gt;= dfn[u])<br>            &#123;<br>                dcc_cnt ++ ;<br>                <span class="hljs-type">int</span> y;<br>                <span class="hljs-keyword">do</span><br>                &#123;<br>                    y = stk[top -- ];<br>                    dcc[dcc_cnt].<span class="hljs-built_in">push_back</span>(y);<br>                &#125;<span class="hljs-keyword">while</span> (y != j);<br>                dcc[dcc_cnt].<span class="hljs-built_in">push_back</span>(u);<br>                <br>                <span class="hljs-keyword">if</span> ((u == root &amp;&amp; son &gt; <span class="hljs-number">1</span>) || (u != root &amp;&amp; low[j] &gt;= low[u]))<br>                    cut[u] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j != e[from])<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[j]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>        g[a][b] ++ ; g[b][a] ++ ;<br>    &#125;<br><br><br>    <span class="hljs-keyword">for</span> (root = <span class="hljs-number">1</span>; root &lt;= n; root ++ )<br>        <span class="hljs-keyword">if</span> (!dfn[root])<br>            <span class="hljs-built_in">tarjan</span>(root, <span class="hljs-number">-1</span>);<br>    <br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    timestamp = top = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (cut[i])<br>            cut_cnt ++ ;<br>            <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; idx; i = i + <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> (is_bridge[i])<br>            bridge_cnt ++ ;<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= dcc_cnt; k ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; dcc[k].<span class="hljs-built_in">size</span>(); i ++ )<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; dcc[k].<span class="hljs-built_in">size</span>(); j ++ )<br>                cnt += g[dcc[k][i]][dcc[k][j]];<br>        <br>            res = <span class="hljs-built_in">max</span>(res, cnt);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d\n&quot;</span>, cut_cnt, bridge_cnt, dcc_cnt, res);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="K题"><a href="#K题" class="headerlink" title="K题"></a><a href="http://121.48.165.90/contest/170/problem/K">K题</a></h1><h2 id="题意分析-5"><a href="#题意分析-5" class="headerlink" title="题意分析"></a>题意分析</h2>题意分析给定n个点，n-1条边，m个询问，询问两个节点之间的距离。<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2></li></ol><ul><li>无向图<h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2>因为任意两个节点相互连通，而且有n-1条边，所有该图是一个树，我们将1号点看为根节点，然后求最近公共祖先，答案res = depth[a] + depth[b] - 2 * depth[p]，其中p为最近公共祖先<br>最近公共祖先<br>在一个有根树书里面，每个节点会有好几个祖先，为了一般化，我们把这个节点自己也是自己的祖先<br>向上标记法$O(n)$<br>我们先从一个点开始往上走走到根节点，标记自己走过的点，然后另一个点开始向上走，直到第一个碰到被标记的点，该点即为最近公共祖先<br>倍增法 预处理$O(nlogn)$ 查询O(logn)<br>预处理fa[i,j]，从i开始，向上走$2^j$步所能走到的节点 $0\leq j \leq logn$,可以采用递推的方式来做<br>首先当j=0，f(i,j)=i的父节点<br>当j&gt;0时，先跳$2^{j-1}$步，然后再跳先跳$2^{j-1}$步<br>即f(i,j)=f(f(i, j-1),j -1)<br>depth[i]表示深度，我们可以规定根节点的深度为1，下一层为2，深度为到根节点的距离加一<br>哨兵:如果从i开始跳$2^j$步会跳过根节点，那么fa[i,j]=0,depth[0]=0<br>求最近公共祖先的分两步：<br>[1]先将两个点跳到同一层,基于类似二进制拼凑的方式，假设x比y要深，他们差depth[x]-depth[y],只要我跳$2^k$步能跳到y前面，我就跳，否则就不跳<br>[2]让两个点同时往上跳，一直跳到它们的最近公共祖先的下一层<br>预处理$O(nlogn)$ 查询O(logn)<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2</span> * N;<br><br><span class="hljs-type">int</span> n, m, root = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> depth[N], fa[N][<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> q[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(depth, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> depth);<br>    depth[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, depth[root] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>    q[<span class="hljs-number">0</span>] = root;<br>    <span class="hljs-keyword">while</span> (hh &lt;= tt)<br>    &#123;<br>        <span class="hljs-type">int</span> t = q[hh ++ ];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (depth[j] &gt; depth[t] + <span class="hljs-number">1</span>)<br>            &#123;<br>                depth[j] = depth[t] + <span class="hljs-number">1</span>;<br>                q[ ++ tt] = j;<br>                fa[j][<span class="hljs-number">0</span>] = t;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">19</span>; k ++ )<br>                    fa[j][k] = fa[fa[j][k - <span class="hljs-number">1</span>]][k - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (depth[a] &lt; depth[b]) <span class="hljs-built_in">swap</span>(a, b);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">19</span>; k &gt;= <span class="hljs-number">0</span>; k -- )<br>        <span class="hljs-keyword">if</span> (depth[fa[a][k]] &gt;= depth[b])<br>            a = fa[a][k];<br>            <br>    <span class="hljs-keyword">if</span> (a == b) <span class="hljs-keyword">return</span> a;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">19</span>; k &gt;= <span class="hljs-number">0</span>; k -- )<br>        <span class="hljs-keyword">if</span> (fa[a][k] != fa[b][k])<br>        &#123;<br>            a = fa[a][k];<br>            b = fa[b][k];<br>        &#125;<br>        <br>    <span class="hljs-keyword">return</span> fa[a][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n- <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <br>    <span class="hljs-built_in">bfs</span>();<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-type">int</span> p = <span class="hljs-built_in">lca</span>(a, b);<br>        <span class="hljs-type">int</span> res = depth[a] + depth[b] - <span class="hljs-number">2</span> * depth[p];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="L题"><a href="#L题" class="headerlink" title="L题"></a><a href="http://121.48.165.90/contest/170/problem/L">L题</a></h1><h2 id="题意分析-6"><a href="#题意分析-6" class="headerlink" title="题意分析"></a>题意分析</h2>比较裸露，求最小生成树计数<h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2>我们发现对于所有最小生成树，每种边权的边数是一样的。<br>那就可以首先找到最小生成树，然后枚举每种边权w，把其它边权，在生成树里的边加上，然后求有几种方案选出边权为w的边，把他们加上，使得得到了一棵树。<br>然后乘起来。<br>那么这个方案数就可以用Matrix-Tree定理计算。<br>矩阵求行列式，基本方法就是高斯消元。<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">105</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXM = <span class="hljs-number">1005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> P = <span class="hljs-number">10000</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> P1 = <span class="hljs-number">1000000007</span>;<br><span class="hljs-function">ll <span class="hljs-title">pwr</span><span class="hljs-params">(ll x, ll y)</span></span>&#123;<br>        x %= P1;<br>        y = (y % (P1 - <span class="hljs-number">1</span>) + (P1 - <span class="hljs-number">1</span>)) % (P1 - <span class="hljs-number">1</span>);<br>        ll ans = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (y)&#123;<br>                <span class="hljs-keyword">if</span> (y &amp; <span class="hljs-number">1</span>) ans = ans * x % P1;<br>                x = x * x % P1;<br>                y &gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>&#125; e[MAXM];<br><span class="hljs-type">int</span> p[MAXN];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fdrt</span><span class="hljs-params">(<span class="hljs-type">int</span> nw)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (p[nw] == nw) <span class="hljs-keyword">return</span> nw;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> p[nw] = <span class="hljs-built_in">fdrt</span>(p[nw]);<br>&#125;<br><span class="hljs-type">int</span> a[MAXM * <span class="hljs-number">2</span>], asz;<br><span class="hljs-type">int</span> b[MAXN][MAXN];<br><span class="hljs-type">int</span> pos[MAXN];<br><span class="hljs-function">ll <span class="hljs-title">getdet</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span></span>&#123;<br>        ll ans = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= len; j++)&#123;<br>                        <span class="hljs-keyword">if</span> (b[j][i])&#123;<br>                                <span class="hljs-built_in">swap</span>(b[i], b[j]);<br>                                ans = -ans;<br>                                <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= len; j++)&#123;<br>                        <span class="hljs-keyword">if</span> (i == j) <span class="hljs-keyword">continue</span>;<br>                        ll d = <span class="hljs-built_in">pwr</span>(b[i][i], <span class="hljs-number">-1</span>) * b[j][i] % P1;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= len; k++) b[j][k] = (b[j][k] - b[i][k] * d) % P1;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++) ans = ans * b[i][i] % P1;<br>        <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>        cin &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) cin &gt;&gt; e[i].u &gt;&gt; e[i].v &gt;&gt; e[i].w;<br>        <span class="hljs-built_in">sort</span>(e + <span class="hljs-number">1</span>, e + m + <span class="hljs-number">1</span>, [&amp;](Edge u, Edge v)&#123;<br>                <span class="hljs-keyword">return</span> u.w &lt; v.w;<br>        &#125;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) p[i] = i;<br>        ll ans = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)&#123;<br>                asz = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= m &amp;&amp; e[j].w == e[i].w; j++)&#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fdrt</span>(e[j].u) == <span class="hljs-built_in">fdrt</span>(e[j].v)) <span class="hljs-keyword">continue</span>;<br>                        a[++asz] = <span class="hljs-built_in">fdrt</span>(e[j].u);<br>                        a[++asz] = <span class="hljs-built_in">fdrt</span>(e[j].v);<br>                &#125;<br>                <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + asz + <span class="hljs-number">1</span>);<br>                asz = <span class="hljs-built_in">unique</span>(a + <span class="hljs-number">1</span>, a + asz + <span class="hljs-number">1</span>) - a - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u = <span class="hljs-number">1</span>; u &lt;= asz; u++)&#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">1</span>; v &lt;= asz; v++)&#123;<br>                                b[u][v] = <span class="hljs-number">0</span>;<br>                        &#125;<br>                &#125;<br>                <span class="hljs-comment">// cout &lt;&lt; &quot;asz &quot; &lt;&lt; asz &lt;&lt; &#x27;\n&#x27;;</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= m &amp;&amp; e[j].w == e[i].w; j++)&#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fdrt</span>(e[j].u) == <span class="hljs-built_in">fdrt</span>(e[j].v)) <span class="hljs-keyword">continue</span>;<br>                        <span class="hljs-type">int</span> u1 = <span class="hljs-built_in">lower_bound</span>(a + <span class="hljs-number">1</span>, a + asz + <span class="hljs-number">1</span>, <span class="hljs-built_in">fdrt</span>(e[j].u)) - a;<br>                        <span class="hljs-type">int</span> v1 = <span class="hljs-built_in">lower_bound</span>(a + <span class="hljs-number">1</span>, a + asz + <span class="hljs-number">1</span>, <span class="hljs-built_in">fdrt</span>(e[j].v)) - a;<br>                        <span class="hljs-built_in">assert</span>(u1 != v1);<br>                        b[u1][u1]++;<br>                        b[v1][v1]++;<br>                        b[u1][v1]--;<br>                        b[v1][u1]--;<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= m &amp;&amp; e[j].w == e[i].w; j++)&#123;<br>                        p[<span class="hljs-built_in">fdrt</span>(e[j].u)] = <span class="hljs-built_in">fdrt</span>(e[j].v);<br>                        i = j;<br>                &#125;<br>                <span class="hljs-type">int</span> lst = <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= asz; j++)&#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fdrt</span>(a[j]) != a[j]) <span class="hljs-keyword">continue</span>;<br>                        <span class="hljs-keyword">if</span> (lst != <span class="hljs-number">-1</span>)&#123;<br>                                b[lst][lst]++;<br>                                b[j][j]++;<br>                                b[lst][j]--;<br>                                b[j][lst]--;<br>                        &#125;<br>                        lst = j;<br>                &#125;<br><br>                ll nm = (<span class="hljs-built_in">getdet</span>(asz - <span class="hljs-number">1</span>) % P1 + P1) % P1;<br>                ans = ans * nm % P;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fdrt</span>(i) != <span class="hljs-built_in">fdrt</span>(<span class="hljs-number">1</span>)) ans = <span class="hljs-number">0</span>;<br>        cout &lt;&lt; (ans % P + P) % P &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="N题"><a href="#N题" class="headerlink" title="N题"></a><a href="http://121.48.165.90/contest/170/problem/N">N题</a></h1><h2 id="题意分析-7"><a href="#题意分析-7" class="headerlink" title="题意分析"></a>题意分析</h2>最小直径生成树<br>最小直径生成树<br>求解直径最小生成树，首先需要找到图的绝对中心，图的绝对中心可以存在于一条边上或某个结点上，该中心到所有点的最短距离的最大值最小。 到绝对中心距离最远的结点至少有两个。 令d(i,j)为(i,j)的最短路径长，跑个floyd。 图的绝对中心可能在某条边上，枚举每一条边w=(u,v)，假设图的绝对中心就在这条边上。那么距离 u 的长度为 x ，距离 v 的长度就是 w-x。 对于图中的任意一点 i ，图的绝对中心 c 到 i 的距离为 d(c,i)=min{ d(u,i)+x ,  d(v,i)+(w−x) }<br>随着图的绝对中心 c 在边上的改变会生成一个距离与 c 位置的函数图像。d(c,i)的函数图像是一个两条斜率相同的线段构成的折线段。<br>对于图上的任意一结点，图的绝对中心到最远距离结点的函数就写作  f=max{ d(c,i)}, i∈[1,n] 函数图像如下 并且这些折线交点中的最低点，横坐标就是图的绝对中心的位置。<br>记录 rk(i,j) 表示 i 到其他所有结点中第 j 小的那个结点。 对每条边分别处理 折线中的拐点最多有 n 个 把点按照 d(v,i) 从大到小依次枚举 记录 p 表示已经枚举的点中d(u,i)最大的 接下来枚举能产生新拐点当且仅当  d(u,i)&gt;d(u,p)  （因为已经按d(v,i)排过序了） 每个拐点都更新一次答案就好 总时间O(n^3) <h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>, M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> LL INF = <span class="hljs-number">1e16</span>;<br><br><span class="hljs-type">int</span> n, m;<br>LL d[N][N], val[N], rk[N][N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    LL w;<br>&#125;edges[M];<br>LL res = INF;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br>        <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> val[a] &lt; val[b];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">floyd</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>  &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) <br>    &#123;<br>      rk[i][j] = j;<br>      val[j] = d[i][j];<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(rk[i] + <span class="hljs-number">1</span>, rk[i] + <span class="hljs-number">1</span> + n, cmp);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) res = <span class="hljs-built_in">min</span>(res, d[i][rk[i][n]] * <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) <br>  &#123;<br>    <span class="hljs-type">int</span> u = edges[i].a, v = edges[i].b;<br>    LL w = edges[i].w;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = n, i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i -- ) <br>    &#123;<br>      <span class="hljs-keyword">if</span> (d[v][rk[u][i]] &gt; d[v][rk[u][p]]) <br>      &#123;<br>        res = <span class="hljs-built_in">min</span>(res, d[u][rk[u][i]] + d[v][rk[u][p]] + w);<br>        p = i;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (i != j) d[i][j] = INF;<br>            <span class="hljs-keyword">else</span> d[i][j] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        LL c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        edges[i] = &#123;a, b, c&#125;;<br>        d[a][b] = d[b][a] = c;<br>    &#125;<br>    <br>    <span class="hljs-built_in">solve</span>();<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="O题"><a href="#O题" class="headerlink" title="O题"></a><a href="http://121.48.165.90/contest/170/problem/O">O题</a></h1><h2 id="题意分析-8"><a href="#题意分析-8" class="headerlink" title="题意分析"></a>题意分析</h2>求起点到其他所有点的最短路<h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2></li><li>非负权值，有向道路<h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2>dijkstra算法板子题，采用堆优化方法$O(nlogm)$<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> y second</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-keyword">typedef</span> pair&lt;LL, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> LL INF = <span class="hljs-number">1e17</span>;<br><br><span class="hljs-type">int</span> n, m, S;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br>LL w[M];<br>LL dist[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, LL c)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) dist[i] = INF;<br>    dist[S] = <span class="hljs-number">0</span>;<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, S&#125;);<br>    <br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        PII t = heap.<span class="hljs-built_in">top</span>();<br>        heap.<span class="hljs-built_in">pop</span>();<br>        <br>        <span class="hljs-type">int</span> ver = t.y;<br>        <br>        <span class="hljs-keyword">if</span> (st[ver]) <span class="hljs-keyword">continue</span>;<br>        st[ver] = <span class="hljs-literal">true</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[ver]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[ver] + w[i])<br>            &#123;<br>                dist[j] = dist[ver] + w[i];<br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j], j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;S);<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        LL c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br>    <br>    <span class="hljs-built_in">dijkstra</span>();<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (dist[i] == INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, dist[i]);<br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="Q题"><a href="#Q题" class="headerlink" title="Q题"></a><a href="http://121.48.165.90/contest/170/problem/Q">Q题</a></h1><h2 id="题意分析-9"><a href="#题意分析-9" class="headerlink" title="题意分析"></a>题意分析</h2><p>有n个点排成一行，在第i,j 个点之间连边的代价为 |i-j| × D+Ai+Aj.求将它们连成一棵树的最小代价。<br>解题思路<br>如果这题的n&lt;=5000，那么我们就可以直接连边，然后跑一遍Prim算法便可获得答案。<br>先引入一个经典的性质：MST不可能包含一个环上的严格最大边。<br>考虑将所有点对半折开，左半部分和右半部分的建边分治处理，只考虑横跨两部分的建边。 若左半部分的点为j，右半部分的点为i。边权就可以转换成：（Ai + i × D) + (Aj - j × D)<br>既然 i 和 j 独立出来，那么只需要选出右半部分 min{Ai + i × D}所对应的i，选出左边半部分min{Aj  - j × D}所对应的j。 将 j与右半部分所有点连边，i同理。 那么这样就只有O(nlogn) 条边，然后用跑一遍最小生成树定理即可。</p><h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">4e6</span> + <span class="hljs-number">10</span>, N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> LL INF = <span class="hljs-number">1e17</span>;<br><br><span class="hljs-type">int</span> n, m, cnt;<br>LL lmin[N], rmin[N], D;<br><span class="hljs-type">int</span> p[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    LL w;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-type">const</span> Edge &amp;W)<span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> w &lt; W.w;<br>    &#125;<br>&#125;edges[M];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">merge</span>(l, mid); <span class="hljs-built_in">merge</span>(mid + <span class="hljs-number">1</span>, r);<br>    <br>    LL Lmin = INF, Rmin = INF;<br>    <span class="hljs-type">int</span> lid, rid;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= mid; i ++ )<br>        <span class="hljs-keyword">if</span> (Lmin &gt; lmin[i])<br>            Lmin = lmin[i], lid = i;<br>            <br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = mid + <span class="hljs-number">1</span>; i &lt;= r; i ++ )<br>        <span class="hljs-keyword">if</span> (Rmin &gt; rmin[i])<br>            Rmin = rmin[i], rid = i;<br>            <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= mid; i ++ )<br>        edges[cnt ++ ] = &#123;rid, i, Rmin + lmin[i]&#125;;<br>        <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = mid + <span class="hljs-number">1</span>; i &lt;= r; i ++ )<br>        edges[cnt ++ ] = &#123;lid, i, Lmin + rmin[i]&#125;;<br>        <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x != p[x]) p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lld&quot;</span>, &amp;n, &amp;D);<br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        LL a;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a);<br>        lmin[i] = (LL)a - i * D;<br>        rmin[i] = (LL)a + i * D;<br>    &#125;<br>    <br>    <span class="hljs-built_in">merge</span>(<span class="hljs-number">1</span>, n);<br>    <span class="hljs-built_in">sort</span>(edges, edges + cnt);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;<br><br>    LL res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a = edges[i].a, b = edges[i].b;<br>        LL w = edges[i].w;<br>        a = <span class="hljs-built_in">find</span>(a), b = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">if</span> (a != b)<br>        &#123;<br>            res += w;<br>            p[a] = b;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="R题"><a href="#R题" class="headerlink" title="R题"></a><a href="http://121.48.165.90/contest/170/problem/R">R题</a></h1><h2 id="最小有向树形图"><a href="#最小有向树形图" class="headerlink" title="最小有向树形图"></a>最小有向树形图</h2><p>1 无环<br>2 每个点入度为1<br>朱刘算法<br>1 贪心的从每个点的所有入边中找一条权值最小的边<br>2 从选出的边中判断是否存在环<br> 2.1 不存在环，结束，把所有边权值加上作为答案<br> 2.2 存在环，进入第3步<br>3 将所有环缩点，构造新图G’，缩点前把所有边权值加上<br> 3.1 环内的边 2-&gt;3 3-&gt;4 4-&gt;2<br> 删去<br> 3.2 终点在环内的边 1-&gt;4 1-&gt;2<br> 权值 w’ = w - 终点入边权值<br> w[1-&gt;4]’ = w[1-&gt;4] - w[3-&gt;4] = 5 - 1 = 4<br> w[1-&gt;2]’ = w[1-&gt;2] - w[4-&gt;2] = 4 - 2 = 2<br> 3.3 其他边 4-&gt;5<br> 不变<br>每次缩一次点,点数最少-1,所以总共最多迭代n次算法结束。</p><h2 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：</h2><p>首先有性质：<br> 1 环中的边一定至少要去掉一条边<br> 2 ⭐ 一定存在一个最优解，只去一条边<br> 假设去了两条环内边，则说明环内有两个点的入边权值变大<br> 3 缩点前和缩点后的树形图的最小权值相等—则要求G的最小权和==G’的最小权和<br> 任给G中的一个树形图一定能找到一种变换变换到对应的G’<br> 任给G’中的一个树形图一定能找到对应的G</p><h2 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">101</span>, M = <span class="hljs-number">10001</span>, INF = <span class="hljs-number">0x7fffffff</span>;<br><br><span class="hljs-type">int</span> n, m, s, u[M], v[M], w[M], id[N], pre[N], minw[N], src, idx;<br><span class="hljs-type">int</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">zhuliu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    w[<span class="hljs-number">0</span>] = INF;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(pre));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>            <span class="hljs-keyword">if</span>(u[i] != v[i] &amp;&amp; (!pre[v[i]] || minw[v[i]] &gt; w[i]))<br>            &#123;<br>                pre[v[i]] = u[i];<br>                minw[v[i]] = w[i];<br>            &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span>(i != s &amp;&amp; !pre[i])<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(id, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(id));<br>        <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>        vis[s] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span>(i != s)&#123;<br>                ret += minw[i];<br>                <span class="hljs-type">int</span> j = i;<br>                <span class="hljs-keyword">while</span>(!vis[j])&#123;<br>                    vis[j] = i;<br>                    j = pre[j];<br>                &#125;<br>                <span class="hljs-keyword">if</span>(j != s &amp;&amp; vis[j] == i)&#123;<br>                    id[j] = ++idx;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = pre[j]; k != j; k = pre[k])<br>                        id[k] = idx;<br>                &#125;<br>            &#125;<br>        <span class="hljs-keyword">if</span>(idx == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">if</span>(!id[i])<br>                id[i] = ++idx;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (id[u[i]] != id[v[i]])<br>                w[i] -= minw[v[i]];<br>            u[i] = id[u[i]], v[i] = id[v[i]];<br>        &#125;<br>        s = id[s];<br>        n = idx;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u[i], &amp;v[i], &amp;w[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-built_in">zhuliu</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="S题"><a href="#S题" class="headerlink" title="S题"></a><a href="http://121.48.165.90/contest/170/problem/S">S题</a></h1><h2 id="题意分析-10"><a href="#题意分析-10" class="headerlink" title="题意分析"></a>题意分析</h2><p>一般图最大匹配<br>带花树流程<br>我们给所有点黑白染色。假设开始增广的点是黑点。 把所有黑点压进队列中顺次处理。对于一个黑点u，找与他相邻的点v，会出现一下几种情况： 1、u,v已经被缩成一个点了（这两个点在一朵花里），不管他。 2、v是白点，说明已经被匹配了，也不管。 3、v还没有被染色。那就先把这个点染成白的，然后尝试去与他匹配。如果v还没有匹配就匹配上，增广成功，然后一路跳回取反。如果v已经被匹配了，那么匹配他的点就是个黑点，染色，然后压进队列。 4、v也是黑点。这时候染色发生了冲突，说明遇见了奇环。这时候就需要找到两个点的lca，然后把这整个环缩成一个点。美其名曰，开花。 </p><ol><li>找x和y的LCA（的根）p。找LCA可以用各种方法 直接朴素也行。 </li><li>在pre数组中把x和y接起来（表示它们形成环了！）</li><li>从x、y分别走到p，修改并查集使得它们都变成一家人，同时沿路把pre数组接起来 <h2 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">bool</span> e[N][N];<br><span class="hljs-type">int</span> p[N], pre[N], match[N], col[N];<br><span class="hljs-type">int</span> cnt, st[N];<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) <span class="hljs-keyword">return</span> p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">aug</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-keyword">while</span> (v) <span class="hljs-comment">// 修改增广路</span><br>    &#123;<br>        t = match[pre[v]];<br>        match[v] = pre[v];<br>        match[pre[v]] = v;<br>        v = t;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    cnt ++ ;<br>    u = <span class="hljs-built_in">find</span>(u);<br>    v = <span class="hljs-built_in">find</span>(v);<br>    <span class="hljs-keyword">while</span> (st[u] != cnt)<br>    &#123;<br>        st[u] = cnt;<br>        u = <span class="hljs-built_in">find</span>(pre[match[u]]);<br>        <span class="hljs-keyword">if</span> (v) <span class="hljs-built_in">swap</span>(u, v);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> u;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shrink</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">find</span>(u) != r)<br>    &#123;<br>        pre[u] = v;<br>        v = match[u];<br>        <span class="hljs-keyword">if</span> (col[v] == <span class="hljs-number">2</span>)<br>        &#123;<br>            col[v] = <span class="hljs-number">1</span>;<br>            q.<span class="hljs-built_in">push</span>(v);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(u) == u) p[u] = r;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(v) == v) p[v] = r;<br>        u = pre[v];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(col, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> col);<br>    <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> pre);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i;<br>    <br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) q.<span class="hljs-built_in">pop</span>();<br>    col[s] = <span class="hljs-number">1</span>, q.<span class="hljs-built_in">push</span>(s);<br>    <br>    <span class="hljs-type">int</span> u;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        u = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">1</span>; v &lt;= n; v ++ ) <span class="hljs-keyword">if</span> (e[u][v])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!col[v])<br>            &#123;<br>                pre[v] = u;<br>                <span class="hljs-keyword">if</span> (!match[v]) &#123;<span class="hljs-built_in">aug</span>(v);<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>                <span class="hljs-keyword">else</span>&#123;col[v] = <span class="hljs-number">2</span>;col[match[v]] = <span class="hljs-number">1</span>;q.<span class="hljs-built_in">push</span>(match[v]);&#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(u) == <span class="hljs-built_in">find</span>(v)) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (col[v] == <span class="hljs-number">1</span>)<br>                &#123;<br>                    <span class="hljs-type">int</span> r = <span class="hljs-built_in">lca</span>(u, v);<br>                    <span class="hljs-built_in">shrink</span>(u, v, r);<br>                    <span class="hljs-built_in">shrink</span>(v, u, r);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        e[a][b] = e[b][a] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (!match[i] &amp;&amp; <span class="hljs-built_in">bfs</span>(i))<br>            res ++ ;<br>            <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="T题"><a href="#T题" class="headerlink" title="T题"></a><a href="http://121.48.165.90/contest/170/problem/T">T题</a></h1><h2 id="题意分析-11"><a href="#题意分析-11" class="headerlink" title="题意分析"></a>题意分析</h2>给一张有向图，问从图中最少需要选出多少条互不相交的简单路径（不走重点的一条有向链），才能让图中的所有点都被这些路径经过一次？<h2 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h2>将本题转换成求二分图的最小路径覆盖<br>最小路径覆盖<br>最小路径覆盖<br>DAG(有向无环图)<br>用最少的互不相交的路径 将所有点覆盖<br>将所有点拆成两个点，出点和入点<br>原图有边i→j<br> 则有    i→j’<pre><code>  出点 入点</code></pre>原图变为从左边(出点)连向右边(入点)的二分图<br>则最少互不相交的路径=n-m(最大点覆盖数量)</li></ol><p>原图中的每条路径 转化到新图中<br>每个点最多只有一个出度一个入度<br>&lt;=&gt; 新图中的任意两条边之间不相交<br>&lt;=&gt; 新图中的边都是匹配边</p><p>每个路径终点 对应 一个左侧非匹配点(3作为终点 在新图中没出边)<br>&lt;=&gt; 让左侧非匹配点最少 n-m<br>&lt;=&gt; 让左侧匹配点最多 m<br>&lt;=&gt; 找最大匹配边数 m</p><h2 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">410</span>, M = <span class="hljs-number">6e4</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> match[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[j] == <span class="hljs-number">0</span> || <span class="hljs-built_in">find</span>(match[j]))<br>            &#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b + n);<br>    &#125;<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(i)) res ++ ;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n - res);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期前集训数据结构题解</title>
      <link href="/2022/05/07/%E6%9A%91%E6%9C%9F%E5%89%8D%E9%9B%86%E8%AE%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/05/07/%E6%9A%91%E6%9C%9F%E5%89%8D%E9%9B%86%E8%AE%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>还是有点菜，好多题没做，而且有点摆烂，下一个专题好好做，争取进前十</p><h1 id="B题"><a href="#B题" class="headerlink" title="B题"></a>B题</h1><h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>实现一个满足区间加，区间乘和区间求和的数据结构，区间长度最大$10^5$，操作次数最大$10^5$。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这个是一个朴素的线段数模板，要采用懒标记修改。<br>面对这两种操作，可以联想到线段树的一个非常好的功能就是lazytag，只计算出确实需要访问的区间的真实值，其他的保存在lazytag里面，这样可以近似O(NlogN)的运行起来。在尝试着写了只有一个lazetag的程序之后我们发现一个lazytag是不能够解决问题的，那就上两个，分别表示乘法意义上的lazytag和加法意义上的lazytag。紧接着想到pushdown操作之后我们又发现必须在向下传递lazytag的时候人为地为这两个lazytag规定一个先后顺序，排列组合一下只有两种情况：</p><p>①加法优先，即规定好segtree[root<em>2].value=((segtree[root</em>2].value+segtree[root].add)*segtree[root].mul)%p，问题是这样的话非常不容易进行更新操作，假如改变一下add的数值，mul也要联动变成奇奇怪怪的分数小数损失精度，我们内心是很拒绝的；</p><p>②乘法优先，即规定好segtree[root<em>2].value=(segtree[root</em>2].value<em>segtree[root].mul+segtree[root].add</em>(本区间长度))%p，这样的话假如改变add的数值就只改变add，改变mul的时候把add也对应的乘一下就可以了，没有精度损失，看起来很不错。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>, d = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>ll a[maxn], t[maxn * <span class="hljs-number">4</span>], add[maxn * <span class="hljs-number">4</span>], mul[maxn * <span class="hljs-number">4</span>];<br>ll n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">ls</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x &lt;&lt; <span class="hljs-number">1</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">rs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(ll p)</span></span>&#123;<br>t[p] = (t[<span class="hljs-built_in">ls</span>(p)] + t[<span class="hljs-built_in">rs</span>(p)]) % d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">f1</span><span class="hljs-params">(ll p, ll l, ll r, ll k)</span></span>&#123;<br>t[p] = (t[p] * k) % d;<br>add[p] = (add[p] * k) % d;<br>mul[p] = (mul[p] * k) % d;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">f2</span><span class="hljs-params">(ll p, ll l, ll r, ll k)</span></span>&#123;<br>t[p] = (t[p] + k * (r - l + <span class="hljs-number">1</span>)) % d;<br>add[p] = (add[p] + k) % d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(ll p, ll l, ll r)</span></span>&#123;<br>ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">f1</span>(<span class="hljs-built_in">ls</span>(p), l, mid, mul[p]);<br><span class="hljs-built_in">f2</span>(<span class="hljs-built_in">ls</span>(p), l, mid, add[p]);<br><span class="hljs-built_in">f1</span>(<span class="hljs-built_in">rs</span>(p), mid + <span class="hljs-number">1</span>, r, mul[p]);<br><span class="hljs-built_in">f2</span>(<span class="hljs-built_in">rs</span>(p), mid + <span class="hljs-number">1</span>, r, add[p]);<br>add[p] = <span class="hljs-number">0</span>;<br>mul[p] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(ll p, ll l, ll r)</span></span>&#123;<br>add[p] = <span class="hljs-number">0</span>;<br>mul[p] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(l == r)&#123;<br>t[p] = a[l];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(<span class="hljs-built_in">ls</span>(p), l, mid);<br><span class="hljs-built_in">build</span>(<span class="hljs-built_in">rs</span>(p), mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update1</span><span class="hljs-params">(ll L, ll R, ll l, ll r, ll p, ll k)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;<br><span class="hljs-built_in">f1</span>(p, l, r, k);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-built_in">push_down</span>(p, l, r);<br>ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(L &lt;= mid) <span class="hljs-built_in">update1</span>(L, R, l, mid, <span class="hljs-built_in">ls</span>(p) , k);<br><span class="hljs-keyword">if</span>(R &gt; mid) <span class="hljs-built_in">update1</span>(L, R, mid + <span class="hljs-number">1</span>, r, <span class="hljs-built_in">rs</span>(p), k);<br><span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update2</span><span class="hljs-params">(ll L, ll R, ll l, ll r, ll p, ll k)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;<br><span class="hljs-built_in">f2</span>(p, l, r, k);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-built_in">push_down</span>(p, l, r);<br>ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(L &lt;= mid) <span class="hljs-built_in">update2</span>(L, R, l, mid, <span class="hljs-built_in">ls</span>(p), k);<br><span class="hljs-keyword">if</span>(R &gt; mid) <span class="hljs-built_in">update2</span>(L, R, mid + <span class="hljs-number">1</span>, r, <span class="hljs-built_in">rs</span>(p), k);<br><span class="hljs-built_in">push_up</span>(p);<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll L, ll R, ll l, ll r, ll p)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="hljs-keyword">return</span> t[p];<br><span class="hljs-built_in">push_down</span>(p, l, r);<br>ll res = <span class="hljs-number">0</span>;<br>ll mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(L &lt;= mid) res += <span class="hljs-built_in">query</span>(L, R, l, mid, <span class="hljs-built_in">ls</span>(p));<br><span class="hljs-keyword">if</span>(R &gt; mid) res += <span class="hljs-built_in">query</span>(L, R, mid + <span class="hljs-number">1</span>, r, <span class="hljs-built_in">rs</span>(p));<br><span class="hljs-keyword">return</span> res % d;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ll op, x, y, k;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><span class="hljs-keyword">while</span>(m--)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;op);<br><span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;k);<br><span class="hljs-built_in">update1</span>(x, y, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, k);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;k);<br><span class="hljs-built_in">update2</span>(x, y, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, k);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(x, y, <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>));<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C题"><a href="#C题" class="headerlink" title="C题"></a>C题</h1><h2 id="题意分析-1"><a href="#题意分析-1" class="headerlink" title="题意分析"></a>题意分析</h2><p>待修改的主席树</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>思路是，把二分答案的操作和查询小于一个值的数的数量两种操作结合起来。最好的方法是使用 线段树套主席树。</p><p>说是主席树其实不准确，因为并不是对线段树的可持久化，各个线段树之间也没有像主席树各版本之间的强关联性，所以称为动态开点权值线段树更为确切。</p><p>思路类似于线段树套平衡树，即对于线段树所维护的每个区间，建立一个动态开点权值线段树，表示其所维护的区间的值。</p><p>在修改操作进行时，先在线段树上从上往下跳到被修改的点，删除所经过的点所指向的动态开点权值线段树上的原来的值，然后插入新的值，要经过$O(logn)$个线段树上的节点，在动态开点权值线段树上一次修改操作是$O(logn)$的，所以修改操作的时间复杂度为O(log^2n) 。</p><p>在查询答案时，先取出该区间覆盖在线段树上的所有点，然后用类似于静态区间k小值的方法，将这些点一起向左儿子或向右儿子跳。如果所有这些点左儿子存储的值大于等于k，则往左跳，否则往右跳。由于最多只能覆盖$O(logn)$个节点，所以最多一次只有这么多个节点向下跳，时间复杂度为$O(log^2n)$。</p><p>由于线段树的常数较大，在实现中往往使用常数更小且更方便处理前缀和的 树状数组 实现。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LC o &lt;&lt; 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RC o &lt;&lt; 1 | 1</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1000010</span>;<br><span class="hljs-type">int</span> n, m, a[maxn], u[maxn], x[maxn], l[maxn], r[maxn], k[maxn], cur, cur1, cur2,<br>    q1[maxn], q2[maxn], v[maxn];<br><span class="hljs-type">char</span> op[maxn];<br>set&lt;<span class="hljs-type">int</span>&gt; ST;<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">segment_tree</span>  <span class="hljs-comment">// 封装的动态开点权值线段树</span><br>&#123;<br>  <span class="hljs-type">int</span> cur, rt[maxn * <span class="hljs-number">4</span>], sum[maxn * <span class="hljs-number">60</span>], lc[maxn * <span class="hljs-number">60</span>], rc[maxn * <span class="hljs-number">60</span>];<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; o)</span> </span>&#123; o = ++cur; &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> o, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span> (!o) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (l == r &amp;&amp; sum[o]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, l);<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">print</span>(lc[o], l, mid);<br>    <span class="hljs-built_in">print</span>(rc[o], mid + <span class="hljs-number">1</span>, r);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; o, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span> (!o) o = ++cur;<br>    sum[o] += v;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid)<br>      <span class="hljs-built_in">update</span>(lc[o], l, mid, x, v);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">update</span>(rc[o], mid + <span class="hljs-number">1</span>, r, x, v);<br>  &#125;<br>&#125; st;<br><br><span class="hljs-comment">// 树状数组实现</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> o)</span> </span>&#123; <span class="hljs-keyword">return</span> (o &amp; (-o)); &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> o, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (; o &lt;= n; o += <span class="hljs-built_in">lowbit</span>(o)) st.<span class="hljs-built_in">update</span>(st.rt[o], <span class="hljs-number">1</span>, n, x, v);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">gtv</span><span class="hljs-params">(<span class="hljs-type">int</span> o, <span class="hljs-type">int</span>* A, <span class="hljs-type">int</span>&amp; p)</span> </span><br><span class="hljs-function"></span>&#123;<br>  p = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (; o; o -= <span class="hljs-built_in">lowbit</span>(o)) A[++p] = st.rt[o];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span> </span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> l;<br>  <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>, siz = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cur1; i++) siz += st.sum[st.lc[q1[i]]];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cur2; i++) siz -= st.sum[st.lc[q2[i]]];<br>  <span class="hljs-keyword">if</span> (siz &gt;= k) <br>  &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cur1; i++) q1[i] = st.lc[q1[i]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cur2; i++) q2[i] = st.lc[q2[i]];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(l, mid, k);<br>  &#125; <br>  <span class="hljs-keyword">else</span> <br>  &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cur1; i++) q1[i] = st.rc[q1[i]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cur2; i++) q2[i] = st.rc[q2[i]];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">qry</span>(mid + <span class="hljs-number">1</span>, r, k - siz);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>  <br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a + i), ST.<span class="hljs-built_in">insert</span>(a[i]);<br>  <br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) <br>  &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c&quot;</span>, op + i);<br>    <span class="hljs-keyword">if</span> (op[i] == <span class="hljs-string">&#x27;C&#x27;</span>)<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, u + i, x + i), ST.<span class="hljs-built_in">insert</span>(x[i]);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, l + i, r + i, k + i);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::iterator it = ST.<span class="hljs-built_in">begin</span>(); it != ST.<span class="hljs-built_in">end</span>(); it++)<br>    mp[*it] = ++cur, v[cur] = *it;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) a[i] = mp[a[i]];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    <span class="hljs-keyword">if</span> (op[i] == <span class="hljs-string">&#x27;C&#x27;</span>) x[i] = mp[x[i]];<br>  n += m;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">upd</span>(i, a[i], <span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) <br>  &#123;<br>    <span class="hljs-keyword">if</span> (op[i] == <span class="hljs-string">&#x27;C&#x27;</span>) <br>    &#123;<br>      <span class="hljs-built_in">upd</span>(u[i], a[u[i]], <span class="hljs-number">-1</span>);<br>      <span class="hljs-built_in">upd</span>(u[i], x[i], <span class="hljs-number">1</span>);<br>      a[u[i]] = x[i];<br>    &#125; <br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">gtv</span>(r[i], q1, cur1);<br>      <span class="hljs-built_in">gtv</span>(l[i] - <span class="hljs-number">1</span>, q2, cur2);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, v[<span class="hljs-built_in">qry</span>(<span class="hljs-number">1</span>, n, k[i])]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D题"><a href="#D题" class="headerlink" title="D题"></a>D题</h1><h2 id="题意分析-2"><a href="#题意分析-2" class="headerlink" title="题意分析"></a>题意分析</h2><p>平衡树裸题</p><h2 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h2><p>众所周知Treap = BST + heap</p><p>堆不多说了。</p><p>说说这个BST，就是说一个根节点p，左儿子一定小于他，右儿子大于它。</p><p>也就是BST的中序遍历是严格单调递增的。</p><p>那么就可以进行一些操作了。</p><p>首先为了维护这个BST我们需要一个左旋zag和右旋zig，分别表示将根节点和左右儿子交换位置，使交换后还满足BST的性质。</p><p>这个相当于一个模拟了，代码放在后面。</p><p>然后就是插入。</p><p>这个可以从根节点开始，看看往左儿子走还是往右儿子走，一直走到空或者和自己相等的节点，然后进行插入。</p><p>删除的话也是一样，从根节点走，走到了这个节点就删除掉，如果走到的节点为空，那就不用管了，因为这个节点不存在。</p><p>还有就是删除的时候如果遇到了叶节点可以直接删除，不会影响BST的性质。</p><p>接着就是几个奇怪的操作。</p><p>先说最大最小，就是一直往左走或者一直往右走。</p><p>然后是查排名和排名对应的数，一样的，排名可以一点点走，然后分类讨论，这个可以看代码注释。</p><p>排名对应的数也是一样，但这个得判断一下个数，所以BST里要有cnt和size两个变量表示节点个数和当前这个节点有多少个。</p><p>最后是前驱和后继，具体定义参见题目描述。</p><p>方法也是一样，前驱就是左边最大的，后继就是右边最小的，可以用递归写，会简单很多。</p><p>但是有的时候BST会退化成一条链，时间复杂度就大大降低了，但是只要BST够随机，期望高度就是log n。</p><p>所以的话就把它和堆集合在了一起，变成了平衡树。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">1e8</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-type">int</span> key, val;<br>    <span class="hljs-type">int</span> cnt, Size;<br>&#125;tr[N];<br><br><span class="hljs-type">int</span> root, idx;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[p].Size = tr[tr[p].l].Size + tr[tr[p].r].Size + tr[p].cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_node</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[ ++ idx].key = key;<br>    tr[idx].val = <span class="hljs-built_in">rand</span>();<br>    tr[idx].cnt = tr[idx].Size = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> idx;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">zig</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> q = tr[p].l;<br>    tr[p].l = tr[q].r, tr[q].r = p, p = q;<br>    <span class="hljs-built_in">pushup</span>(tr[p].r), <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">zag</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> q = tr[p].r;<br>    tr[p].r = tr[q].l, tr[q].l = p, p = q;<br>    <span class="hljs-built_in">pushup</span>(tr[p].l), <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">get_node</span>(-INF), <span class="hljs-built_in">get_node</span>(INF);<br>    root = <span class="hljs-number">1</span>, tr[root].r = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">pushup</span>(root);<br><br>    <span class="hljs-keyword">if</span> (tr[<span class="hljs-number">1</span>].val &lt; tr[<span class="hljs-number">2</span>].val) <span class="hljs-built_in">zag</span>(root);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;p, <span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) p = <span class="hljs-built_in">get_node</span>(key);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tr[p].key == key) tr[p].cnt ++ ;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tr[p].key &gt; key)<br>    &#123;<br>        <span class="hljs-built_in">insert</span>(tr[p].l, key);<br>        <span class="hljs-keyword">if</span> (tr[tr[p].l].val &gt; tr[p].val) <span class="hljs-built_in">zig</span>(p);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">insert</span>(tr[p].r, key);<br>        <span class="hljs-keyword">if</span> (tr[tr[p].r].val &gt; tr[p].val) <span class="hljs-built_in">zag</span>(p);<br>    &#125;<br><br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;p, <span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-keyword">if</span> (tr[p].key == key)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (tr[p].cnt &gt; <span class="hljs-number">1</span>) tr[p].cnt -- ;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tr[p].l || tr[p].r)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!tr[p].r || tr[tr[p].l].val &gt; tr[tr[p].r].val)<br>            &#123;<br>                <span class="hljs-built_in">zig</span>(p);<br>                <span class="hljs-built_in">remove</span>(tr[p].r, key);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">zag</span>(p);<br>                <span class="hljs-built_in">remove</span>(tr[p].l, key);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> p = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tr[p].key &gt; key) <span class="hljs-built_in">remove</span>(tr[p].l, key);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">remove</span>(tr[p].r, key);<br><br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_rank_by_key</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (tr[p].key == key) <span class="hljs-keyword">return</span> tr[tr[p].l].Size + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (tr[p].key &gt; key) <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_rank_by_key</span>(tr[p].l, key);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_rank_by_key</span>(tr[p].r, key) + tr[tr[p].l].Size + tr[p].cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_key_by_rank</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> rank)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) <span class="hljs-keyword">return</span> -INF;<br>    <span class="hljs-keyword">if</span> (tr[tr[p].l].Size &gt;= rank) <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_key_by_rank</span>(tr[p].l, rank);<br>    <span class="hljs-keyword">if</span> (tr[tr[p].l].Size + tr[p].cnt &gt;= rank) <span class="hljs-keyword">return</span> tr[p].key;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_key_by_rank</span>(tr[p].r, rank - tr[tr[p].l].Size - tr[p].cnt);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_prev</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) <span class="hljs-keyword">return</span> -INF;<br>    <span class="hljs-keyword">if</span> (tr[p].key &gt;= key) <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_prev</span>(tr[p].l, key);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(tr[p].key, <span class="hljs-built_in">get_prev</span>(tr[p].r, key));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_next</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> key)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!p) <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">if</span> (tr[p].key &lt;= key) <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_next</span>(tr[p].r, key);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(tr[p].key, <span class="hljs-built_in">get_next</span>(tr[p].l, key));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">build</span>();<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">while</span> (n -- )<br>    &#123;<br>        <span class="hljs-type">int</span> opt, x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;opt, &amp;x);<br>        <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">1</span>) <span class="hljs-built_in">insert</span>(root, x);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">2</span>) <span class="hljs-built_in">remove</span>(root, x);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">3</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">get_rank_by_key</span>(root, x) - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">4</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">get_key_by_rank</span>(root, x + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">5</span>) <br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">get_prev</span>(root, x);<br>            <span class="hljs-keyword">if</span> (t == -INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NOT FOUND&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">get_prev</span>(root, x));<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">get_next</span>(root, x);<br>            <span class="hljs-keyword">if</span> (t == INF) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NOT FOUND&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">get_next</span>(root, x));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E题"><a href="#E题" class="headerlink" title="E题"></a>E题</h1><h2 id="题意分析-3"><a href="#题意分析-3" class="headerlink" title="题意分析"></a>题意分析</h2><p>动态求逆序对</p><h2 id="解决思路-2"><a href="#解决思路-2" class="headerlink" title="解决思路"></a>解决思路</h2><p>可以用CDQ思路解决</p><p>CDQ分治能够快速的找出来三维偏序的问题,也就是对于一个n的序列，每个i有多少个j使得$a_j \leq a_i,$   $b_j  \leq b_i,$ $c_j  \leq c_i$</p><p>假设$a_i$ 不等于$a_j$</p><p>我们首先看一下一维版本我们将所有的元素按照第一关键字排序，对于i来说一共有i-1个j满足条件</p><p>然后看一下二维版本，将所有元素按照双关键字排序，也就是我们以a按照第一关键子排序，以b按照第二关键字排序，我们可以从前往后扫描，当我们扫描第i个元素的时候，所有满足要求的j一定在第i个元素前面，i前面的序列必然满足$a_j \leq a_i$，i的后面必然不满足，我们要做的是在前面i-1个元素中有多少个元素满足$b_j \leq b_i$</p><blockquote><p>双关键字排序的作用是对于i来说，满足要求的j一定是在i的前面，如果我们按照A来排，那么这个性质就不一定会成立。</p></blockquote><ul><li><p>我们可以用树状数组来做，我们可以将b离散化到1-n之间的数，但我们要求前面有多少个数小于等于$b_i$时，相当于求$b_i$的前缀和，然后我们求完后，将第i个元素插入到树状数组里面，将树状数组里面$b_i$这个位置加一。</p></li><li><p>我们也可以用分治做法来做，分治的话类似于归并排序求逆序对，我们现在想求的是对于当前区间，每一个i满足要求的j有多少个，我们可以将所有的i，j对分为3类（i在后，j在前）</p></li></ul><ol><li>i，j都在左侧 $\to$ 递归左边</li><li>i，j都在右侧 $\to$ 递归右边</li><li>i在右侧，j在左侧，因为一定满足第一维性质，所以我们只需要考虑第二维性质，我们需要找出$b_j \leq a_i$的个数，我们每次合并的时候，按照b进行维护序列，可以使用双指针算法，我们i和j从左往右枚举，每次i向后移动一格，j向后移动，找到大于$b_i$的位置<br>算法复杂度$O(nlogn)$</li></ol><p>最后讨论三维问题<br>对于每个i来说，我们都要求满足$a_j \leq a_i,$   $b_j  \leq b_i,$ $c_j  \leq c_i$的j的数目有多少。</p><p>我们的做法是按照三关键字排序，这样做的好处是，所有满足要求的j一定是在i的左侧</p><p>我们可以将所有<i, j> 分成三类 （i在j右边）</p><ol><li>i，j都在左侧</li><li>i，j都在右侧</li><li>i在左，j在右</li></ol><p>对于a条件来说这个限制一定成立，我们不用考虑，我们可以在归并分治的过程中，将区间的所有元素按照b进行排序，我们对于右侧任意一个元素i来说，我们要求的是在左侧有多少个j满足$b_j \leq b_i, c_j \leq c_i$ ,第二维限制我们可以用双指针算法来解决，对于每一个i我们找到第一个$b_j &gt; b_i$的位置（线性复杂度）那么从区间起点到j-1的位置就是满足$b_j \leq b_i$的区间，然后我们需要在这个区间里面找到$c_j \leq c_i$ 的个数，这个可以采用树状数组的方法来解决，我们可以把所有的c离散化，变成从1~n的某个数，我们要想求$c_j \leq c_i$ 的个数相当于求1-$c_i$的总和，即求前缀和，每一次j往后移动一格，相当于在树状数组里面加上$c_j$</p><p>时间复杂度为$O(nlog^2n)$,一共有$logn$层，每层复杂度为$nlogn$</p><p>如果出现$a_j = a_i,$   $b_j  = b_i,$ $c_j = c_i$,我们可以发现排完序后这两个数一定挨在一起，我们对于后面这个元素我们可以正确求解，但对于前面这个元素来讲，它只考虑它前面的元素，没有考虑右侧的部分，那么他就会把和他相等的元素漏掉，对于这样完全相同的元素，我们要进行判重，在序列中去除掉，再记录下每个元素出现了多少次。我们对于同一种元素我们还要更新下答案，如果有k个元素和第i个元素完全相同，那么答案还需要加上k</p><p>首先我们可以发现<br>$p_i$ i的下标</p><p>$A_i$ 元素的值</p><p>$T_i$ 表示元素i被删除的时间，定义删除的时序，如果没有被删我们任意给他分配一个后面的数，为了方便起见，只要有序就可以，我们可以倒着来分配，第一次删除的时候我们的时间戳是n，第二次是n-1，第m次删除的数位n-m+1，剩下的数按照某种顺序分配就可以，那这样的话，每一个数都会有一个唯一的时间戳，至于为什么要倒着分配，是因为你如果倒着来赋值的话，会发现第三维要满足的关系为$T_i \leq T_j$ 这是一个前缀和，如果正着赋值的话，会求一个后缀和，树状数组比较好处理前缀和。</p><p>然后我们考虑下怎么去统计答案，我们要统计的是每一次删除之前有多少个逆序对，因此我们统计的时候应该按照时间来看，我们要按照被删除的时间算答案，对于每一个时间戳$T_j$来说，我们要求和$T_j$可以构成逆序对的数目有多少个，我们把结果存到S[$T_j$]的数组里面，S[i]表示的是和第i个时间被删除的这个元素构成的逆序对的数量（只考虑$T_j$时刻仍然存在的元素）</p><p>我们规定每个数对（i，j），我们看一下那个数更后被删除我们就把这个数对累加到靠后删除的数对，这样不会导致逆序对被多算。</p><p>我们要求的是删除一个元素之前统计整个序列的逆序对数，相当于求两个数都在第i个时刻之后的部分的总数，这些数应该就是$S_1+S_2+…+S_i$也就是$S_i$的前缀和</p><p>现在问题就转换成如何求S[$T_j$]，我们看一下$T_j$的性质</p><ol><li>$T_i &lt; T_j$</li><li>第一种情况 $P_i &lt; P_j, A_i &gt; A_j$ 第二种情况 $P_j &lt; P_i, A_j &gt; A_i$</li></ol><p>因此我们要求两种偏序关系</p><ol><li>$T_i &lt; T_j, P_i &lt; P_j, A_i &gt; A_j$</li><li>$T_i &lt; T_j, P_j &lt; P_i, A_j &gt; A_i$</li></ol><p>然后本题可以把顺序倒过来处理。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span><br>&#123;<br>    <span class="hljs-type">int</span> a, t, res;<br>&#125;q[N], w[N];<br><span class="hljs-type">int</span> tr[N], pos[N];<br>LL ans[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt; N; i += <span class="hljs-built_in">lowbit</span>(i)) tr[i] += v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i)) res += tr[i];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">merge_sort</span>(l, mid), <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> i = mid, j = r;<br>    <span class="hljs-keyword">while</span> (i &gt;= l &amp;&amp; j &gt; mid)<br>        <span class="hljs-keyword">if</span> (q[i].a &gt; q[j].a) <span class="hljs-built_in">add</span>(q[i].t, <span class="hljs-number">1</span>), i -- ;<br>        <span class="hljs-keyword">else</span> q[j].res += <span class="hljs-built_in">query</span>(q[j].t - <span class="hljs-number">1</span>), j -- ;<br>    <span class="hljs-keyword">while</span> (j &gt; mid) q[j].res += <span class="hljs-built_in">query</span>(q[j].t - <span class="hljs-number">1</span>), j -- ;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i + <span class="hljs-number">1</span>; k &lt;= mid; k ++ ) <span class="hljs-built_in">add</span>(q[k].t, <span class="hljs-number">-1</span>);<br>    <br>    j = l, i = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (j &lt;= mid &amp;&amp; i &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i].a &lt; q[j].a) <span class="hljs-built_in">add</span>(q[i].t, <span class="hljs-number">1</span>), i ++ ;<br>        <span class="hljs-keyword">else</span> q[j].res += <span class="hljs-built_in">query</span>(q[j].t - <span class="hljs-number">1</span>), j ++ ;<br>    <span class="hljs-keyword">while</span> (j &lt;= mid) q[j].res += <span class="hljs-built_in">query</span>(q[j].t - <span class="hljs-number">1</span>), j ++ ;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = mid + <span class="hljs-number">1</span>; k &lt; i; k ++ ) <span class="hljs-built_in">add</span>(q[k].t, <span class="hljs-number">-1</span>);<br>    <br>    i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i].a &lt; q[j].a) w[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> w[k ++ ] = q[j ++ ];<br>    <br>    <span class="hljs-keyword">while</span> (i &lt;= mid) w[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= mid) w[k ++ ] = q[j ++ ];<br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; j &lt; k; j ++ , i ++ ) q[i] = w[j]; <br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    m = n;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i].a);<br>        pos[q[i].a] = i;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">1</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        q[pos[x]].t = j ++ ;<br>        pos[x] = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>            <br>    <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) ans[q[i].t] = q[i].res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ ) ans[i] += ans[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans[i]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="I题"><a href="#I题" class="headerlink" title="I题"></a>I题</h1><h2 id="题意分析-4"><a href="#题意分析-4" class="headerlink" title="题意分析"></a>题意分析</h2><p>并查集裸题</p><h2 id="解决思路-3"><a href="#解决思路-3" class="headerlink" title="解决思路"></a>解决思路</h2><p>~~ 势能分析没听懂，不管他了 ~~</p><p>要考虑并查集的优化，按秩合并，然后路径压缩就可以解决，比较简单，不再赘述。</p><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> getchar() (frS==frT&amp;&amp;(frT=(frS=frBB)+fread(frBB,1,1&lt;&lt;15,stdin),frS==frT)?EOF:*frS++)</span><br><span class="hljs-type">char</span> frBB[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">15</span>],*frS=frBB,*frT=frBB;<br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;x)</span></span>&#123;<br>    x=<span class="hljs-number">0</span>;<span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">isdigit</span>(c))c=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c))&#123;x=x*<span class="hljs-number">10</span>+c-<span class="hljs-string">&#x27;0&#x27;</span>;c=<span class="hljs-built_in">getchar</span>();&#125;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e6</span> + <span class="hljs-number">10</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> siz[N], p[N];<br><span class="hljs-type">int</span> ans[N], top;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x != p[x]) <span class="hljs-keyword">return</span> p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">read</span>(n); <span class="hljs-built_in">read</span>(m);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) p[i] = i, siz[i] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> op, a, b;<br>        <span class="hljs-built_in">read</span>(op); <span class="hljs-built_in">read</span>(a); <span class="hljs-built_in">read</span>(b);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) <br>        &#123;<br>            a = <span class="hljs-built_in">find</span>(a), b = <span class="hljs-built_in">find</span>(b);<br>            <span class="hljs-keyword">if</span> (siz[a] &gt; siz[b]) <span class="hljs-built_in">swap</span>(a, b);<br>            p[a] = b;<br>            siz[b] += siz[a];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b)) ans[ ++ top] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> ans[ ++ top] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">0</span>, a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = top; i &gt; <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ans[i]) res = (res + a) % mod;<br>        a = (a * <span class="hljs-number">2</span>) % mod;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="J题"><a href="#J题" class="headerlink" title="J题"></a>J题</h1><h2 id="题意分析-5"><a href="#题意分析-5" class="headerlink" title="题意分析"></a>题意分析</h2><p>有n个物品和n张钱，每个物品必须用面值不小于他的钱支付，可以修改k张钱面值，求最小的总支付面值</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>要使花的钱最少，即让每一次交易中，纸币面值与商品价值的差值之和最小。（贪心）<br>由此可推出以下两点：</p><ol><li>【贪心地购买】在不需要使用魔法的情况下，如何保证差值尽可能小？<ol><li>将$w_i,v_i$排序<br>由于</li><li>魔法改变纸币面值而商品价值固定（不会被操作打乱） </li><li>对于价值更高的商品，可能存在的能买下它的纸币数量更少。<br>因此 </li><li>对商品价值 从大到小枚举进行操作。</li></ol></li><li><p>答案是每次从能买得起 的纸币中挑选面值 最小的纸币</p></li><li><p>【贪心的魔法】如何更加高效地使用魔法？<br>如果要使用魔法，只会存在两种情况：买不起，小改大；钱太多，大改小<br>（优先”小改大“，保证尽量有解；”小改大“之后有剩余魔法才考虑”大改小“）</p><ol><li>如果想买下当前最贵的商品，需要把小纸币改大，则使用魔法之前不存在能买得起该商品的纸币，且一定刚好将某个小纸币改大到要买的商品的价值 。 此时不确定是对哪个小纸币使用魔法，但是由于纸币数量刚好和商品数量相同，如果有解，则在一一 枚举商品之后一定存在被挑剩下的小纸币（挑选方式后续说明）</li></ol></li><li>如果当前状态下不需要使用魔法把小纸币改大即可买下所有商品。</li></ol><p>用一个新数组记录每个对应关系中纸币面值与商品价值的差值。</p><p>后续将差值排序，取前k大的差值修改为零，即相当于将那k组对应关系中的大纸币改小到要买的商品的价值 。</p><ul><li>NIE的判断条件</li></ul><p>枚举到商品$v_i$时，<br>不存在买得起商品 的纸币，<br>且使用魔法的剩余次数为0</p><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> w[N], v[N], c[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> res;<br><span class="hljs-type">int</span> stk[N], top, cnt;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br>        <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v[i]);<br>        <br>    <span class="hljs-built_in">sort</span>(w + <span class="hljs-number">1</span>, w + n + <span class="hljs-number">1</span>, cmp);<br>    <span class="hljs-built_in">sort</span>(v + <span class="hljs-number">1</span>, v + n + <span class="hljs-number">1</span>, cmp);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">while</span> (w[j] &gt;= v[i])<br>        &#123;<br>            stk[ ++ top] = w[j];<br>            j ++ ;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!top)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NIE&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            m -- ;<br>            res += v[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> t = stk[top -- ];<br>            c[ ++ cnt] = t - v[i];<br>            res += t;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(c + <span class="hljs-number">1</span>, c + <span class="hljs-number">1</span> + cnt, cmp);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++ )<br>        res -= c[i];<br>        <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="K题"><a href="#K题" class="headerlink" title="K题"></a>K题</h1><h2 id="题意分析-6"><a href="#题意分析-6" class="headerlink" title="题意分析"></a>题意分析</h2><p>一个n*n的矩阵(1≤n≤500)，m(1≤m≤10^5)次操作，每次修改矩阵中的一个值或查询一个矩形中的最大值和最小值</p><h2 id="解决思路-4"><a href="#解决思路-4" class="headerlink" title="解决思路"></a>解决思路</h2><p>线段树可以维护一维的信息，通过线段树套线段树来维护二维的信息。</p><p>外层的线段树维护第一个维度上的信息，即第1到n行，对于每个节点各开一个内层线段树，这个线段树维护在外层线段树节点对应的行中1到n列的信息</p><p>注意单点修改时非叶子节点和叶子节点的更新方式不同，修改时现在外层线段树找到要修改的叶子节点，修改内层线段树，之后根据叶子结点的内层线段树修改外层非叶子节点的内层线段树</p><p>我们考虑用树套树如何实现在二维平面上进行单点修改，区域查询。我们考虑外层的线段树，最底层的1到n个节点的子树，分别代表第1 到第n行的线段树。那么这些底层的节点对应的父节点，就代表其两个子节点的子树所在的一片区域。</p><h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1510</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf=<span class="hljs-number">1e8</span>;<br> <br><span class="hljs-type">int</span> n,q,mx[N][N],mi[N][N];<br><span class="hljs-type">int</span> fg,xo,mians,mxans;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd2</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> o,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> v)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(fg) mi[xo][o]=v,mx[xo][o]=v;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            mi[xo][o]=<span class="hljs-built_in">min</span>(mi[<span class="hljs-number">2</span>*xo][o],mi[<span class="hljs-number">2</span>*xo+<span class="hljs-number">1</span>][o]);<br>            mx[xo][o]=<span class="hljs-built_in">max</span>(mx[<span class="hljs-number">2</span>*xo][o],mx[<span class="hljs-number">2</span>*xo+<span class="hljs-number">1</span>][o]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> m=(l+r)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(y&lt;=m) <span class="hljs-built_in">upd2</span>(l,m,<span class="hljs-number">2</span>*o,y,v);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">upd2</span>(m+<span class="hljs-number">1</span>,r,<span class="hljs-number">2</span>*o+<span class="hljs-number">1</span>,y,v);<br>    mi[xo][o]=<span class="hljs-built_in">min</span>(mi[xo][<span class="hljs-number">2</span>*o],mi[xo][<span class="hljs-number">2</span>*o+<span class="hljs-number">1</span>]);<br>    mx[xo][o]=<span class="hljs-built_in">max</span>(mx[xo][<span class="hljs-number">2</span>*o],mx[xo][<span class="hljs-number">2</span>*o+<span class="hljs-number">1</span>]);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upd1</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> o,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> v)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r) &#123;<br>        fg=<span class="hljs-number">1</span>;<br>        xo=o;<br>        <span class="hljs-built_in">upd2</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,y,v);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> m=(l+r)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(x&lt;=m) <span class="hljs-built_in">upd1</span>(l,m,<span class="hljs-number">2</span>*o,x,y,v);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">upd1</span>(m+<span class="hljs-number">1</span>,r,<span class="hljs-number">2</span>*o+<span class="hljs-number">1</span>,x,y,v);<br>    fg=<span class="hljs-number">0</span>,xo=o;<br>    <span class="hljs-built_in">upd2</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,y,v);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qy2</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> o,<span class="hljs-type">int</span> pre,<span class="hljs-type">int</span> ly,<span class="hljs-type">int</span> ry)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(ly&lt;=l&amp;&amp;ry&gt;=r) <br>    &#123;<br>        mians=<span class="hljs-built_in">min</span>(mians,mi[pre][o]);<br>        mxans=<span class="hljs-built_in">max</span>(mxans,mx[pre][o]);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> m=(l+r)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(ly&lt;=m) <span class="hljs-built_in">qy2</span>(l,m,<span class="hljs-number">2</span>*o,pre,ly,ry);<br>    <span class="hljs-keyword">if</span>(ry&gt;m) <span class="hljs-built_in">qy2</span>(m+<span class="hljs-number">1</span>,r,<span class="hljs-number">2</span>*o+<span class="hljs-number">1</span>,pre,ly,ry);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qy1</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> o,<span class="hljs-type">int</span> lx,<span class="hljs-type">int</span> rx,<span class="hljs-type">int</span> ly,<span class="hljs-type">int</span> ry)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(lx&lt;=l&amp;&amp;rx&gt;=r) <br>    &#123;<br>        <span class="hljs-built_in">qy2</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,o,ly,ry);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> m=(l+r)/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(lx&lt;=m) <span class="hljs-built_in">qy1</span>(l,m,<span class="hljs-number">2</span>*o,lx,rx,ly,ry);<br>    <span class="hljs-keyword">if</span>(rx&gt;m) <span class="hljs-built_in">qy1</span>(m+<span class="hljs-number">1</span>,r,<span class="hljs-number">2</span>*o+<span class="hljs-number">1</span>,lx,rx,ly,ry);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;v),<span class="hljs-built_in">upd1</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,i,j,v);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        <span class="hljs-type">int</span> op;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;op);<br>        <span class="hljs-type">int</span> x,y,x1,y1;<br>        <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>) <br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;x1,&amp;y1);<br>            mians=inf;<br>            mxans=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">qy1</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,x,x1,y,y1);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,mxans,mians);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;v);<br>            <span class="hljs-built_in">upd1</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,x,y,v);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="L题"><a href="#L题" class="headerlink" title="L题"></a>L题</h1><h2 id="题意分析-7"><a href="#题意分析-7" class="headerlink" title="题意分析"></a>题意分析</h2><p>求区间众数</p><h2 id="解决思路-5"><a href="#解决思路-5" class="headerlink" title="解决思路"></a>解决思路</h2><p>可以采用分块的思想</p><p>分块的思想其实就是一个朴素的暴力做法。<br>我们把一个区间分成$\sqrt{n}$段，对于查询的区间，我们可以将其分成最多两个不完整段（长度$\leq \sqrt{n}$）和不超过$\sqrt{n}$个完整段。因此我们可以把$O(N)$复杂度变为$O(logn)$</p><p>对于这个题首先预处理i~j块的众数个数，如果求出i~j-1的众数个数了，现在要求i~j的众数个数，是不是就很简单了，众数个数要么是i~j-1的众数个数，要么就是第j块中数字出现的次数，那么就可以枚举第j块的数字，如果我们预处理出前i块数字j出现的次数（定义为sum[i][j]）,那么第j块出现的数字a[p]（其中p处于第j块中）在i~j块出现的次数为sum[j][ a[p] ]-sum[i-1][ a[p] ]。并且sum数字的预处理很简单。</p><p>预处理完成后，就是查询问题，查询其实和预处理的原理是一样的，假设L属于第x块，R属于第y块，那么此区间的众数个数要么是x+1~y-1块的众数个数，要么是L~第x块结束中数字出现的次数，要么就是第y块开始~R中数字出现的次数，由于x+1~y-1块的众数个数已经处理，那么只需要O（1）即可知道，另外两块就可以直接暴力统计个数就行（这里需要注意只需要初始化这两块中出现的数字，这样初始化复杂度只有sqrt（n），初值应为sum[y-1][p]-sum[x][p]，p为块中出现的数字），另外注意处理L和R处于同一块的情况，这样区间众数问题就解决了。</p><h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> p, q , t, n, m;<br><span class="hljs-type">int</span> l, r, L, pos, lan;<br><span class="hljs-type">int</span> most[N],maxn[N],sum[<span class="hljs-number">1600</span>][N],a[N], b[<span class="hljs-number">100</span>],temp[N], c[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">discrete</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">sort</span>(c+<span class="hljs-number">1</span>,c+n+<span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> sz=<span class="hljs-built_in">unique</span>(c+<span class="hljs-number">1</span>,c+n+<span class="hljs-number">1</span>)-c<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) a[i]=<span class="hljs-built_in">lower_bound</span>(c+<span class="hljs-number">1</span>,c+sz+<span class="hljs-number">1</span>,a[i])-c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l&gt;r) <span class="hljs-built_in">swap</span>(l,r);<br><br>p=l/L;<br>q=r/L;<br><span class="hljs-keyword">if</span>(l % L == <span class="hljs-number">1</span>)<br>p++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l % L) p += <span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span> p++;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-keyword">if</span>(q-p&lt;<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-type">int</span> maxx=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)<br>&#123; <br>temp[a[i]]++;<br><span class="hljs-keyword">if</span>(temp[a[i]]&gt;maxx)<br>maxx=temp[a[i]],ans=a[i];<br><span class="hljs-keyword">if</span>(temp[a[i]]==maxx&amp;&amp;c[a[i]]&lt;c[ans])<br>ans=a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++) temp[a[i]]--;<br><br><span class="hljs-keyword">return</span> c[ans];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pos=b[p<span class="hljs-number">-1</span>] + q- p + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> maxx=maxn[pos];ans=most[pos];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = l;i &lt;= L*(p<span class="hljs-number">-1</span>); i++)<br>&#123;<br>sum[pos][a[i]]++;<br><span class="hljs-keyword">if</span>(sum[pos][a[i]]&gt;maxx)<br>maxx=sum[pos][a[i]],ans=a[i];<br><span class="hljs-keyword">if</span>(sum[pos][a[i]]==maxx&amp;&amp;c[a[i]]&lt;c[ans])<br>ans=a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L*q+<span class="hljs-number">1</span>;i&lt;=r;i++)<br>&#123;<br>sum[pos][a[i]]++;<br><span class="hljs-keyword">if</span>(sum[pos][a[i]]&gt;maxx)<br>maxx=sum[pos][a[i]],ans=a[i];<br><span class="hljs-keyword">if</span>(sum[pos][a[i]]==maxx&amp;&amp;c[a[i]]&lt;c[ans])<br>ans=a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=L*(p<span class="hljs-number">-1</span>);i++) sum[pos][a[i]]--;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L*q+<span class="hljs-number">1</span>;i&lt;=r;i++) sum[pos][a[i]]--;<br><br><span class="hljs-keyword">return</span> c[ans] ;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]),c[i]=a[i];<br><span class="hljs-built_in">discrete</span>();<br>t=<span class="hljs-built_in">pow</span>(<span class="hljs-number">1.0</span>*n,<span class="hljs-number">1.0</span>/<span class="hljs-number">3.0</span>);L=n/t;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++) b[i]=b[i<span class="hljs-number">-1</span>],b[i]+=t-i+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=t-i+<span class="hljs-number">1</span>;j++)<br>&#123;<br>pos=b[i<span class="hljs-number">-1</span>]+j;<br><span class="hljs-type">int</span> maxx=<span class="hljs-number">0</span>;<span class="hljs-type">int</span> ans;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=L*(i<span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>;k&lt;=L*(i+j<span class="hljs-number">-1</span>);k++)<br>&#123;<br>sum[pos][a[k]]++;<br><span class="hljs-keyword">if</span>(sum[pos][a[k]]&gt;maxx)<br>maxx=sum[pos][a[k]],ans=a[k];<br><br><span class="hljs-keyword">if</span>(sum[pos][a[k]]==maxx&amp;&amp;c[a[k]]&lt;c[ans])<br>ans=a[k];<br>&#125;<br>most[pos]=ans;maxn[pos]=maxx;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,lan=<span class="hljs-built_in">ask</span>(l,r));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="M题"><a href="#M题" class="headerlink" title="M题"></a>M题</h1><h2 id="题意分析-8"><a href="#题意分析-8" class="headerlink" title="题意分析"></a>题意分析</h2><p>给你一棵树有N个节点，这棵树的节点编号从 1 到 N。每个节点都有一个颜色。<br>要求你得到以下操作的答案：U V : 询问从 U 到 V 的路径上有多少个不同的颜色。</p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>可以使用树上莫队解决<br>这道题其实就是将基本莫队那道例题搬到了树上，求树中任意两个点之间最短路径的数字个数。对于在树上维护某些路径的信息，普遍的做法是将数转换成一个序列，此题用的是欧拉序列。</p><p>欧拉序列：</p><p>从根节点向下dfs，记录所有遇到的点，最终返回到根节点，故每个点都会在序列中出现两次。</p><p>观察上面的欧拉序列，我们可以发现这样几个性质，假设 X在欧拉序中出现地比 Y早：</p><p>如果 X是 Y 的祖先，那么从 X 到 Y 的路径上经过的节点为：欧拉序中 X 第一次出现的位置到 Y 第一次出现的位置的区间内只出现过一次的节点（如1到4）。<br>如果 X 和 Y 有一个公共祖先 $(P \not = X, P \not = Y)$  ，那么从 X 到 Y 的路径上经过的节点为：欧拉序列中 X 第二次出现的位置到 Y 第一次出现的位置的区间内所有只出现过一次的节点，另外再加上 P ，如（4到6经过的数字在欧拉序中为4236再加上祖先1）。<br>如此，我们就可以将树转换成一个序列，对于每次询问，先判断 X 是否为 Y 的祖先，然后将询问的两个节点转变为欧拉序列中对应的下标，然后用莫队维护欧拉序列即可。当然，如果 X 和 Y 有一个不同于他们的公共祖先，那么还得在维护完区间后再加上他们的公共祖先。</p><p>4.2 莫队的加数操作<br>需要注意的是，此题莫队需要维护的是区间内只出现过一次的节点对应的数字的种数，我们用  记录某个数字在区间内出现过几次，用 标记某个节点是否在询问的路径上（如果在欧拉序中对应的区间内只出现过一次则在路径上，记为1）。我们考虑在当前序列中加入一个节点，如果这个节点当前状态  ，说明此节点之前出现过一次，现在又出现了一次，则不存在于路径上，则更新 ，我们可以发现加入一个节点其实就是将该节点的  异或上1。更新完  后，如果  变为1了，说明有新节点加入路径，则将该节点对应的数字维护到  中，同时更新 ；如果  变为 0， 则删去该节点对应的数字，更新  ，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> &amp;res)</span> </span>&#123;<br>    sta[x] ^= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (sta[x]) &#123;<br>        <span class="hljs-keyword">if</span> (!cnt[w[x]]) res++;<br>        cnt[w[x]]++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cnt[w[x]]--;<br>        <span class="hljs-keyword">if</span> (!cnt[w[x]]) res--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>梳理一遍代码流程：</p><p>由于数字取值在  范围，所以首先进行离散化操作。<br>求出树的欧拉序列。<br>求出每个节点的深度，同时将倍增计算lca的预处理完成。<br>将每次询问的两个节点转换成欧拉序的左右端点。<br>莫队维护计算所有询问。</p><h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m, len;<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> h[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> depth[N], f[N][<span class="hljs-number">16</span>];<br><span class="hljs-type">int</span> seq[N], top, first[N], last[N];<br><span class="hljs-type">int</span> cnt[N], st[N], ans[N];<br><span class="hljs-type">int</span> que[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Query</span><br>&#123;<br>    <span class="hljs-type">int</span> id, l, r, p;<br>&#125;q[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; nums;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add_edge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> father)</span></span><br><span class="hljs-function"></span>&#123;<br>    seq[ ++ top] = u;<br>    first[u] = top;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (j != father) <span class="hljs-built_in">dfs</span>(j, u);<br>    &#125;<br>    seq[ ++ top] = u;<br>    last[u] = top;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(depth, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> depth);<br>    depth[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, depth[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">0</span>;<br>    que[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (hh &lt;= tt)<br>    &#123;<br>        <span class="hljs-type">int</span> t = que[hh ++ ];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (depth[j] &gt; depth[t] + <span class="hljs-number">1</span>)<br>            &#123;<br>                depth[j] = depth[t] + <span class="hljs-number">1</span>;<br>                f[j][<span class="hljs-number">0</span>] = t;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">15</span>; k ++ )<br>                    f[j][k] = f[f[j][k - <span class="hljs-number">1</span>]][k - <span class="hljs-number">1</span>];<br>                que[ ++ tt] = j;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (depth[a] &lt; depth[b]) <span class="hljs-built_in">swap</span>(a, b);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">15</span>; k &gt;= <span class="hljs-number">0</span>; k -- )<br>        <span class="hljs-keyword">if</span> (depth[f[a][k]] &gt;= depth[b])<br>            a = f[a][k];<br>    <span class="hljs-keyword">if</span> (a == b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">15</span>; k &gt;= <span class="hljs-number">0</span>; k -- )<br>        <span class="hljs-keyword">if</span> (f[a][k] != f[b][k])<br>        &#123;<br>            a = f[a][k];<br>            b = f[b][k];<br>        &#125;<br>    <span class="hljs-keyword">return</span> f[a][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x / len;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> Query&amp; a, <span class="hljs-type">const</span> Query&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-built_in">get</span>(a.l), j = <span class="hljs-built_in">get</span>(b.l);<br>    <span class="hljs-keyword">if</span> (i != j) <span class="hljs-keyword">return</span> i &lt; j;<br>    <span class="hljs-keyword">return</span> a.r &lt; b.r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span>&amp; res)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[x] ^= <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (st[x] == <span class="hljs-number">0</span>)<br>    &#123;<br>        cnt[w[x]] -- ;<br>        <span class="hljs-keyword">if</span> (!cnt[w[x]]) res -- ;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!cnt[w[x]]) res ++ ;<br>        cnt[w[x]] ++ ;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]), nums.<span class="hljs-built_in">push_back</span>(w[i]);<br>    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>    nums.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>()), nums.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        w[i] = <span class="hljs-built_in">lower_bound</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), w[i]) - nums.<span class="hljs-built_in">begin</span>();<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add_edge</span>(a, b), <span class="hljs-built_in">add_edge</span>(b, a);<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>    <span class="hljs-built_in">bfs</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-keyword">if</span> (first[a] &gt; first[b]) <span class="hljs-built_in">swap</span>(a, b);<br>        <span class="hljs-type">int</span> p = <span class="hljs-built_in">lca</span>(a, b);<br>        <span class="hljs-keyword">if</span> (a == p) q[i] = &#123;i, first[a], first[b]&#125;;<br>        <span class="hljs-keyword">else</span> q[i] = &#123;i, last[a], first[b], p&#125;;<br>    &#125;<br><br>    len = <span class="hljs-built_in">sqrt</span>(top);<br>    <span class="hljs-built_in">sort</span>(q, q + m, cmp);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, L = <span class="hljs-number">1</span>, R = <span class="hljs-number">0</span>, res = <span class="hljs-number">0</span>; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> id = q[i].id, l = q[i].l, r = q[i].r, p = q[i].p;<br>        <span class="hljs-keyword">while</span> (R &lt; r) <span class="hljs-built_in">add</span>(seq[ ++ R], res);<br>        <span class="hljs-keyword">while</span> (R &gt; r) <span class="hljs-built_in">add</span>(seq[R -- ], res);<br>        <span class="hljs-keyword">while</span> (L &lt; l) <span class="hljs-built_in">add</span>(seq[L ++ ], res);<br>        <span class="hljs-keyword">while</span> (L &gt; l) <span class="hljs-built_in">add</span>(seq[ -- L], res);<br>        <span class="hljs-keyword">if</span> (p) <span class="hljs-built_in">add</span>(p, res);<br>        ans[id] = res;<br>        <span class="hljs-keyword">if</span> (p) <span class="hljs-built_in">add</span>(p, res);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i ++ ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="N题"><a href="#N题" class="headerlink" title="N题"></a>N题</h1><h2 id="题意分析-9"><a href="#题意分析-9" class="headerlink" title="题意分析"></a>题意分析</h2><p>给定n(1≤n≤5×10^4)个元素， m(1≤m≤5×10^4)次操作，每次操作修改一个元素或查询一个区间上某个元素的排名或区间上第k小的值</p><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>线段树中的每个点表示一个区间，单独开一个平衡树存储这个区间内的点</li><li>修改操作：在外层线段树中查询要修改的节点（logn），对这个节点的内层平衡树做修改（logn）</li><li>排名查询：在外层线段树中将查询的区间拆开（ logn，最多有logn个 ），在内层平衡树中可以查询到比k小的元素个数（ logn ），加起来计算可以得到结果</li><li>第k小：排名查询+二分，复杂度（log^3n）</li></ol><h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2000010</span>, INF = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span><br>&#123;<br>    <span class="hljs-type">int</span> s[<span class="hljs-number">2</span>], p, v;<br>    <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> _v, <span class="hljs-type">int</span> _p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        v = _v, p = _p;<br>        size = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;tr[N];<br><span class="hljs-type">int</span> L[N], R[N], T[N], idx;<br><span class="hljs-type">int</span> w[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[x].size = tr[tr[x].s[<span class="hljs-number">0</span>]].size + tr[tr[x].s[<span class="hljs-number">1</span>]].size + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> y = tr[x].p, z = tr[y].p;<br>    <span class="hljs-type">int</span> k = tr[y].s[<span class="hljs-number">1</span>] == x;<br>    tr[z].s[tr[z].s[<span class="hljs-number">1</span>] == y] = x, tr[x].p = z;<br>    tr[y].s[k] = tr[x].s[k ^ <span class="hljs-number">1</span>], tr[tr[x].s[k ^ <span class="hljs-number">1</span>]].p = y;<br>    tr[x].s[k ^ <span class="hljs-number">1</span>] = y, tr[y].p = x;<br>    <span class="hljs-built_in">pushup</span>(y), <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; root, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (tr[x].p != k)<br>    &#123;<br>        <span class="hljs-type">int</span> y = tr[x].p, z = tr[y].p;<br>        <span class="hljs-keyword">if</span> (z != k)<br>            <span class="hljs-keyword">if</span> ((tr[y].s[<span class="hljs-number">1</span>] == x) ^ (tr[z].s[<span class="hljs-number">1</span>] == y)) <span class="hljs-built_in">rotate</span>(x);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">rotate</span>(y);<br>        <span class="hljs-built_in">rotate</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!k) root = x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; root, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> u = root, p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (u) p = u, u = tr[u].s[v &gt; tr[u].v];<br>    u = ++ idx;<br>    <span class="hljs-keyword">if</span> (p) tr[p].s[v &gt; tr[p].v] = u;<br>    tr[u].<span class="hljs-built_in">init</span>(v, p);<br>    <span class="hljs-built_in">splay</span>(root, u, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_k</span><span class="hljs-params">(<span class="hljs-type">int</span> root, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> u = root, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (u)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (tr[u].v &lt; v) res += tr[tr[u].s[<span class="hljs-number">0</span>]].size + <span class="hljs-number">1</span>, u = tr[u].s[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> u = tr[u].s[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; root, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> u = root;<br>    <span class="hljs-keyword">while</span> (u)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (tr[u].v == x) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (tr[u].v &lt; x) u = tr[u].s[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> u = tr[u].s[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-built_in">splay</span>(root, u, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> l = tr[u].s[<span class="hljs-number">0</span>], r = tr[u].s[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (tr[l].s[<span class="hljs-number">1</span>]) l = tr[l].s[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (tr[r].s[<span class="hljs-number">0</span>]) r = tr[r].s[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">splay</span>(root, l, <span class="hljs-number">0</span>), <span class="hljs-built_in">splay</span>(root, r, l);<br>    tr[r].s[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pushup</span>(r), <span class="hljs-built_in">pushup</span>(l);<br>    <span class="hljs-built_in">insert</span>(root, y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    L[u] = l, R[u] = r;<br>    <span class="hljs-built_in">insert</span>(T[u], -INF), <span class="hljs-built_in">insert</span>(T[u], INF);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i ++ ) <span class="hljs-built_in">insert</span>(T[u], w[i]);<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, mid), <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (L[u] &gt;= a &amp;&amp; R[u] &lt;= b) <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_k</span>(T[u], x) - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mid = L[u] + R[u] &gt;&gt; <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (a &lt;= mid) res += <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span>, a, b, x);<br>    <span class="hljs-keyword">if</span> (b &gt; mid) res += <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, a, b, x);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">update</span>(T[u], w[p], x);<br>    <span class="hljs-keyword">if</span> (L[u] == R[u]) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = L[u] + R[u] &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (p &lt;= mid) <span class="hljs-built_in">change</span>(u &lt;&lt; <span class="hljs-number">1</span>, p, x);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">change</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, p, x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_pre</span><span class="hljs-params">(<span class="hljs-type">int</span> root, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> u = root, res = -INF;<br>    <span class="hljs-keyword">while</span> (u)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (tr[u].v &lt; v) res = <span class="hljs-built_in">max</span>(res, tr[u].v), u = tr[u].s[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">else</span> u = tr[u].s[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_suc</span><span class="hljs-params">(<span class="hljs-type">int</span> root, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> u = root, res = INF;<br>    <span class="hljs-keyword">while</span> (u)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (tr[u].v &gt; v) res = <span class="hljs-built_in">min</span>(res, tr[u].v), u = tr[u].s[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> u = tr[u].s[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query_pre</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (L[u] &gt;= a &amp;&amp; R[u] &lt;= b) <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_pre</span>(T[u], x);<br>    <span class="hljs-type">int</span> mid = L[u] + R[u] &gt;&gt; <span class="hljs-number">1</span>, res = -INF;<br>    <span class="hljs-keyword">if</span> (a &lt;= mid) res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query_pre</span>(u &lt;&lt; <span class="hljs-number">1</span>, a, b, x));<br>    <span class="hljs-keyword">if</span> (b &gt; mid) res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query_pre</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, a, b, x));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query_suc</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (L[u] &gt;= a &amp;&amp; R[u] &lt;= b) <span class="hljs-keyword">return</span> <span class="hljs-built_in">get_suc</span>(T[u], x);<br>    <span class="hljs-type">int</span> mid = L[u] + R[u] &gt;&gt; <span class="hljs-number">1</span>, res = INF;<br>    <span class="hljs-keyword">if</span> (a &lt;= mid) res = <span class="hljs-built_in">min</span>(res, <span class="hljs-built_in">query_suc</span>(u &lt;&lt; <span class="hljs-number">1</span>, a, b, x));<br>    <span class="hljs-keyword">if</span> (b &gt; mid) res = <span class="hljs-built_in">min</span>(res, <span class="hljs-built_in">query_suc</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, a, b, x));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> op, a, b, x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;op);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;x);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, a, b, x));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;x);<br>            <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">1e8</span>;<br>            <span class="hljs-keyword">while</span> (l &lt; r)<br>            &#123;<br>                <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, a, b, mid) + <span class="hljs-number">1</span> &lt;= x) l = mid;<br>                <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, r);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;x);<br>            <span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>, a, x);<br>            w[a] = x;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Z题"><a href="#Z题" class="headerlink" title="Z题"></a>Z题</h1><h2 id="题意分析-10"><a href="#题意分析-10" class="headerlink" title="题意分析"></a>题意分析</h2><p>给定n(1≤n≤$10^6$)个元素，m(1≤m≤$10^5$)次操作，每次向里面的某个位置插入一个数或查询某一位置上的数</p><h2 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h2><p>采用块状链表解决</p><h2 id="块状链表"><a href="#块状链表" class="headerlink" title="块状链表"></a>块状链表</h2><p>把原来的序列分成若干块，每一块会用双向链表维护，每一段长度不定</p><ul><li>插入一段 $O(\sqrt(n))$ 首先分裂节点，然后在分裂点插入序列</li><li>删除一段 $O(\sqrt(n))$ 首先删除开头节点的后半部分，然后删除中间完整节点，最后删除结尾节点的前半部分</li><li>合并块状链表 遍历整个块状链表，若下一个点可以合并至当前点，则合并，该操作是保证时间复杂度的关键 $O(\sqrt(n))$</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><a href="https://www.acwing.com/problem/content/949/">例题</a></h2><h2 id="rope"><a href="#rope" class="headerlink" title="rope"></a>rope</h2><p>这里介绍下rope容器<br>Rope其主要是结合了链表和数组各自的优点，链表中的节点指向每个数据.<br>时间复杂度为$O(n \sqrt n)$可以在很短的时间内实现快速的插入、删除和查找字符串，是一个很厉害的神器！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ext/rope&gt;</span><span class="hljs-comment">///头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_cxx;<br>rope &lt;<span class="hljs-type">int</span>&gt; x;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    x.<span class="hljs-built_in">push_back</span>(x); <span class="hljs-comment">///在末尾加x</span><br>    x.<span class="hljs-built_in">insert</span>(pos, x); <span class="hljs-comment">///在pos位置加入x</span><br>    x.<span class="hljs-built_in">erase</span>(pos, x); <span class="hljs-comment">///从pos位置删除x个元素</span><br>    x.<span class="hljs-built_in">copy</span>(pos, len, x); <span class="hljs-comment">///从pos开始len个元素用x代替</span><br>    x.<span class="hljs-built_in">replace</span>(pos, x); <span class="hljs-comment">///从pos开始全部换为x</span><br>    x.<span class="hljs-built_in">substr</span>(pos, x); <span class="hljs-comment">///提取pos开始x个元素</span><br>    x.<span class="hljs-built_in">at</span>(x)/[x]; <span class="hljs-comment">///访问第x个元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ext/rope&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_cxx;<br><br>rope&lt;<span class="hljs-type">int</span>&gt; s;<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">output</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;S:&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : s)<br>        cout &lt;&lt; t &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        s.<span class="hljs-built_in">push_back</span>(x);<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">int</span> opt, k, pos;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;opt, &amp;k);<br>        <span class="hljs-keyword">if</span> (opt == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;pos);<br>            s.<span class="hljs-built_in">insert</span>(pos - <span class="hljs-number">1</span>, k);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, s.<span class="hljs-built_in">at</span>(k - <span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django框架学习</title>
      <link href="/2022/05/06/Django%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/06/Django%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web学习</title>
      <link href="/2022/05/06/Web%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/06/Web%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习</title>
      <link href="/2022/05/06/Linux%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/05/06/Linux%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2022/05/06/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2022/05/06/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线段树</title>
      <link href="/2022/05/06/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/05/06/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>斜率优化DP</title>
      <link href="/2022/05/06/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96DP/"/>
      <url>/2022/05/06/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96DP/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列优化DP</title>
      <link href="/2022/05/06/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/"/>
      <url>/2022/05/06/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数位DP</title>
      <link href="/2022/05/06/%E6%95%B0%E4%BD%8DDP/"/>
      <url>/2022/05/06/%E6%95%B0%E4%BD%8DDP/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形DP</title>
      <link href="/2022/05/06/%E6%A0%91%E5%BD%A2DP/"/>
      <url>/2022/05/06/%E6%A0%91%E5%BD%A2DP/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间DP</title>
      <link href="/2022/05/06/%E5%8C%BA%E9%97%B4DP/"/>
      <url>/2022/05/06/%E5%8C%BA%E9%97%B4DP/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态压缩DP</title>
      <link href="/2022/05/06/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/"/>
      <url>/2022/05/06/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态机模型</title>
      <link href="/2022/05/06/%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/05/06/%E7%8A%B6%E6%80%81%E6%9C%BA%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长上升子序列模型</title>
      <link href="/2022/05/06/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/05/06/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="怪盗基德的滑翔翼"><a href="#怪盗基德的滑翔翼" class="headerlink" title="怪盗基德的滑翔翼"></a><a href="https://www.acwing.com/problem/content/1019/">怪盗基德的滑翔翼</a></h1><h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>有n个楼房，怪盗基德可以任意选择一个楼房作为起点，可以向左滑行，也可以向右滑行，一旦方向确定就不能改变了，求最多滑行的建筑，即左右的最长下降子序列。</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_107a40dbce-1.png" alt="1.png"> </p><p>当确定完方向和起点后，最长的距离是什么呢？</p><p>假设起点是a[i]</p><pre><code>如果往左飞，最长距离是从1号点开始以a[i]的结尾的最长上升子序列如果往右飞，最长距离是从n号点开始以a[i]的结尾的最长上升子序列</code></pre><p>因此我们就可以把该问题转换成在两个方向上求解最长上升子序列模型的问题</p><p>时间复杂度$O(n^2)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n, res;<br><span class="hljs-type">int</span> f[N], a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; a[i];<br>        <br>        res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        &#123;<br>            f[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j ++ )<br>                <span class="hljs-keyword">if</span> (a[i] &gt; a[j])<br>                    f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br>                    <br>            res = <span class="hljs-built_in">max</span>(res, f[i]);<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i; i -- )<br>        &#123;<br>            f[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt; i; j -- )<br>                <span class="hljs-keyword">if</span> (a[i] &gt; a[j])<br>                    f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br>                    <br>            res = <span class="hljs-built_in">max</span>(res, f[i]);<br>        &#125;<br>        <br>        cout &lt;&lt; res &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="登山"><a href="#登山" class="headerlink" title="登山"></a><a href="https://www.acwing.com/problem/content/1016/">登山</a></h1><h2 id="题意分析-1"><a href="#题意分析-1" class="headerlink" title="题意分析"></a>题意分析</h2><p>条件1：要按照编号递增的顺序来浏览 $\to$ 子序列<br>条件2：相邻两个景点的高度不能相同<br>条件3：一旦开始下降，就不能上升 $\to$ 走过的路线必然是先严格单调上升再严格单调下降</p><p>目标：求最多浏览多少景点，求第k类最大长度</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_af49dd79ce-1.png" alt="1.png"> </p><p>因为左右两边互不相关，我们先让左边最大，而且右边最大，就可以让我们整个值取得最大值左边的最大值是从1号点开始以a[k]的结尾的最长上升子序列，右边的最大值是从n号点开始以a[k]的结尾的最长上升子序列</p><p>用f[i],g[i]分别维护从1，n号节点开始的最长上升子序列，res=max(f[i] + g[i] - 1)，减一是因为第i个节点算了两次。</p><p>时间复杂度$O(n^2)$</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n, res;<br><span class="hljs-type">int</span> f[N], g[N], a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; a[i];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j ++ )<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j])<br>                f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i; i -- )<br>    &#123;<br>        g[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt; i; j -- )<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j])<br>                g[i] = <span class="hljs-built_in">max</span>(g[i], g[j] + <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) res = <span class="hljs-built_in">max</span>(res, f[i] + g[i] - <span class="hljs-number">1</span>);<br>    <br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="合唱队形"><a href="#合唱队形" class="headerlink" title="合唱队形"></a><a href="https://www.acwing.com/problem/content/484/">合唱队形</a></h1><h2 id="题意分析-2"><a href="#题意分析-2" class="headerlink" title="题意分析"></a>题意分析</h2><p>和上面那个题本质一模一样</p><p>答案等于n-上面那个题求出的答案</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n, res;<br><span class="hljs-type">int</span> f[N], g[N], a[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; a[i];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j ++ )<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j])<br>                f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i; i -- )<br>    &#123;<br>        g[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt; i; j -- )<br>            <span class="hljs-keyword">if</span> (a[i] &gt; a[j])<br>                g[i] = <span class="hljs-built_in">max</span>(g[i], g[j] + <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ ) res = <span class="hljs-built_in">max</span>(res, f[i] + g[i] - <span class="hljs-number">1</span>);<br>    <br>    cout &lt;&lt; (n - res) &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="友好城市"><a href="#友好城市" class="headerlink" title="友好城市"></a><a href="https://www.acwing.com/problem/content/1014/">友好城市</a></h1><h2 id="题意分析-3"><a href="#题意分析-3" class="headerlink" title="题意分析"></a>题意分析</h2><p>有一条笔直的河流，河流的两侧有不同的城市，城市位置各不相同，一个城市只能连一条边，每个城市都会唯一的匹配一个城市，求最多选出多少互不相交的边。<br><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_b4006094ce-1.png" alt="1.png"> </p><p>条件1：每个城市上只能建立一座桥<br>条件2：所有的桥与桥之间互不相交</p><p>目标：可以建立多少桥？</p><p>对于任何一个合法的建桥方式，一定对应一个单调上升子序列，反过来，一个单调上升的子序列也对应着一个合法的建桥方式</p><p>我们的做法是先按照一个点排序，然后对另一个点做LIS问题即可。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> y second</span><br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5010</span>;<br><br><span class="hljs-type">int</span> n, res;<br>PII q[N];<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;  i &lt; n; i ++ ) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;q[i].x, &amp;q[i].y);<br>    <br>    <span class="hljs-built_in">sort</span>(q, q + n);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j ++ )<br>            <span class="hljs-keyword">if</span> (q[i].y &gt; q[j].y)<br>                f[i] = <span class="hljs-built_in">max</span>(f[i], f[j] + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 注意这里因为q[i].y不是有序的所以答案要在1~n的区间里面找      </span><br>        res = <span class="hljs-built_in">max</span>(res, f[i]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br># [拦截导弹](https://www.acwing.com/problem/content/1012/)<br>## 题意分析<br><br>## 代码<br>```CPP<br><br></code></pre></td></tr></table></figure><h1 id="导弹防御系统"><a href="#导弹防御系统" class="headerlink" title="导弹防御系统"></a><a href="https://www.acwing.com/problem/content/189/">导弹防御系统</a></h1><h2 id="题意分析-4"><a href="#题意分析-4" class="headerlink" title="题意分析"></a>题意分析</h2><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><br></code></pre></td></tr></table></figure><h1 id="最长公共上升子序列"><a href="#最长公共上升子序列" class="headerlink" title="最长公共上升子序列"></a><a href="https://www.acwing.com/problem/content/274/">最长公共上升子序列</a></h1><h2 id="题意分析-5"><a href="#题意分析-5" class="headerlink" title="题意分析"></a>题意分析</h2><h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字三角形模型</title>
      <link href="/2022/05/06/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/05/06/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="摘花生"><a href="#摘花生" class="headerlink" title="摘花生"></a><a href="https://www.acwing.com/problem/content/1017/">摘花生</a></h1><p>从集合角度考虑DP问题</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_b8a87768ce-1.png" alt="1.png"> </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> w[N][N], f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T -- )<br>    &#123;<br>        cin &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>             cin &gt;&gt; w[i][j];<br>             <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>]) + w[i][j];<br>                <br>        cout &lt;&lt; f[n][m] &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="最低通行费"><a href="#最低通行费" class="headerlink" title="最低通行费"></a><a href="https://www.acwing.com/problem/content/1020/">最低通行费</a></h1><p>2n - 1 步可以推出来不能走回头路，本质上这个题可以直接用摘花生的题目思路来做</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> w[N][N], f[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//这里要考虑边界问题，不能从i=0，j=0的地方走过去，要初始化一下</span><br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f);<br>    <br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            cin &gt;&gt; w[i][j];<br>    <br>    <span class="hljs-comment">//只有（1，1）点才可以从（0，1）走过来</span><br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            f[i][j] = <span class="hljs-built_in">min</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>]) + w[i][j];<br>            <br>    cout &lt;&lt; f[n][n] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方格取数"><a href="#方格取数" class="headerlink" title="方格取数"></a><a href="https://www.acwing.com/problem/content/1029/">方格取数</a></h1><h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>这个题是两次摘花生，但每个数只能摘一次</p><p>我们简单回顾一下摘花生的那个题<br>只走一次：</p><p>f[i,j]表示所有从(1,1)走到(i,j)路径上的最大值</p><p>f[i,j] = max(f[i-1,j],f[i,j-1])+w[i,j]</p><p>走两次：</p><p>f[i1,j1,i2,j2]表示所有从(1,1)(1,1)分别走到(i1,j1),(i2,j2)的路径的最大值</p><p>如何处理同一个格子不能被重复选择</p><p>只有在i1+j1==i2+j2时，两条路径的格子才可能重合</p><p>因此我们可以进行一个优化</p><p>f[k, i1, i2] 表示表示所有从(1,1)(1,1)分别走到(i1,k-i1),(i2,i-i2)的路径的最大值，k表示两条路线的横纵下标之和</p><p>从最后一步考虑，两条路线共有2*2=4种情况<br><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_37569210ce-1.png" alt="1.png"> </p><p>考虑第一种情况其他类似<br><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_6cb43315ce-2.png" alt="2.png"> </p><p>前面一部分有好多种途径它的数值刚好等于f(k-1,i1-1,i2-1),后面一部分要分情况考虑如果i1==i2，表示两个坐标重合那么就加上w[i1][k-i1]，否则加上w[i1][k-i1]+w[i1][k-i2]，然后在四种情况下求一个MAX</p><p>走过后不用删除格子里面的值，为什么？</p><p>因为你只有在k的那个时间点才有可能走到1号路径或者2号路径走到的格子，错过了，就不会做过去了。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> w[N][N], f[N][N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b &gt;&gt; c, a || b || c) w[a][b] = c;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">2</span> *n; k ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i1 = <span class="hljs-number">1</span>; i1 &lt;= n; i1 ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i2 = <span class="hljs-number">1</span>; i2 &lt;= n; i2 ++ )<br>            &#123;<br>                <span class="hljs-type">int</span> j1 = k - i1, j2 = k - i2;<br>                <span class="hljs-keyword">if</span> (j1 &gt;= <span class="hljs-number">1</span> &amp;&amp; j1 &lt;= n &amp;&amp; j2 &gt;= <span class="hljs-number">1</span> &amp;&amp; j2 &lt;= n)<br>                &#123;<br>                    <span class="hljs-type">int</span> &amp;x = f[k][i1][i2];<br>                    <span class="hljs-type">int</span> t;<br>                    <span class="hljs-keyword">if</span> (i1 == i2) t = w[i1][j1];<br>                    <span class="hljs-keyword">else</span> t = w[i1][j1] + w[i2][j2];<br>                    <br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2 - <span class="hljs-number">1</span>]);<br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1][i2 - <span class="hljs-number">1</span>]);<br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2]);<br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1][i2]);<br>                    x += t;<br>                &#125;<br>            &#125;<br>            <br>    cout &lt;&lt; f[<span class="hljs-number">2</span> * n][n][n] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="传纸条"><a href="#传纸条" class="headerlink" title="传纸条"></a><a href="acwing.com/problem/content/277/">传纸条</a></h1><h2 id="题意分析-1"><a href="#题意分析-1" class="headerlink" title="题意分析"></a>题意分析</h2><p>目标：</p><pre><code>集合：所有从左上走到右下，走两遍的方案属性：Max状态表示：状态表示有意义，状态计算好计算这个题和上面的题类似</code></pre><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_e3d78c55ce-1.png" alt="1.png"> </p><p>下面证明传纸条为何可以使用方格取数的代码   </p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>首先， 从右下角回传可以等价为从左上角同时传两次。要想两个路径除了起点和终点之外没有交点，那么肯定有一条路径完全位于另一条的上方。<br>现在考虑路径有交点的情况：</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_25473d19ce-2.png" alt="2.png"> </p><p>这种情况其实转换起来很简单，只要把位于红色线段上方的蓝色线段交换颜色就可以了，也就是说当红色处于蓝色的下方的时候，将红色的路径换成从蓝色的那段走是等效的（因为两条路径加起来经过的节点完全没有变）。</p><p>就可以得到：</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_28045a82ce-3.png" alt="3.png"> </p><p>但是这个时候虽然满足了红色路径完全在蓝色的上方，但是却有交点。但是因为所有节点的权值都为非负数，那么可以证明这种情况永远不可能是最优解。比如以交点（2，2）为例，蓝色从（3，1）绕道或者红色从（1，3）处绕道一定不会比两条路径都从（2，2）处走差。</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_2a6e4bbfce-4.png" alt="4.png"> </p><p>绕过交点之后，可以得到蓝色虚线的方案，该方案一定不会比之前的两个实线的方案更差。（当然该方案也不一定是最优的，还要确定应该由蓝色还是红色来走原来的交点的位置。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>不论是在 <code>方格取数</code> 中，还是在本题中，最优解永远不会由两段相交的路径组成。<br>那么代码中的相关位置的判断在事实上是起到了上述的确定是让蓝色还是红色走虚线的效果。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">60</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> w[N][N], f[<span class="hljs-number">2</span> * N][N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++ )<br>            cin &gt;&gt; w[i][j];<br>            <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">2</span>; k &lt;= n + m; k ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i1 = <span class="hljs-number">1</span>; i1 &lt;= n; i1 ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i2 = <span class="hljs-number">1</span>; i2 &lt;= n; i2 ++ )<br>            &#123;<br>                <span class="hljs-type">int</span> j1 = k - i1, j2 = k - i2;<br>                <span class="hljs-keyword">if</span> (j1 &gt;= <span class="hljs-number">1</span> &amp;&amp; j1 &lt;= m &amp;&amp; j2 &gt;= <span class="hljs-number">1</span> &amp;&amp; j2 &lt;= m)<br>                &#123;<br>                    <span class="hljs-type">int</span> t;<br>                    t = w[i1][j1];<br>                    <span class="hljs-keyword">if</span> (i1 != i2) t += w[i2][j2];<br>                    <span class="hljs-type">int</span> &amp;x = f[k][i1][i2];<br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2 - <span class="hljs-number">1</span>]);<br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1 - <span class="hljs-number">1</span>][i2]);<br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1][i2 - <span class="hljs-number">1</span>]);<br>                    x = <span class="hljs-built_in">max</span>(x, f[k - <span class="hljs-number">1</span>][i1][i2]);<br>                    x += t;<br>                &#125;<br>            &#125;<br>            <br>    cout &lt;&lt; f[n + m][n][n] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/2022/05/06/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2022/05/06/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="背包问题知识图谱"><a href="#背包问题知识图谱" class="headerlink" title="背包问题知识图谱"></a>背包问题知识图谱</h2><p><img src="https://cdn.acwing.com/media/article/image/2022/05/08/99310_40bb11a0ce-1.png" alt="1.png"> </p><h2 id="简单回顾"><a href="#简单回顾" class="headerlink" title="简单回顾"></a>简单回顾</h2><h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><p>每个物品只能选择1次,体积循环的时候要从大到小</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/16/99310_551c74ddd5-1.png" alt="1.png"><br><strong>集合划分</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/16/99310_5710e6bbd5-2.png" alt="2.png"> </p><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p>每个物品可以选无数次，这里s=j/w<br><img src="https://cdn.acwing.com/media/article/image/2022/05/16/99310_4f4c9198d5-4.png" alt="4.png"><br><strong>集合划分</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/16/99310_4ca7401ed5-3.png" alt="3.png"><br>我们如果直接这样做的话时间复杂度为$O(n^3)$ ,我们考虑从状态的表示中进行优化</p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/16/99310_cff80399d5-6.png" alt="6.png"> </p><p>我们发现被黄色框框起来的项非常的像，首先一一对应，每一个框内，都是上面一个参数比下面的多一个w</p><p>因此我们可以直接替换得到 f[i,j]=max(f[i-1,j],f[i,j-v]+w)</p><p><strong>当空间优化成1维之后，只有完全背包问题和单调队列优化多重背包问题的体积是从小到大循环的</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-keyword">for</span> 物品<br>    <span class="hljs-keyword">for</span> 体积<br>        <span class="hljs-keyword">for</span> 决策<br></code></pre></td></tr></table></figure><h3 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h3><p>每个物品可以选0~s[i]次<br><img src="https://cdn.acwing.com/media/article/image/2022/05/16/99310_4f4c9198d5-4.png" alt="4.png"><br><strong>集合划分</strong><br><img src="https://cdn.acwing.com/media/article/image/2022/05/16/99310_4ca7401ed5-3.png" alt="3.png">  </p><p><img src="https://cdn.acwing.com/media/article/image/2022/05/16/99310_f466c256d5-7.png" alt="7.png"> </p><p>首先每一个部分都是对应的，上面比下面多一个w，但是下面多了一项f[i-1,j-(s+1)w]+sw，我们知道整个集合的最大值，并不能知道下面黄框框里面的最大值，就比如最大值是最后一项，黄框框里面的最大值就不清楚，因为有这样一点，所以我们并不能像完全背包问题那样处理</p><p>但是好在天无绝人之路，我们往后多写几项，我们可以发现最大值可以由一个长度为s的窗口来求出，记得加上偏移量<br><img src="https://cdn.acwing.com/media/article/image/2022/05/16/99310_aa5fa894d5-8.png" alt="8.png"> </p>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫队算法</title>
      <link href="/2022/05/06/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/05/06/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>我们通过例题来学习莫队算法的思想</p><h1 id="基础莫队-HH的项链"><a href="#基础莫队-HH的项链" class="headerlink" title="基础莫队 HH的项链"></a><a href="https://www.acwing.com/problem/content/2494/">基础莫队 HH的项链</a></h1><h1 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h1><p>给我们一个长度为n的序列，序列里面每个数的范围是[0, 1e6]，有m个询问，询问序列中某一段当中不同数字的个数。</p><p>莫队主要来优化暴力做法，为了理解莫队是如何优化暴力的，我们来看一下如何用暴力处理这个题目。</p><p>对于每个区间，我们暴力去循环就可以了，我们开一个cnt数组，用来记录当前每个数出现多少次，最开始cnt数组全零，长度为1e6+1，我们从前往后扫描下要查询的区间，然后统计下cnt数组里面非零的数，这样做的时间复杂度为$O(mnS)$</p><p>但是有一个比较直接的优化，可以不用乘S，就是说我们可以边去扫描，边去处理有多少个数，我们统计次数的时候只统计第一次出现的次数，时间复杂度为$O(nm)$</p><p>然后我们看一下怎么继续优化，与双指针算法思想类似，我们先将所有的询问排一个序，假设我们询问的上一个区间是蓝色标记的区间，当前查询的区间为红色区间，我们通过增量式的算法通过前一段的信息，去算后一段的信息，假设我们已经求出来蓝色区间内部的信息，将其存到cnt数组里面，我们现在用两个指针指向蓝色区间的端点，首先我们先将i走到红色区间的右端，每次i往后走时，相当于我们需要再cnt数组里面加上一个新的数，如果我们在cnt里面加上一个数x，如果这个x没有出现过，那么cnt[x] + + , res + + ，反之cnt[x] + + ， res不变。我们可以用$O(1)$的时间维护好cnt数组和不同数的个数，第二次我们再将j这个指针一步步移到红色区间的左侧，那么每次j往后走的时候，相当于我们需要再cnt数组立案删掉一个数x，x的出现次数大于1，我们直接让cnt[x] - - ，res不变，x出现次数等于1，我们直接让cnt[x] ++ , res - -; 我们可以利用前一个区间，利用增量的形式来处理。<br><img src="https://cdn.acwing.com/media/article/image/2022/05/07/99310_2fc8c9d2cd-1.png" alt="1.png"></p><p>如果直接这样做的话，前一个区间移动到后一个区间时，最坏的情况下，我们两个指针要移动$O(n)$次，一共有m个询问，所以最坏的复杂度为$O(nm)$</p><p>我们看一下莫队算法如何去优化它，我可以调整一下查询的区间的顺序使得我们可以把时间复杂度变为$O(n\sqrt n)$</p><p>来讨论一下它的优化思路，如果说我们的某一列区间右端点递增，左端点无所谓，它右指针走的复杂度为$O(n)$，但两个指针不一定同时为$O(n)$，左指针可以用分块的方法来优化。</p><p>具体做法是我们让区间第一关键字时左端点分块所在的编号，按照左端点分块的编号来排，如果分块相同的话，按照右端点排序，如果分块不同的话，按照左端点所在的分块编号排序，相当于我们将所有的查询操作分成$\sqrt n$ 块，在每一块内部右端点递增，分析下时间复杂度为多少，右指针走的总数不会超过n，一共有$\sqrt n$块，所以右端点要走$n \sqrt n$步，考虑左端点，第一中情况是在块内移动，最多移动$\sqrt n$ $O(m \sqrt n)$, 第二种情况是不同块之间移动,最坏情况是 $2 \sqrt n$ $O(2n)$</p><p>莫队的玄学优化：奇数块块内按照右端点按照从小到大排，偶数块内按照右端点从大到小排。<br>前一次右端点从小到大滚，下一次就会从大到小滚，这样就会滚回来，但如果是都是从小到大排，前一次是从小到大滚，因为是增量算法，下一次就会先从大到小滚回来，然后在从小滚到到，因此这种处理方法会优化一定的复杂度。</p><p>然后是块的大小的计算，假设我们块的大小为a，那么右端点的复杂度大概为$\frac{n}{a} * n = \frac{n^2}{a}$, 左端点的复杂度大概为$am$ 有$\frac{n^2}{a} = am$ 解得 $a=\sqrt {\frac{n^2}{m}}$ </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDQ分治</title>
      <link href="/2022/05/06/CDQ%E5%88%86%E6%B2%BB/"/>
      <url>/2022/05/06/CDQ%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<p>CDQ分治能够快速的找出来三维偏序的问题,也就是对于一个n的序列，每个i有多少个j使得$a_j \leq a_i,$   $b_j  \leq b_i,$ $c_j  \leq c_i$</p><p>假设$a_i$ 不等于$a_j$</p><p>我们首先看一下一维版本我们将所有的元素按照第一关键字排序，对于i来说一共有i-1个j满足条件</p><p>然后看一下二维版本，将所有元素按照双关键字排序，也就是我们以a按照第一关键子排序，以b按照第二关键字排序，我们可以从前往后扫描，当我们扫描第i个元素的时候，所有满足要求的j一定在第i个元素前面，i前面的序列必然满足$a_j \leq a_i$，i的后面必然不满足，我们要做的是在前面i-1个元素中有多少个元素满足$b_j \leq b_i$</p><blockquote><p>双关键字排序的作用是对于i来说，满足要求的j一定是在i的前面，如果我们按照A来排，那么这个性质就不一定会成立。</p></blockquote><ul><li><p>我们可以用树状数组来做，我们可以将b离散化到1-n之间的数，但我们要求前面有多少个数小于等于$b_i$时，相当于求$b_i$的前缀和，然后我们求完后，将第i个元素插入到树状数组里面，将树状数组里面$b_i$这个位置加一。</p></li><li><p>我们也可以用分治做法来做，分治的话类似于归并排序求逆序对，我们现在想求的是对于当前区间，每一个i满足要求的j有多少个，我们可以将所有的i，j对分为3类（i在后，j在前）</p></li></ul><ol><li>i，j都在左侧 $\to$ 递归左边</li><li>i，j都在右侧 $\to$ 递归右边</li><li>i在右侧，j在左侧，因为一定满足第一维性质，所以我们只需要考虑第二维性质，我们需要找出$b_j \leq a_i$的个数，我们每次合并的时候，按照b进行维护序列，可以使用双指针算法，我们i和j从左往右枚举，每次i向后移动一格，j向后移动，找到大于$b_i$的位置<br>算法复杂度$O(nlogn)$</li></ol><p>最后讨论三维问题<br>对于每个i来说，我们都要求满足$a_j \leq a_i,$   $b_j  \leq b_i,$ $c_j  \leq c_i$的j的数目有多少。</p><p>我们的做法是按照三关键字排序，这样做的好处是，所有满足要求的j一定是在i的左侧</p><p>我们可以将所有<i, j> 分成三类 （i在j右边）</p><ol><li>i，j都在左侧</li><li>i，j都在右侧</li><li>i在左，j在右</li></ol><p>对于a条件来说这个限制一定成立，我们不用考虑，我们可以在归并分治的过程中，将区间的所有元素按照b进行排序，我们对于右侧任意一个元素i来说，我们要求的是在左侧有多少个j满足$b_j \leq b_i, c_j \leq c_i$ ,第二维限制我们可以用双指针算法来解决，对于每一个i我们找到第一个$b_j &gt; b_i$的位置（线性复杂度）那么从区间起点到j-1的位置就是满足$b_j \leq b_i$的区间，然后我们需要在这个区间里面找到$c_j \leq c_i$ 的个数，这个可以采用树状数组的方法来解决，我们可以把所有的c离散化，变成从1~n的某个数，我们要想求$c_j \leq c_i$ 的个数相当于求1-$c_i$的总和，即求前缀和，每一次j往后移动一格，相当于在树状数组里面加上$c_j$</p><p>时间复杂度为$O(nlog^2n)$,一共有$logn$层，每层复杂度为$nlogn$</p><p>如果出现$a_j = a_i,$   $b_j  = b_i,$ $c_j = c_i$,我们可以发现排完序后这两个数一定挨在一起，我们对于后面这个元素我们可以正确求解，但对于前面这个元素来讲，它只考虑它前面的元素，没有考虑右侧的部分，那么他就会把和他相等的元素漏掉，对于这样完全相同的元素，我们要进行判重，在序列中去除掉，再记录下每个元素出现了多少次。我们对于同一种元素我们还要更新下答案，如果有k个元素和第i个元素完全相同，那么答案还需要加上k</p><h1 id="例题1-三维偏序"><a href="#例题1-三维偏序" class="headerlink" title="例题1 三维偏序"></a><a href="https://www.acwing.com/problem/content/2817/">例题1 三维偏序</a></h1><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, c, s, res;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Data&amp;t) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (a != t.a) <span class="hljs-keyword">return</span> a &lt; t.a;<br>        <span class="hljs-keyword">if</span> (b != t.b) <span class="hljs-keyword">return</span> b &lt; t.b;<br>        <span class="hljs-keyword">return</span> c &lt; t.c;<br>    &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> == (<span class="hljs-type">const</span> Data&amp;t) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> a == t.a &amp;&amp; b == t.b &amp;&amp; c == t.c;<br>    &#125;<br>&#125;q[N], w[N];<br><span class="hljs-type">int</span> tr[M], ans[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt; M; i += <span class="hljs-built_in">lowbit</span>(i)) tr[i] += v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i)) res += tr[i];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">merge_sort</span>(l, mid), <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);<br>    <br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i].b &lt;= q[j].b) <span class="hljs-built_in">add</span>(q[i].c, q[i].s), w[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> q[j].res += <span class="hljs-built_in">query</span>(q[j].c), w[k ++ ] = q[j ++ ];<br>        <br>    <span class="hljs-keyword">while</span> (i &lt;= mid) <span class="hljs-built_in">add</span>(q[i].c, q[i].s), w[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) q[j].res += <span class="hljs-built_in">query</span>(q[j].c), w[k ++ ] = q[j ++ ];<br>    <br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= mid; i ++ ) <span class="hljs-built_in">add</span>(q[i].c, -q[i].s);<br>    <br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; j &lt; k; i ++ , j ++ ) q[i] = w[j];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        q[i] = &#123;a, b, c, <span class="hljs-number">1</span>&#125;;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(q, q + n);<br>    <br>    <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<span class="hljs-comment">//q[0]直接入队，k从0开始</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i ++ )<br>        <span class="hljs-keyword">if</span> (q[i] == q[k - <span class="hljs-number">1</span>]) q[k - <span class="hljs-number">1</span>].s ++ ;<br>        <span class="hljs-keyword">else</span> q[k ++ ] = q[i];<br>        <br>    <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k ; i ++ )<br>        ans[q[i].res + q[i].s - <span class="hljs-number">1</span>] += q[i].s;<br>        <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="例题2-老C的任务"><a href="#例题2-老C的任务" class="headerlink" title="例题2 老C的任务"></a><a href="https://www.acwing.com/problem/content/2849/">例题2 老C的任务</a></h1><h1 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h1><p>在一个城市里面有很多的点，每个点有一个权值，每次询问给我们一个一个矩形，问我们矩形内部的所有点权值和为多少<br><img src="https://cdn.acwing.com/media/article/image/2022/05/06/99310_83499672cd-1.png" alt="1.png"> </p><p>我们可以用二维前缀和来求矩阵内部的权值和，对于每个点来说，我们要求一下这个点左下方所有点的权值和，只要我们可以求出这个权值和，那么我们就可以利用二维前缀和求出前缀和，此外我们要区分一下标记点和查询点，标记点我们标记为0，查询点我们标记为1。每个点的坐标为$(x_i,y_i,z_i)$ 其中$z_i \in {1, 0}$</p><p>那么问题就转换程对于每个i求$x_j \leq x_i y_j \leq y_i z_j \leq z_i$的所有点的权值和，所以该问题就可以转换为CQD分治，分析本题的z值比较特殊，我们求小于等于某个数的个数需要使用树状数组，但这个里面，z要么取0，要么取1，那我们每一次相当于求$z_i=0$的点的权值和，我们可以直接用sum来维护$z_i=0$的点的权值和<br>因为不需要使用树状数组所以时间复杂度为$O(nlogn)$</p><h1 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, z, p, id, sign;<br>    LL sum;<br>    <br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> Data&amp; t)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (x != t.x) <span class="hljs-keyword">return</span> x &lt; t.x;<br>        <span class="hljs-keyword">if</span> (y != t.y) <span class="hljs-keyword">return</span> y &lt; t.y;<br>        <span class="hljs-keyword">return</span> z &lt; t.z;<br>    &#125;<br>&#125;q[N], w[N];<br>LL ans[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">merge_sort</span>(l, mid), <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>    LL sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i].y &lt;= q[j].y) sum += !q[i].z * q[i].p, w[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> q[j].sum += sum, w[k ++ ] = q[j ++ ];<br>        <br>    <span class="hljs-keyword">while</span> (i &lt;= mid) sum += !q[i].z * q[i].p, w[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) q[j].sum += sum, w[k ++ ] = q[j ++ ];<br>    <br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; j &lt; k; i ++ , j ++ ) q[i] = w[j];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> x, y, p;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;p);<br>        q[i] = &#123;x, y, <span class="hljs-number">0</span>, p&#125;;<br>    &#125;<br>    <span class="hljs-type">int</span> k = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> x1, x2, y1, y2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>        q[k ++ ] = &#123;x2, y2, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, i, <span class="hljs-number">1</span>&#125;;<br>        q[k ++ ] = &#123;x1 - <span class="hljs-number">1</span>, y2, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, i, <span class="hljs-number">-1</span>&#125;;<br>        q[k ++ ] = &#123;x2, y1 - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, i, <span class="hljs-number">-1</span>&#125;;<br>        q[k ++ ] = &#123;x1 - <span class="hljs-number">1</span>, y1 - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, i, <span class="hljs-number">1</span>&#125;;<br>    &#125;<br>    <br>    <span class="hljs-built_in">sort</span>(q, q + k);<br>    <br>    <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">0</span>, k - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i ++ )<br>        <span class="hljs-keyword">if</span> (q[i].z)<br>            ans[q[i].id] += q[i].sum * q[i].sign;<br>            <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++ )<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans[i]);<br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="例题三-动态逆序对"><a href="#例题三-动态逆序对" class="headerlink" title="例题三 动态逆序对"></a><a href="https://www.acwing.com/problem/content/2821/">例题三 动态逆序对</a></h1><h1 id="题意分析-1"><a href="#题意分析-1" class="headerlink" title="题意分析"></a>题意分析</h1><p>对于序列 A，它的逆序对数定义为满足 $i<j$，且 $A_i>A_j$ 的数对 (i,j) 的个数。</p><p>给 1 到 n 的一个排列，按照某种顺序依次删除 m 个元素，你的任务是在每次删除一个元素之前统计整个序列的逆序对数。</p><p>首先我们可以发现<br>$p_i$ i的下标</p><p>$A_i$ 元素的值</p><p>$T_i$ 表示元素i被删除的时间，定义删除的时序，如果没有被删我们任意给他分配一个后面的数，为了方便起见，只要有序就可以，我们可以倒着来分配，第一次删除的时候我们的时间戳是n，第二次是n-1，第m次删除的数位n-m+1，剩下的数按照某种顺序分配就可以，那这样的话，每一个数都会有一个唯一的时间戳，至于为什么要倒着分配，是因为你如果倒着来赋值的话，会发现第三维要满足的关系为$T_i \leq T_j$ 这是一个前缀和，如果正着赋值的话，会求一个后缀和，树状数组比较好处理前缀和。</p><p>然后我们考虑下怎么去统计答案，我们要统计的是每一次删除之前有多少个逆序对，因此我们统计的时候应该按照时间来看，我们要按照被删除的时间算答案，对于每一个时间戳$T_j$来说，我们要求和$T_j$可以构成逆序对的数目有多少个，我们把结果存到S[$T_j$]的数组里面，S[i]表示的是和第i个时间被删除的这个元素构成的逆序对的数量（只考虑$T_j$时刻仍然存在的元素）</p><p>我们规定每个数对（i，j），我们看一下那个数更后被删除我们就把这个数对累加到靠后删除的数对，这样不会导致逆序对被多算。</p><p>我们要求的是删除一个元素之前统计整个序列的逆序对数，相当于求两个数都在第i个时刻之后的部分的总数，这些数应该就是$S_1+S_2+…+S_i$也就是$S_i$的前缀和</p><p>现在问题就转换成如何求S[$T_j$]，我们看一下$T_j$的性质</p><ol><li>$T_i &lt; T_j$</li><li>第一种情况 $P_i &lt; P_j, A_i &gt; A_j$ 第二种情况 $P_j &lt; P_i, A_j &gt; A_i$</li></ol><p>因此我们要求两种偏序关系</p><ol><li>$T_i &lt; T_j, P_i &lt; P_j, A_i &gt; A_j$</li><li>$T_i &lt; T_j, P_j &lt; P_i, A_j &gt; A_i$</li></ol><h1 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Data</span><br>&#123;<br>    <span class="hljs-type">int</span> a, t, res;<br>&#125;q[N], w[N];<br><span class="hljs-type">int</span> tr[N], pos[N];<br>LL ans[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt; N; i += <span class="hljs-built_in">lowbit</span>(i)) tr[i] += v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i)) res += tr[i];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">merge_sort</span>(l, mid), <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> i = mid, j = r;<br>    <span class="hljs-keyword">while</span> (i &gt;= l &amp;&amp; j &gt; mid)<br>        <span class="hljs-keyword">if</span> (q[i].a &gt; q[j].a) <span class="hljs-built_in">add</span>(q[i].t, <span class="hljs-number">1</span>), i -- ;<br>        <span class="hljs-keyword">else</span> q[j].res += <span class="hljs-built_in">query</span>(q[j].t - <span class="hljs-number">1</span>), j -- ;<br>    <span class="hljs-keyword">while</span> (j &gt; mid) q[j].res += <span class="hljs-built_in">query</span>(q[j].t - <span class="hljs-number">1</span>), j -- ;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i + <span class="hljs-number">1</span>; k &lt;= mid; k ++ ) <span class="hljs-built_in">add</span>(q[k].t, <span class="hljs-number">-1</span>);<br>    <br>    j = l, i = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (j &lt;= mid &amp;&amp; i &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i].a &lt; q[j].a) <span class="hljs-built_in">add</span>(q[i].t, <span class="hljs-number">1</span>), i ++ ;<br>        <span class="hljs-keyword">else</span> q[j].res += <span class="hljs-built_in">query</span>(q[j].t - <span class="hljs-number">1</span>), j ++ ;<br>    <span class="hljs-keyword">while</span> (j &lt;= mid) q[j].res += <span class="hljs-built_in">query</span>(q[j].t - <span class="hljs-number">1</span>), j ++ ;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = mid + <span class="hljs-number">1</span>; k &lt; i; k ++ ) <span class="hljs-built_in">add</span>(q[k].t, <span class="hljs-number">-1</span>);<br>    <br>    i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i].a &lt; q[j].a) w[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> w[k ++ ] = q[j ++ ];<br>    <br>    <span class="hljs-keyword">while</span> (i &lt;= mid) w[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= mid) w[k ++ ] = q[j ++ ];<br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; j &lt; k; j ++ , i ++ ) q[i] = w[j]; <br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q[i].a);<br>        pos[q[i].a] = i;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = n; i &lt; m; i ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        q[pos[x]].t = j -- ;<br>        pos[x] = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = n - m; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">if</span> (pos[i] != <span class="hljs-number">-1</span>)<br>            q[pos[i]].t = j -- ;<br>            <br>    <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) ans[q[i].t] = q[i].res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ ) ans[i] += ans[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = n; i &lt; m; i ++, j -- ) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans[j]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL总结</title>
      <link href="/2022/05/06/STL%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/06/STL%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分块之基本思想</title>
      <link href="/2022/05/05/%E5%88%86%E5%9D%97%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3/"/>
      <url>/2022/05/05/%E5%88%86%E5%9D%97%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="分块思想"><a href="#分块思想" class="headerlink" title="分块思想"></a>分块思想</h1><p>分块的思想其实就是一个朴素的暴力做法。<br>我们把一个区间分成$\sqrt{n}$段，对于查询的区间，我们可以将其分成最多两个不完整段（长度$\leq \sqrt{n}$）和不超过$\sqrt{n}$个完整段。因此我们可以把$O(N)$复杂度变为$O(logn)$</p><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a><a href="https://www.acwing.com/activity/content/problem/content/2760/">例题1</a></h2><p> 维护两个变量</p><ul><li>add使本段中所有值都要加上add（lazy）</li><li>sum本段的真实值使多少（算上add）</li></ul><ol><li>修改 $O(\sqrt(n))$</li></ol><ul><li>完整段，我们要对于这个段的所有数，$add=add+d,sum=sum+d*length$</li><li>段内，暴力，枚举所有数$w_i=w_i+d, sum=sum+d$</li></ul><ol><li>查询操作 $O(\sqrt(n))$</li></ol><ul><li>完整段，累加sum</li><li>段内，暴力每组求和</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">350</span>;<br><br><span class="hljs-type">int</span> n, m, len;<br><span class="hljs-type">int</span> w[N], pos[N];<br>LL add[M], sum[M];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (pos[l] == pos[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i ++ ) w[i] += d, sum[pos[i]] += d;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> i = l, j = r;<br>        <span class="hljs-keyword">while</span> (pos[i] == pos[l]) w[i] += d, sum[pos[i]] += d, i ++ ; <br>        <span class="hljs-keyword">while</span> (pos[j] == pos[r]) w[j] += d, sum[pos[j]] += d, j -- ;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = pos[i]; k &lt;= pos[j]; k ++ ) sum[k] += d * len, add[k] += d;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">LL <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    LL res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (pos[l] == pos[r])<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i ++ ) res += w[i] + add[pos[i]];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> i = l, j = r;<br>        <span class="hljs-keyword">while</span> (pos[i] == pos[l]) res += w[i] + add[pos[i]], i ++ ;<br>        <span class="hljs-keyword">while</span> (pos[j] == pos[r]) res += w[j] + add[pos[j]], j -- ;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = pos[i]; k &lt;= pos[j]; k ++ ) res += sum[k];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    len = <span class="hljs-built_in">sqrt</span>(n);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br>        pos[i] = i / len;<br>        sum[pos[i]] += w[i];<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (m -- )<br>    &#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> l, r;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d%d&quot;</span>, op, &amp;l, &amp;r);<br>        <span class="hljs-keyword">if</span> (*op == <span class="hljs-string">&#x27;C&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> d;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d);<br>            <span class="hljs-built_in">change</span>(l, r, d);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(l, r));<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分块之块状链表</title>
      <link href="/2022/05/05/%E5%88%86%E5%9D%97%E4%B9%8B%E5%9D%97%E7%8A%B6%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/05/05/%E5%88%86%E5%9D%97%E4%B9%8B%E5%9D%97%E7%8A%B6%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="块状链表"><a href="#块状链表" class="headerlink" title="块状链表"></a>块状链表</h1><p>把原来的序列分成若干块，每一块会用双向链表维护，每一段长度不定</p><ul><li>插入一段 $O(\sqrt(n))$ 首先分裂节点，然后在分裂点插入序列</li><li>删除一段 $O(\sqrt(n))$ 首先删除开头节点的后半部分，然后删除中间完整节点，最后删除结尾节点的前半部分</li><li>合并块状链表 遍历整个块状链表，若下一个点可以合并至当前点，则合并，该操作是保证时间复杂度的关键 $O(\sqrt(n))$</li></ul><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a><a href="https://www.acwing.com/problem/content/949/">例题</a></h1><h1 id="rope"><a href="#rope" class="headerlink" title="rope"></a>rope</h1><p>这里介绍下rope容器<br>Rope其主要是结合了链表和数组各自的优点，链表中的节点指向每个数据.<br>时间复杂度为$O(n \sqrt n)$可以在很短的时间内实现快速的插入、删除和查找字符串，是一个很厉害的神器！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ext/rope&gt;</span><span class="hljs-comment">///头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_cxx;<br>rope &lt;<span class="hljs-type">int</span>&gt; x;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    x.<span class="hljs-built_in">push_back</span>(x); <span class="hljs-comment">///在末尾加x</span><br>    x.<span class="hljs-built_in">insert</span>(pos, x); <span class="hljs-comment">///在pos位置加入x</span><br>    x.<span class="hljs-built_in">erase</span>(pos, x); <span class="hljs-comment">///从pos位置删除x个元素</span><br>    x.<span class="hljs-built_in">copy</span>(pos, len, x); <span class="hljs-comment">///从pos开始len个元素用x代替</span><br>    x.<span class="hljs-built_in">replace</span>(pos, x); <span class="hljs-comment">///从pos开始全部换为x</span><br>    x.<span class="hljs-built_in">substr</span>(pos, x); <span class="hljs-comment">///提取pos开始x个元素</span><br>    x.<span class="hljs-built_in">at</span>(x)/[x]; <span class="hljs-comment">///访问第x个元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次队内赛题解</title>
      <link href="/2022/05/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%98%9F%E5%86%85%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/05/01/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%98%9F%E5%86%85%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splay</title>
      <link href="/2022/05/01/Splay/"/>
      <url>/2022/05/01/Splay/</url>
      
        <content type="html"><![CDATA[<h1 id="Splay"><a href="#Splay" class="headerlink" title="Splay"></a>Splay</h1><p>平衡树里面有Splay，红黑树，treap，AVL，B树以及B+树</p><ul><li>treap好写，但比较局限</li><li>红黑树系统里面会用但代码太长</li><li>Splay代码适中，较为灵活，可以处理很多有关线段的问题</li></ul><p>首先Splay是一个平衡二叉树，但没有那么平衡<br>先讲解下左旋和右旋，旋转的目的是在保证树的中序遍历不变的情况下，降低树的高度<br><strong>平衡二叉树</strong><br>定义：二叉查找树（Binary Search Tree）它或者是一棵空树；或者是具有下列性质的二叉树：</p><ol><li>树中每个结点被赋予了一个权值；（下面假设不同结点的权值互不相同。）</li><li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>左、右子树也分别为二叉查找树；</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2022/05/01/99310_9d84988cc8-4.png" alt="4.png"> </p><p>二叉查找树能够支持多种动态集合操作，只要所维护的数据集合存在偏序关系（简单来说就是定义了小于等于）</p><p>Splay保证树的高度的做法是什么呢？</p><p>它会在平衡树的操作上进行修改，核心在于每操作一个节点，均将该节点旋转到树根，可以证明每次操作的平均复杂度为$O(logn)$</p><ul><li>插入 将插入的节点旋转到树根</li><li>查询 将查询的节点旋转到树根</li></ul><p>接下来我们来看一下怎么把一个点旋转到树根。<br>我们定义函数Splay(x, k)将点x旋转至点k下面，Splay(x,0)代表把x旋转到根</p><p><strong>左旋右旋</strong><br>节点 x 的父节点 y 是根节点。这时，如果 x 是 y 的左孩子，我们进行一次 Zig（右旋）操作；如果 x 是 y 的右孩子，则我们进行一次 Zag（左旋）操作。经过旋转，x 成为二叉查找树 S 的根节点，调整结束。如图所示：<br><img src="https://cdn.acwing.com/media/article/image/2022/05/01/99310_e554a3a9c8-1.png" alt="1.png"><br><strong>情况1</strong><br>节点x 的父节点y 不是根节点，y 的父节点为z，且x 与y 同时是各自父节点的左孩子或者同时是各自父节点的右孩子。这时，我们进行一次Zig-Zig操作或者Zag-Zag操作。也就是xyz为一条直线，先转y再转x，如图所示<br><img src="https://cdn.acwing.com/media/article/image/2022/05/01/99310_2c32fdf7c8-5.png" alt="5.png"><br><strong>情况2</strong><br>节点x的父节点y不是根节点，y的父节点为z，x与y中一个是其父节点的左孩子而另一个是其父节点的右孩子。这时，我们进行一次Zig-Zag操作或者Zag-Zig 操作。如果是折现的话就先转x再转x，如图所示<br><img src="https://cdn.acwing.com/media/article/image/2022/05/01/99310_412fd6f0c8-6.png" alt="6.png"> </p><p>考虑插入的情况</p><ul><li>将x根据数值插入Splay首先在Splay遵循二叉搜索树的特点找到x的位置，然后将旋转到根节点</li><li>将一个序列插到y的后面，先找y的后继z<br>第一步将y转到根 Splay(y, 0)<br>第二步将z转到y的下面 Splay(z, y),分析可知z是y的右子树，而y的后继是z所以z的左子树一定为空，<br>第三步将这个序列直接放到z的左子树上就可以了</li><li>我们删除序列[L, R]<br>我们先找到L的前驱L-1，和R的后继R+1<br>第一步先将L-1这个点转到根节点 Splay(L - 1, 0)<br>第二步将R+1这个点转到根节点的下面 Splay(R + 1, L - 1),此时R+1这个点的左子树就是序列[L, R],直接把左子树置为空子树就可以了。</li></ul><p>下面讨论下Splay如何维护信息(以区间翻转为例)</p><ul><li>找第k个数 size</li><li>懒标记<br><strong>两个操作</strong><br>pushup()维护信息 旋转最后<br>root-&gt;size=root-&gt;left-&gt;size+root-&gt;right-&gt;size+1<br>pushdown()下传懒标记 递归前<br>swap(root-&gt;left, root-&gt;right)<br>标记下传，清空<h3 id="例题一-Splay"><a href="#例题一-Splay" class="headerlink" title="例题一:Splay"></a><a href="https://www.acwing.com/problem/content/2439/">例题一:Splay</a></h3><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件技术基础项目1.3与课后作业</title>
      <link href="/2022/04/30/%E9%A1%B9%E7%9B%AE1-3%E4%B8%8E%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/"/>
      <url>/2022/04/30/%E9%A1%B9%E7%9B%AE1-3%E4%B8%8E%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a486f72808e543f64508cd1857652524f91f98ea2085ad77c57d2baf17e6dc23"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件技术基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件技术基础项目1.2与课后作业</title>
      <link href="/2022/04/30/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE1.2%E4%B8%8E%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/"/>
      <url>/2022/04/30/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE1.2%E4%B8%8E%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="13a6d65f22e89813b2608a30c624ff0de58e9c57177463e22e94c312dcf45be2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件技术基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件技术基础项目1.1与课后作业</title>
      <link href="/2022/04/30/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE1.1%E4%B8%8E%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/"/>
      <url>/2022/04/30/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE1.1%E4%B8%8E%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="23c5513a887f4713a25f139a0e925561348c92a717e7287273b8d7ccff3437b2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件技术基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一周总结</title>
      <link href="/2022/04/29/%E7%AC%AC%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/29/%E7%AC%AC%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>装了2天，总算把博客建立的大差不差，现在只有一些基本的功能，这周感觉有点摆烂，晚上一定要坚持跑步，然后尽量多利用时光序做好规划，周三晚上算是摆烂，好好利用博客总结发现和分析问题吧，暂时先这样吧。有什么内容晚上再说吧,今天晚上写一下模板,分析下每周的问题。<br>还有就是ACM本周基本没有学习，五一要好好学一下，坚持，努力。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CPP"><span class="hljs-meta">#inude <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    cout &lt;&lt; a &lt;&lt; b &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure><p>$RMSE = 1 - \dfrac{\sum<em>{i=1}^n (y_i - \hat{y}_i)^2} {\sum</em>{i=1}^n (y_i - \bar{y})^2}$</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每周总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
